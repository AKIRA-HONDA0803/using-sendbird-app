{"ast":null,"code":"import React__default, { useContext, useRef, useState, useMemo, useEffect, useCallback, useReducer } from 'react';\nimport { g as format, L as Label, a as LabelTypography, A as Avatar, I as Icon, c as IconTypes, d as IconColors, b as LabelColors, e as Loader, i as ImageRenderer, P as PlaceHolder, j as PlaceHolderTypes } from './index-fe1a6d27.js';\nimport { c as LocalizationContext, u as uuidv4, d as __spreadArray, _ as __assign, w as withSendbirdContext } from './LocalizationContext-dfe8b78b.js';\nimport { M as MessageInput, L as LinkLabel, D as DateSeparator, F as FileViewer, c as compareIds } from './index-8312f99e.js';\nimport { I as IconButton, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, c as MenuItem, a as TextButton, M as Modal, o as SEND_USER_MESSAGE, S as SEND_MESSAGE_START, p as SEND_FILE_MESSAGE, l as UPDATE_USER_MESSAGE, D as DELETE_MESSAGE, h as UserProfileProvider } from './index-cb0d7936.js';\nimport { i as isSameDay } from './index-0cc16758.js';\nimport 'prop-types';\nimport 'react-dom';\n\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\n\nvar scrollIntoLast = function scrollIntoLast(intialTry) {\n  if (intialTry === void 0) {\n    intialTry = 0;\n  }\n\n  var MAX_TRIES = 10;\n  var currentTry = intialTry;\n\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n\n  try {\n    var scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll'); // eslint-disable-next-line no-multi-assign\n\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nvar isSameGroup = function isSameGroup(message, comparingMessage) {\n  if (!message || !comparingMessage || message.messageType === 'admin' || comparingMessage.messageType === 'admin' || !message.sender || !comparingMessage.sender || !message.createdAt || !comparingMessage.createdAt || !message.sender.userId || !comparingMessage.sender.userId) {\n    return false;\n  }\n\n  return message.sendingStatus === comparingMessage.sendingStatus && message.sender.userId === comparingMessage.sender.userId && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage);\n};\n\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage) {\n  return [isSameGroup(prevMessage, currMessage), isSameGroup(currMessage, nextMessage)];\n};\n\nvar kFormatter = function kFormatter(num) {\n  if (Math.abs(num) > 999999) {\n    return (Math.abs(num) / 1000000).toFixed(1) + \"M\";\n  }\n\n  if (Math.abs(num) > 999) {\n    return (Math.abs(num) / 1000).toFixed(1) + \"K\";\n  }\n\n  return \"\" + num;\n};\n\nvar isOperator = function isOperator(openChannel, userId) {\n  var operators = openChannel.operators;\n\n  if (operators.map(function (operator) {\n    return operator.userId;\n  }).indexOf(userId) < 0) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isDisabledBecauseFrozen = function isDisabledBecauseFrozen(openChannel, userId) {\n  var isFrozen = openChannel.isFrozen;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nvar fetchWithListQuery = function fetchWithListQuery(listQuery, logger, eachQueryNextCallback) {\n  var fetchList = function fetchList(query) {\n    var hasNext = query.hasNext;\n\n    if (hasNext) {\n      query.next(function (error, users) {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nvar pxToNumber = function pxToNumber(px) {\n  if (typeof px === 'number') {\n    return px;\n  }\n\n  if (typeof px === 'string') {\n    var parsed = Number.parseFloat(px);\n\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n\n  return null;\n};\n\nvar MessageInputWrapper = function MessageInputWrapper(_a, ref) {\n  var channel = _a.channel,\n      user = _a.user,\n      disabled = _a.disabled,\n      onSendMessage = _a.onSendMessage,\n      onFileUpload = _a.onFileUpload,\n      renderMessageInput = _a.renderMessageInput;\n\n  if (!channel) {\n    return;\n  }\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  if (renderMessageInput) {\n    return renderMessageInput({\n      channel: channel,\n      user: user,\n      disabled: disabled\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, /*#__PURE__*/React__default.createElement(MessageInput, {\n    ref: ref,\n    disabled: disabled,\n    onSendMessage: onSendMessage,\n    onFileUpload: onFileUpload,\n    placeholder: disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED // add disabled because of muted state\n\n  }));\n};\n\nvar MessageInputWrapper$1 = /*#__PURE__*/React__default.forwardRef(MessageInputWrapper);\n\nvar FrozenNotification = function FrozenNotification() {\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-frozen-channel-notification\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-frozen-channel-notification__text\",\n    type: LabelTypography.CAPTION_2\n  }, stringSet.CHANNEL_FROZEN));\n};\n\nfunction OpenchannelConversationHeader(_a) {\n  var coverImage = _a.coverImage,\n      title = _a.title,\n      subTitle = _a.subTitle,\n      amIOperator = _a.amIOperator,\n      onActionClick = _a.onActionClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left\"\n  }, coverImage ? /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image\",\n    src: coverImage,\n    alt: \"channel cover image\",\n    width: \"32px\",\n    height: \"32px\"\n  }) : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image--icon\",\n    style: {\n      width: 32,\n      height: 32\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CHANNELS,\n    fillColor: IconColors.CONTENT,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__title\",\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, title || stringSet.NO_TITLE), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__sub-title\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, subTitle || stringSet.NO_TITLE)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__right\"\n  }, /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-openchannel-conversation-header__right__trigger\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onActionClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: amIOperator ? IconTypes.INFO : IconTypes.MEMBERS,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }))));\n}\n\nvar copyToClipboard = function copyToClipboard(text) {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    var textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n\n    document.body.appendChild(textarea);\n    textarea.select();\n\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  return false;\n};\n\nvar OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\n\nvar getSenderFromMessage = function getSenderFromMessage(message) {\n  return message.sender || message._sender;\n};\n\nvar checkIsSent = function checkIsSent(status) {\n  return status === OpenChannelMessageStatusTypes.SUCCEEDED;\n};\n\nvar checkIsPending = function checkIsPending(status) {\n  return status === OpenChannelMessageStatusTypes.PENDING;\n};\n\nvar checkIsFailed = function checkIsFailed(status) {\n  return status === OpenChannelMessageStatusTypes.FAILED;\n};\n\nvar checkIsByMe = function checkIsByMe(message, userId) {\n  return getSenderFromMessage(message).userId === userId;\n};\n\nvar isFineCopy = function isFineCopy(_a) {\n  var message = _a.message;\n  return message.messageType === 'user' && message.message.length > 0;\n};\n\nvar isFineResend = function isFineResend(_a) {\n  var message = _a.message,\n      status = _a.status,\n      userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsFailed(status) && message.isResendable && message.isResendable();\n};\n\nvar isFineEdit = function isFineEdit(_a) {\n  var message = _a.message,\n      status = _a.status,\n      userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsSent(status);\n};\n\nvar isFineDelete = function isFineDelete(_a) {\n  var message = _a.message,\n      userId = _a.userId;\n  return checkIsByMe(message, userId);\n};\n\nvar showMenuTrigger = function showMenuTrigger(props) {\n  var message = props.message,\n      status = props.status,\n      userId = props.userId;\n\n  if (message.messageType === 'user') {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineEdit({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineCopy({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  } else {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  }\n};\n\nfunction OpenchannelUserMessage(_a) {\n  var className = _a.className,\n      message = _a.message,\n      userId = _a.userId,\n      resendMessage = _a.resendMessage,\n      disabled = _a.disabled,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      chainTop = _a.chainTop,\n      status = _a.status;\n\n  if (!message || message.messageType !== 'user') {\n    return null;\n  } // hooks\n\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useContext(UserProfileContext),\n      disableUserProfile = _b.disableUserProfile,\n      renderUserProfile = _b.renderUserProfile;\n\n  var messageRef = useRef(null);\n  var avatarRef = useRef(null);\n  var contextMenuRef = useRef(null);\n\n  var _c = useState({}),\n      contextStyle = _c[0],\n      setContextStyle = _c[1]; // consts\n\n\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var splitMessage = message.message.split(/\\r/);\n      var matchedMessage = splitMessage.map(function (word) {\n        return word !== '' ? word : /*#__PURE__*/React__default.createElement(\"br\", null);\n      });\n\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2,\n          calssName: \"sendbird-openchannel-user-message-word\"\n        }, \" \" + stringSet.MESSAGE_EDITED + \" \"));\n      }\n\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]); // place context menu top depending clientHeight of message component\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-user-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-user-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__top\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, message.createdAt && format(message.createdAt, 'p'))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__bottom\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__bottom__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText())), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-user-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nfunction OpenChannelAdminMessage(_a) {\n  var className = _a.className,\n      message = _a.message;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-admin-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-admin-message__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.message || ''));\n}\n\nvar URL_REG = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nvar createUrlTester = function createUrlTester(regexp) {\n  return function (text) {\n    return regexp.test(text);\n  };\n};\n\nvar checkOGIsEnalbed = function checkOGIsEnalbed(message) {\n  var ogMetaData = message.ogMetaData;\n\n  if (!ogMetaData) {\n    return false;\n  }\n\n  var url = ogMetaData.url;\n\n  if (!url) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction OpenchannelOGMessage(_a) {\n  var message = _a.message,\n      className = _a.className,\n      disabled = _a.disabled,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage,\n      chainTop = _a.chainTop,\n      status = _a.status,\n      userId = _a.userId;\n\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  var ogMetaData = message.ogMetaData;\n  var defaultImage = ogMetaData.defaultImage;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useContext(UserProfileContext),\n      disableUserProfile = _b.disableUserProfile,\n      renderUserProfile = _b.renderUserProfile;\n\n  var _c = useState({}),\n      contextStyle = _c[0],\n      setContextStyle = _c[1];\n\n  var messageComponentRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var isUrl = createUrlTester(URL_REG);\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var wordClassName = 'sendbird-openchannel-og-message--word';\n      var splitMessage = message.message.split(' ');\n      var matchedMessage = splitMessage.map(function (word) {\n        return isUrl(word) ? /*#__PURE__*/React__default.createElement(LinkLabel, {\n          key: uuidv4(),\n          className: [wordClassName, 'sendbird-openchannel-og-message--word--link'],\n          src: word,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.PRIMARY\n        }, word) : /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_1\n        }, word);\n      });\n\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2\n        }, stringSet.MESSAGE_EDITED));\n      }\n\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]);\n\n  var openLink = function openLink() {\n    if (checkOGIsEnalbed(message)) {\n      var url = ogMetaData.url;\n      window.open(url);\n    }\n  }; // place conxt menu top depending clientHeight of message component\n\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-og-message'], false).join(' '),\n    ref: messageComponentRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-og-message__top__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, message.createdAt && format(message.createdAt, 'p'))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__description\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__description__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText()))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-og-message__top__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag\"\n  }, ogMetaData.url && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__url\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, ogMetaData.url), ogMetaData.title && /*#__PURE__*/React__default.createElement(LinkLabel, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__title\",\n    src: ogMetaData.url,\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.PRIMARY\n  }, ogMetaData.title), ogMetaData.description && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__description\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, ogMetaData.description), ogMetaData.url && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\",\n    role: \"button\",\n    onClick: openLink,\n    onKeyDown: openLink,\n    tabIndex: 0\n  }, defaultImage && /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\",\n    url: defaultImage.url || '',\n    alt: defaultImage.alt || '',\n    height: \"189px\",\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.THUMBNAIL_NONE,\n      width: \"56px\",\n      height: \"56px\"\n    }))\n  }))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))));\n}\n\nvar SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED'\n};\nvar SUPPORTED_MIMES$1 = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\n\nvar getSupportingFileType = function getSupportingFileType(type) {\n  if (SUPPORTED_MIMES$1.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n\n  if (SUPPORTED_MIMES$1.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n\n  return SUPPORTING_TYPES.UNSUPPORTED;\n};\n\nfunction OpenchannelThumbnailMessage(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      disabled = _a.disabled,\n      userId = _a.userId,\n      status = _a.status,\n      chainTop = _a.chainTop,\n      _onClick = _a.onClick,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage;\n  var type = message.type,\n      url = message.url,\n      localUrl = message.localUrl,\n      thumbnails = message.thumbnails;\n  var thumbnailUrl = thumbnails && thumbnails.length > 0 && thumbnails[0].url || null;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var _d = useState(360),\n      messageWidth = _d[0],\n      setMessageWidth = _d[1];\n\n  var messageRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var memorizedThumbnailPlaceHolder = useMemo(function () {\n    return function (type) {\n      return function (_a) {\n        var style = _a.style;\n        return (\n          /*#__PURE__*/\n          // eslint-disable-line\n          React__default.createElement(\"div\", {\n            style: style\n          }, /*#__PURE__*/React__default.createElement(Icon, {\n            type: type,\n            fillColor: IconColors.ON_BACKGROUND_2,\n            width: \"56px\",\n            height: \"56px\"\n          }))\n        );\n      };\n    };\n  }, []);\n  var isByMe = checkIsByMe(message, userId);\n  var isMessageSent = checkIsSent(status);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  useEffect(function () {\n    var _a;\n\n    var thumbnailWidth = ((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-thumbnail-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-thumbnail-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, message.createdAt && format(message.createdAt, 'p'))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap\",\n    role: \"button\",\n    onClick: function onClick() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    onKeyDown: function onKeyDown() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\"\n  }), (_b = {}, _b[SUPPORTING_TYPES.VIDEO] = url || localUrl ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n  }, thumbnailUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\",\n    url: thumbnailUrl,\n    width: messageWidth,\n    height: \"270px\",\n    alt: \"image\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PLAY)\n  }) : /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: url || localUrl,\n    type: type\n  })), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\",\n    type: IconTypes.PLAY,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  })) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.IMAGE] = url || localUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image\",\n    url: thumbnailUrl || url || localUrl,\n    alt: \"image\",\n    width: messageWidth,\n    height: \"270px\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PHOTO)\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.UNSUPPORTED] = /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b)[getSupportingFileType(type)])), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-thumbnail-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nvar checkFileType = function checkFileType(fileUrl) {\n  var audioFile = /(\\.mp3)$/i;\n  var gifFile = /(\\.gif)$/i;\n\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF;\n  }\n\n  return IconTypes.FILE_DOCUMENT;\n};\n\nvar truncate = function truncate(fullStr, strLen) {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = strLen - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nfunction OpenchannelFileMessage(_a) {\n  var className = _a.className,\n      message = _a.message,\n      userId = _a.userId,\n      disabled = _a.disabled,\n      chainTop = _a.chainTop,\n      status = _a.status,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage;\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useContext(UserProfileContext),\n      disableUserProfile = _b.disableUserProfile,\n      renderUserProfile = _b.renderUserProfile;\n\n  var openFileUrl = function openFileUrl() {\n    window.open(message.url);\n  };\n\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-file-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-file-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, message.createdAt && format(message.createdAt, 'p'))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__body\"\n  }, checkFileType(message.url) && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__body__icon\",\n    type: checkFileType(message.url),\n    fillColor: IconColors.PRIMARY,\n    width: \"48px\",\n    height: \"48px\"\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-openchannel-file-message__right__body__file-name\",\n    onClick: openFileUrl\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(message.name || message.url, 40)))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-file-message__context-menu__icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nfunction RemoveMessageModal(_a) {\n  var onCloseModal = _a.onCloseModal,\n      onDeleteMessage = _a.onDeleteMessage;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: onCloseModal,\n    onSubmit: onDeleteMessage,\n    submitText: \"Delete\",\n    titleText: stringSet.MODAL__DELETE_MESSAGE__TITLE\n  });\n} // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\n\n\nvar SUPPORTED_MIMES = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp' // not supported in IE\n  ],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\n\nvar isImage = function isImage(type) {\n  return SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\n};\n\nvar isVideo = function isVideo(type) {\n  return SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\n};\n\nvar MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN'\n};\nvar SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending'\n};\n\nvar getMessageType = function getMessageType(message) {\n  if (message.isUserMessage && message.isUserMessage() || message.messageType === 'user') {\n    return message.ogMetaData ? MessageTypes.OG : MessageTypes.USER;\n  }\n\n  if (message.isAdminMessage && message.isAdminMessage()) {\n    return MessageTypes.ADMIN;\n  }\n\n  if (message.messageType === 'file') {\n    return isImage(message.type) || isVideo(message.type) ? MessageTypes.THUMBNAIL : MessageTypes.FILE;\n  }\n\n  return MessageTypes.UNKNOWN;\n};\n\nfunction MessageHoc(_a) {\n  var _b;\n\n  var message = _a.message,\n      userId = _a.userId,\n      disabled = _a.disabled,\n      editDisabled = _a.editDisabled,\n      hasSeparator = _a.hasSeparator,\n      channel = _a.channel,\n      renderCustomMessage = _a.renderCustomMessage,\n      deleteMessage = _a.deleteMessage,\n      updateMessage = _a.updateMessage,\n      resendMessage = _a.resendMessage,\n      status = _a.status,\n      chainTop = _a.chainTop,\n      chainBottom = _a.chainBottom;\n  var sender = null;\n\n  if (message.messageType !== 'admin') {\n    sender = message.sender;\n  }\n\n  var RenderedMessage = useMemo(function () {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, channel, chainTop, chainBottom);\n    }\n\n    return null;\n  }, [message, renderCustomMessage]);\n\n  var _c = useState(false),\n      showEdit = _c[0],\n      setShowEdit = _c[1];\n\n  var _d = useState(false),\n      showRemove = _d[0],\n      setShowRemove = _d[1];\n\n  var _e = useState(false),\n      showFileViewer = _e[0],\n      setShowFileViewer = _e[1];\n\n  var editMessageInputRef = useRef(null);\n  var isByMe = false;\n\n  if (sender && message.messageType !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = userId === sender.userId || message.requestState === SendingMessageStatus.PENDING || message.requestState === SendingMessageStatus.FAILED;\n  }\n\n  if (RenderedMessage) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n    }, /*#__PURE__*/React__default.createElement(RenderedMessage, {\n      message: message\n    }));\n  }\n\n  if (message.messageType === 'user' && showEdit) {\n    return /*#__PURE__*/React__default.createElement(MessageInput, {\n      isEdit: true,\n      disabled: editDisabled,\n      ref: editMessageInputRef,\n      name: message.messageId,\n      onSendMessage: updateMessage,\n      onCancelEdit: function onCancelEdit() {\n        setShowEdit(false);\n      },\n      value: message.message\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n  }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, 'MMMM dd, yyyy'))), (_b = {}, _b[MessageTypes.ADMIN] = function () {\n    if (message.messageType === 'admin') {\n      return /*#__PURE__*/React__default.createElement(OpenChannelAdminMessage, {\n        message: message\n      });\n    }\n  }(), _b[MessageTypes.FILE] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelFileMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.OG] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelOGMessage, {\n        message: message,\n        status: status,\n        userId: userId,\n        showEdit: setShowEdit,\n        disabled: disabled,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.THUMBNAIL] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelThumbnailMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        onClick: setShowFileViewer,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.USER] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelUserMessage, {\n        message: message,\n        userId: userId,\n        disabled: disabled,\n        showEdit: setShowEdit,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.UNKNOWN] = function () {\n    return; // return (\n    //   <OpenChannelUnknownMessage message={message} />\n    // );\n  }(), _b)[getMessageType(message)], showRemove && /*#__PURE__*/React__default.createElement(RemoveMessageModal, {\n    onCloseModal: function onCloseModal() {\n      return setShowRemove(false);\n    },\n    onDeleteMessage: function onDeleteMessage() {\n      if (message.messageType !== 'admin') {\n        deleteMessage(message);\n      }\n    }\n  }), showFileViewer && message.messageType === 'file' && /*#__PURE__*/React__default.createElement(FileViewer, {\n    onClose: function onClose() {\n      return setShowFileViewer(false);\n    },\n    message: message,\n    onDelete: function onDelete() {\n      return deleteMessage(message);\n    },\n    isByMe: isByMe\n  }));\n}\n\nfunction OpenchannelConversationScroll(_a, ref) {\n  var _b = _a.useMessageGrouping,\n      useMessageGrouping = _b === void 0 ? true : _b,\n      openchannel = _a.openchannel,\n      user = _a.user,\n      allMessages = _a.allMessages,\n      _c = _a.isOnline,\n      isOnline = _c === void 0 ? true : _c,\n      hasMore = _a.hasMore,\n      onScroll = _a.onScroll,\n      renderCustomMessage = _a.renderCustomMessage,\n      updateMessage = _a.updateMessage,\n      deleteMessage = _a.deleteMessage,\n      resendMessage = _a.resendMessage;\n  var scrollRef = ref || useRef(null);\n\n  var _d = useState(false),\n      showScrollDownButton = _d[0],\n      setShowScrollDownButton = _d[1];\n\n  var handleOnScroll = function handleOnScroll(e) {\n    var element = e.target;\n    var scrollTop = element.scrollTop,\n        scrollHeight = element.scrollHeight,\n        clientHeight = element.clientHeight;\n\n    if (scrollHeight > scrollTop + clientHeight && window.navigator.userAgent.indexOf('MSIE ') < 0 // don't show button in IE\n    ) {\n      setShowScrollDownButton(true);\n    } else {\n      setShowScrollDownButton(false);\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    if (scrollTop === 0) {\n      var nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      var first_1 = nodes && nodes[0];\n      onScroll(function () {\n        try {\n          first_1.scrollIntoView();\n        } catch (error) {}\n      });\n    }\n  };\n\n  var scrollToBottom = function scrollToBottom() {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\n      setShowScrollDownButton(false);\n    }\n  };\n\n  var hasMessage = useMemo(function () {\n    return allMessages.length > 0;\n  }, [allMessages.length]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll\",\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__padding\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__item-container\" + (hasMessage ? '' : '--no-messages')\n  }, hasMessage ? allMessages.map(function (message, index) {\n    var status;\n\n    if (message.messageType !== 'admin') {\n      status = message.sendingStatus;\n    }\n\n    var previousMessage = allMessages[index - 1];\n    var nextMessage = allMessages[index - 1];\n    var previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n    var currentCreatedAt = message.createdAt; // https://stackoverflow.com/a/41855608\n\n    var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));\n\n    var _a = useMessageGrouping ? compareMessagesForGrouping(previousMessage, message, nextMessage) : [false, false],\n        chainTop = _a[0],\n        chainBottom = _a[1];\n\n    return /*#__PURE__*/React__default.createElement(MessageHoc, {\n      renderCustomMessage: renderCustomMessage,\n      channel: openchannel,\n      key: message.messageId,\n      message: message,\n      status: status,\n      userId: user.userId,\n      disabled: !isOnline,\n      editDisabled: openchannel.isFrozen,\n      hasSeparator: hasSeparator,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      deleteMessage: deleteMessage,\n      updateMessage: updateMessage,\n      resendMessage: resendMessage\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    className: \"sendbird-openchannel-conversation-scroll__container__place-holder\",\n    type: PlaceHolderTypes.NO_MESSAGES\n  })), showScrollDownButton && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__scroll-bottom-button\",\n    onClick: scrollToBottom,\n    onKeyDown: scrollToBottom,\n    tabIndex: 0,\n    role: \"button\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"24px\",\n    height: \"24px\",\n    type: IconTypes.CHEVRON_DOWN,\n    fillColor: IconColors.CONTENT\n  }))));\n}\n\nvar OpenchannelConversationScroll$1 = /*#__PURE__*/React__default.forwardRef(OpenchannelConversationScroll);\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nvar RESET_MESSAGES = 'RESET_MESSAGES';\nvar GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nvar GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nvar GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nvar SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nvar SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nvar SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nvar RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nvar FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nvar FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nvar FETCH_MUTED_USER_LIST = 'FETCH_MUTED_USER_LIST'; // event handlers\n\nvar ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nvar ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nvar ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nvar ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nvar ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nvar ON_USER_ENTERED = 'ON_USER_ENTERED';\nvar ON_USER_EXITED = 'ON_USER_EXITED';\nvar ON_USER_MUTED = 'ON_USER_MUTED';\nvar ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nvar ON_USER_BANNED = 'ON_USER_BANNED';\nvar ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nvar ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nvar ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nvar ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nvar ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nvar ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nvar ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\nvar messageActionTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SET_CURRENT_CHANNEL: SET_CURRENT_CHANNEL,\n  SET_CHANNEL_INVALID: SET_CHANNEL_INVALID,\n  RESET_MESSAGES: RESET_MESSAGES,\n  GET_PREV_MESSAGES_START: GET_PREV_MESSAGES_START,\n  GET_PREV_MESSAGES_SUCESS: GET_PREV_MESSAGES_SUCESS,\n  GET_PREV_MESSAGES_FAIL: GET_PREV_MESSAGES_FAIL,\n  SENDING_MESSAGE_FAILED: SENDING_MESSAGE_FAILED,\n  SENDING_MESSAGE_SUCCEEDED: SENDING_MESSAGE_SUCCEEDED,\n  SENDING_MESSAGE_START: SENDING_MESSAGE_START,\n  RESENDING_MESSAGE_START: RESENDING_MESSAGE_START,\n  FETCH_PARTICIPANT_LIST: FETCH_PARTICIPANT_LIST,\n  FETCH_BANNED_USER_LIST: FETCH_BANNED_USER_LIST,\n  FETCH_MUTED_USER_LIST: FETCH_MUTED_USER_LIST,\n  ON_MESSAGE_RECEIVED: ON_MESSAGE_RECEIVED,\n  ON_MESSAGE_UPDATED: ON_MESSAGE_UPDATED,\n  ON_MESSAGE_DELETED: ON_MESSAGE_DELETED,\n  ON_MESSAGE_DELETED_BY_REQ_ID: ON_MESSAGE_DELETED_BY_REQ_ID,\n  ON_OPERATOR_UPDATED: ON_OPERATOR_UPDATED,\n  ON_USER_ENTERED: ON_USER_ENTERED,\n  ON_USER_EXITED: ON_USER_EXITED,\n  ON_USER_MUTED: ON_USER_MUTED,\n  ON_USER_UNMUTED: ON_USER_UNMUTED,\n  ON_USER_BANNED: ON_USER_BANNED,\n  ON_USER_UNBANNED: ON_USER_UNBANNED,\n  ON_CHANNEL_FROZEN: ON_CHANNEL_FROZEN,\n  ON_CHANNEL_UNFROZEN: ON_CHANNEL_UNFROZEN,\n  ON_CHANNEL_CHANGED: ON_CHANNEL_CHANGED,\n  ON_META_DATA_CREATED: ON_META_DATA_CREATED,\n  ON_META_DATA_UPDATED: ON_META_DATA_UPDATED,\n  ON_META_DATA_DELETED: ON_META_DATA_DELETED,\n  ON_META_COUNTERS_CREATED: ON_META_COUNTERS_CREATED,\n  ON_META_COUNTERS_UPDATED: ON_META_COUNTERS_UPDATED,\n  ON_META_COUNTERS_DELETED: ON_META_COUNTERS_DELETED,\n  ON_MENTION_RECEIVED: ON_MENTION_RECEIVED\n});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case RESET_MESSAGES:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      {\n        var gottenChannel = action.payload;\n        var operators = gottenChannel.operators;\n\n        if (!state.isInvalid && state.currentOpenChannel && state.currentOpenChannel.url && state.currentOpenChannel.url === gottenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: gottenChannel,\n          isInvalid: false,\n          operators: operators,\n          participants: operators,\n          bannedParticipantIds: [],\n          mutedParticipantIds: []\n        });\n      }\n\n    case SET_CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n\n    case GET_PREV_MESSAGES_START:\n      {\n        return __assign(__assign({}, state), {\n          loading: true\n        });\n      }\n\n    case GET_PREV_MESSAGES_SUCESS:\n    case GET_PREV_MESSAGES_FAIL:\n      {\n        var isFailed = action.type === GET_PREV_MESSAGES_FAIL;\n        var _a = action.payload,\n            _b = _a.currentOpenChannel,\n            currentOpenChannel = _b === void 0 ? {} : _b,\n            _c = _a.messages,\n            messages = _c === void 0 ? [] : _c,\n            hasMore = _a.hasMore,\n            lastMessageTimestamp = _a.lastMessageTimestamp;\n        var actionChannelUrl = currentOpenChannel.url;\n        var receivedMessages_1 = isFailed ? [] : messages;\n\n        var _hasMore = isFailed ? false : hasMore;\n\n        var _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n        var stateChannel = state.currentOpenChannel;\n        var stateChannelUrl = stateChannel.url;\n\n        if (actionChannelUrl !== stateChannelUrl) {\n          return state;\n        }\n\n        var filteredAllMessages = state.allMessages.filter(function (message) {\n          return !receivedMessages_1.find(function (_a) {\n            var messageId = _a.messageId;\n            return compareIds(messageId, message.messageId);\n          });\n        });\n        return __assign(__assign({}, state), {\n          loading: false,\n          initialized: true,\n          hasMore: _hasMore,\n          lastMessageTimestamp: _lastMessageTimestamp,\n          allMessages: __spreadArray(__spreadArray([], receivedMessages_1, true), filteredAllMessages, true)\n        });\n      }\n\n    case SENDING_MESSAGE_START:\n      {\n        var _d = action.payload,\n            message = _d.message,\n            channel = _d.channel;\n\n        if (channel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [__assign({}, message)], false)\n        });\n      }\n\n    case SENDING_MESSAGE_SUCCEEDED:\n      {\n        var sentMessage_1 = action.payload;\n        var newMessages = state.allMessages.map(function (m) {\n          return compareIds(m.reqId, sentMessage_1.reqId) ? sentMessage_1 : m;\n        });\n        return __assign(__assign({}, state), {\n          allMessages: newMessages\n        });\n      }\n\n    case SENDING_MESSAGE_FAILED:\n      {\n        var sentMessage_2 = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, sentMessage_2.reqId) ? sentMessage_2 : m;\n          })\n        });\n      }\n\n    case RESENDING_MESSAGE_START:\n      {\n        var eventedChannel = action.payload.channel;\n        var resentMessage_1 = action.payload.message;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, resentMessage_1.reqId) ? resentMessage_1 : m;\n          })\n        });\n      }\n\n    case FETCH_PARTICIPANT_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedParticipantList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), fetchedParticipantList, true)\n        });\n      }\n\n    case FETCH_BANNED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedBannedUserList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedBannedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedBannedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n\n    case FETCH_MUTED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedMutedUserList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedMutedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedMutedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n    // events\n\n    case ON_MESSAGE_RECEIVED:\n      {\n        var eventedChannel = action.payload.channel;\n        var receivedMessage = action.payload.message;\n        var currentOpenChannel = state.currentOpenChannel;\n\n        if (!compareIds(eventedChannel.url, currentOpenChannel.url) || !(state.allMessages.map(function (message) {\n          return message.messageId;\n        }).indexOf(receivedMessage.messageId) < 0)) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [receivedMessage], false)\n        });\n      }\n\n    case ON_MESSAGE_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedMessage_1 = action.payload.message;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (message) {\n            return message.isIdentical(updatedMessage_1) ? updatedMessage_1 : message;\n          })\n        });\n      }\n\n    case ON_MESSAGE_DELETED:\n      {\n        var eventedChannel = action.payload.channel;\n        var deletedMessageId_1 = action.payload.messageId;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (message) {\n            return !compareIds(message.messageId, deletedMessageId_1);\n          })\n        });\n      }\n\n    case ON_MESSAGE_DELETED_BY_REQ_ID:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (m) {\n            return !compareIds(m.reqId, action.payload);\n          })\n        });\n      }\n\n    case ON_OPERATOR_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedOperators = action.payload.operators;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: __assign(__assign({}, state.currentOpenChannel), {\n            operators: updatedOperators\n          }),\n          operators: updatedOperators\n        });\n      }\n\n    case ON_USER_ENTERED:\n      {\n        var eventedChannel = action.payload.channel;\n        var enteredUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), [enteredUser], false)\n        });\n      }\n\n    case ON_USER_EXITED:\n      {\n        var eventedChannel = action.payload.channel;\n        var exitedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: state.participants.filter(function (participant) {\n            return !compareIds(participant.userId, exitedUser_1.userId);\n          })\n        });\n      }\n\n    case ON_USER_MUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var mutedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.mutedParticipantIds, true), [mutedUser.userId], false)\n        });\n      }\n\n    case ON_USER_UNMUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unmutedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(unmutedUser_1.userId) < 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: state.mutedParticipantIds.filter(function (userId) {\n            return userId !== unmutedUser_1.userId;\n          })\n        });\n      }\n\n    case ON_USER_BANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var bannedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), [bannedUser.userId], false)\n        });\n      }\n\n    case ON_USER_UNBANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unbannedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(unbannedUser_1.userId) < 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: state.bannedParticipantIds.filter(function (userId) {\n            return userId !== unbannedUser_1.userId;\n          })\n        });\n      }\n\n    case ON_CHANNEL_FROZEN:\n      {\n        var frozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== frozenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          frozen: true\n        });\n      }\n\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var unfrozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== unfrozenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          frozen: false\n        });\n      }\n\n    case ON_CHANNEL_CHANGED:\n      {\n        var changedChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== changedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: changedChannel\n        });\n      }\n\n    case ON_META_DATA_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_DATA_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_DATA_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaDataKeys = action.payload.metaDataKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_MENTION_RECEIVED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const mentionedMessage = action.payload.message;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}\n\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: []\n};\n\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n      sdkInit = _a.sdkInit,\n      fetchingParticipants = _a.fetchingParticipants;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: openChannel\n          });\n          openChannel.enter(function (_, error) {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', {\n                channelUrl: channelUrl,\n                error: error\n              });\n              messagesDispatcher({\n                type: SET_CHANNEL_INVALID,\n                payload: null\n              });\n            }\n\n            if (fetchingParticipants) {\n              // fetch participants, banned participantIds, muted participantIds\n              var participantListQuery = openChannel.createParticipantListQuery();\n              var bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              var mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              fetchWithListQuery(participantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_PARTICIPANT_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(bannedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_BANNED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(mutedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_MUTED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', {\n            channelUrl: channelUrl,\n            error: error\n          });\n          messagesDispatcher({\n            type: SET_CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      }); // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nfunction useHandleChannelEvents(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      checkScrollBottom = _a.checkScrollBottom;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    var messageReceiverId = uuidv4();\n\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      var ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = function (channel, message) {\n        var scrollToEnd = checkScrollBottom();\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n\n        if (scrollToEnd) {\n          try {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = function (channel, messageId) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', {\n          channelUrl: channelUrl,\n          messageId: messageId\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: {\n            channel: channel,\n            messageId: messageId\n          }\n        });\n      };\n\n      ChannelHandler.onOperatorUpdated = function (channel, operators) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', {\n          channelUrl: channelUrl,\n          operators: operators\n        });\n        messagesDispatcher({\n          type: ON_OPERATOR_UPDATED,\n          payload: {\n            channel: channel,\n            operators: operators\n          }\n        });\n      };\n\n      ChannelHandler.onUserEntered = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_ENTERED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserExited = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_EXITED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserMuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_MUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserUnmuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNMUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserBanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_BANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserUnbanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNBANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onChannelFrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_FROZEN,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onChannelUnfrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_UNFROZEN,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onChannelChanged = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_CHANGED,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onMetaDataCreated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_CREATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n\n      ChannelHandler.onMetaDataUpdated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_UPDATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n\n      ChannelHandler.onMetaDataDeleted = function (channel, metaDataKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', {\n          channelUrl: channelUrl,\n          metaDataKeys: metaDataKeys\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_DELETED,\n          payload: {\n            channel: channel,\n            metaDataKeys: metaDataKeys\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersCreated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_CREATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersUpdated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_UPDATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersDeleted = function (channel, metaCounterKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', {\n          channelUrl: channelUrl,\n          metaCounterKeys: metaCounterKeys\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_DELETED,\n          payload: {\n            channel: channel,\n            metaCounterKeys: metaCounterKeys\n          }\n        });\n      };\n\n      ChannelHandler.onMentionReceived = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MENTION_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return function () {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [currentOpenChannel]);\n}\n\nfunction useInitialMessagesFetch(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      userFilledMessageListParams = _a.userFilledMessageListParams;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: RESET_MESSAGES,\n      payload: null\n    });\n\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.isInclusive = true;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_START,\n        payload: null\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore,\n              lastMessageTimestamp: lastMessageTimestamp\n            }\n          });\n          setTimeout(function () {\n            scrollIntoLast();\n          });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nfunction useScrollCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      lastMessageTimestamp = _a.lastMessageTimestamp;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher,\n      hasMore = _b.hasMore,\n      userFilledMessageListParams = _b.userFilledMessageListParams;\n  return useCallback(function (callback) {\n    if (hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          var hasMore_1 = messages && messages.length > 0;\n          var lastMessageTimestamp_1 = hasMore_1 ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore_1,\n              lastMessageTimestamp: lastMessageTimestamp_1\n            }\n          });\n          setTimeout(function () {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp]);\n}\n\nfunction useCheckScrollBottom(_a, _b) {\n  var conversationScrollRef = _a.conversationScrollRef;\n  var logger = _b.logger;\n  return useCallback(function () {\n    var isBottom = true;\n\n    if (conversationScrollRef) {\n      try {\n        var conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch (error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n\n    return isBottom;\n  }, [conversationScrollRef]);\n}\n\nfunction useSendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      onBeforeSendUserMessage = _a.onBeforeSendUserMessage,\n      checkScrollBottom = _a.checkScrollBottom,\n      messageInputRef = _a.messageInputRef;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function () {\n    if (sdk && sdk.UserMessageParams) {\n      var text = messageInputRef.current.value;\n\n      var createParamsDefault = function createParamsDefault(txt) {\n        var message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        var params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      };\n\n      var createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n      var isBottom_1 = checkScrollBottom();\n      var pendingMessage = currentOpenChannel.sendUserMessage(params, function (message, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_SUCCEEDED,\n            payload: message\n          });\n\n          if (isBottom_1) {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_FAILED,\n            payload: messageActionTypes\n          });\n        }\n      });\n      messagesDispatcher({\n        type: SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nfunction useFileUploadCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      checkScrollBottom = _a.checkScrollBottom,\n      _c = _a.imageCompression,\n      imageCompression = _c === void 0 ? {} : _c,\n      onBeforeSendFileMessage = _a.onBeforeSendFileMessage;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (file) {\n    if (sdk && sdk.FileMessageParams) {\n      var compressionRate_1 = imageCompression.compressionRate,\n          resizingWidth_1 = imageCompression.resizingWidth,\n          resizingHeight_1 = imageCompression.resizingHeight;\n      var createCustomParams_1 = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n      var compressibleFileType = file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg';\n      var compressibleRatio = compressionRate_1 > 0 && compressionRate_1 < 1; // pxToNumber returns null if values are invalid\n\n      var compressibleDiamensions_1 = pxToNumber(resizingWidth_1) || pxToNumber(resizingHeight_1);\n      var canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions_1);\n\n      var createParamsDefault_1 = function createParamsDefault_1(file_) {\n        var params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) {\n        // Using image compression\n        try {\n          var image_1 = document.createElement('img');\n          image_1.src = URL.createObjectURL(file);\n\n          image_1.onload = function () {\n            URL.revokeObjectURL(image_1.src);\n            var canvas = document.createElement('canvas');\n            var imageWidth = image_1.naturalWidth || image_1.width;\n            var imageHeight = image_1.naturalHeight || image_1.height;\n            var targetWidth = pxToNumber(resizingWidth_1) || imageWidth;\n            var targetHeight = pxToNumber(resizingHeight_1) || imageHeight; // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n\n            if (file.type === 'image/png' && !compressibleDiamensions_1) {\n              targetWidth *= compressionRate_1;\n              targetHeight *= compressionRate_1;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            var context = canvas.getContext('2d');\n            context.drawImage(image_1, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(function (newImageBlob) {\n              var compressedFile = new File([newImageBlob], file.name, {\n                type: file.type\n              });\n\n              if (createCustomParams_1) {\n                logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n\n              var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault_1(compressedFile);\n              logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n              var isBottom = checkScrollBottom();\n              var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n                if (!error) {\n                  logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_SUCCEEDED,\n                    payload: message\n                  });\n\n                  if (isBottom) {\n                    setTimeout(function () {\n                      scrollIntoLast();\n                    });\n                  }\n                } else {\n                  logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n                    message: message,\n                    error: error\n                  });\n                  message.localUrl = URL.createObjectURL(file);\n                  message.file = file;\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_FAILED,\n                    payload: message\n                  });\n                }\n              });\n              messagesDispatcher({\n                type: SENDING_MESSAGE_START,\n                payload: {\n                  message: __assign(__assign({}, pendingMessage), {\n                    url: URL.createObjectURL(file),\n                    // pending thumbnail message seems to be failed\n                    requestState: 'pending'\n                  }),\n                  channel: currentOpenChannel\n                }\n              });\n            }, file.type, compressionRate_1);\n          };\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else {\n        // Not using image compression\n        if (createCustomParams_1) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n\n        var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault_1(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n        var isBottom_1 = checkScrollBottom();\n        var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n\n            if (isBottom_1) {\n              setTimeout(function () {\n                scrollIntoLast();\n              });\n            }\n          } else {\n            logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n              message: message,\n              error: error\n            });\n            message.localUrl = URL.createObjectURL(file);\n            message.file = file;\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: message\n            });\n          }\n        });\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: __assign(__assign({}, pendingMessage), {\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending'\n            }),\n            channel: currentOpenChannel\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nfunction useUpdateMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      onBeforeSendUserMessage = _a.onBeforeSendUserMessage;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (messageId, text, callback) {\n    var createParamsDefault = function createParamsDefault(txt) {\n      var params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n\n    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, function (message, error) {\n      if (callback) {\n        callback();\n      }\n\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', {\n          message: message,\n          params: params\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message: message\n          }\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nfunction useDeleteMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (message, callback) {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    var sendingStatus = message.sendingStatus;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId\n      });\n\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType === 'file' || message.messageType === 'user')) {\n        return;\n      }\n\n      var messageToDelete = message;\n      currentOpenChannel.deleteMessage(messageToDelete, function (error) {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n\n        if (callback) {\n          callback();\n        }\n\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nfunction useResendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (failedMessage) {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    var messageType = failedMessage.messageType,\n        file = failedMessage.file;\n\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage\n        }\n      }); // userMessage\n\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n        return;\n      } // fileMessage\n\n\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nvar COMPONENT_CLASS_NAME = 'sendbird-openchannel-conversation';\n\nvar OpenchannelConversation = function OpenchannelConversation(props) {\n  var // internal props\n  stores = props.stores,\n      config = props.config,\n      // normal props\n  useMessageGrouping = props.useMessageGrouping,\n      channelUrl = props.channelUrl,\n      _a = props.queries,\n      queries = _a === void 0 ? {} : _a,\n      disableUserProfile = props.disableUserProfile,\n      _b = props.fetchingParticipants,\n      fetchingParticipants = _b === void 0 ? false : _b,\n      // We didn't decide to support fetching participant list\n  renderCustomMessage = props.renderCustomMessage,\n      renderUserProfile = props.renderUserProfile,\n      renderChannelTitle = props.renderChannelTitle,\n      renderMessageInput = props.renderMessageInput,\n      onBeforeSendUserMessage = props.onBeforeSendUserMessage,\n      onBeforeSendFileMessage = props.onBeforeSendFileMessage,\n      onChatHeaderActionClick = props.onChatHeaderActionClick;\n  var sdkStore = stores.sdkStore,\n      userStore = stores.userStore;\n  var userId = config.userId,\n      isOnline = config.isOnline,\n      logger = config.logger,\n      pubSub = config.pubSub,\n      imageCompression = config.imageCompression;\n  var sdk = sdkStore.sdk;\n  var user = userStore.user; // hook variables\n\n  var _c = useReducer(reducer, initialState),\n      messagesStore = _c[0],\n      messagesDispatcher = _c[1];\n\n  var allMessages = messagesStore.allMessages,\n      loading = messagesStore.loading,\n      initialized = messagesStore.initialized,\n      currentOpenChannel = messagesStore.currentOpenChannel,\n      isInvalid = messagesStore.isInvalid,\n      hasMore = messagesStore.hasMore,\n      lastMessageTimestamp = messagesStore.lastMessageTimestamp,\n      operators = messagesStore.operators,\n      bannedParticipantIds = messagesStore.bannedParticipantIds,\n      mutedParticipantIds = messagesStore.mutedParticipantIds; // ref\n\n  var messageInputRef = useRef(null); // useSendMessageCallback\n\n  var conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n\n  var stringSet = useContext(LocalizationContext).stringSet; // const\n\n  var sdkInit = sdkStore.initialized;\n  var userFilledMessageListParams = queries ? queries.messageListParams : null;\n  var disabled = !initialized || !isOnline || isDisabledBecauseFrozen(currentOpenChannel, userId); // || utils.isDisabledBecauseMuted(mutedParticipantIds, userId)\n\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile; // useMemo\n\n  var amIBanned = useMemo(function () {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  var amIMuted = useMemo(function () {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  var amIOperator = useMemo(function () {\n    return operators.map(function (operator) {\n      return operator.userId;\n    }).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]); // use hooks\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit,\n    fetchingParticipants: fetchingParticipants\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useEffect(function () {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n  var checkScrollBottom = useCheckScrollBottom({\n    conversationScrollRef: conversationScrollRef\n  }, {\n    logger: logger\n  });\n  useHandleChannelEvents({\n    currentOpenChannel: currentOpenChannel,\n    checkScrollBottom: checkScrollBottom\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useInitialMessagesFetch({\n    currentOpenChannel: currentOpenChannel,\n    userFilledMessageListParams: userFilledMessageListParams\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var onScroll = useScrollCallback({\n    currentOpenChannel: currentOpenChannel,\n    lastMessageTimestamp: lastMessageTimestamp\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    hasMore: hasMore,\n    userFilledMessageListParams: userFilledMessageListParams\n  });\n  var handleSendMessage = useSendMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage,\n    checkScrollBottom: checkScrollBottom,\n    messageInputRef: messageInputRef\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var handleFileUpload = useFileUploadCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendFileMessage: onBeforeSendFileMessage,\n    checkScrollBottom: checkScrollBottom,\n    imageCompression: imageCompression\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var deleteMessage = useDeleteMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var resendMessage = useResendMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  }); // handle API calls from withSendbird\n\n  useEffect(function () {\n    var subscriber = new Map();\n\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n\n    subscriber.set(SEND_USER_MESSAGE, pubSub.subscribe(SEND_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n      scrollIntoLast();\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: message\n        });\n      }\n    }));\n    subscriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(SEND_FILE_MESSAGE, pubSub.subscribe(SEND_FILE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n      scrollIntoLast();\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message,\n          fromSelector = msg.fromSelector;\n\n      if (fromSelector && channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      }\n    }));\n    subscriber.set(DELETE_MESSAGE, pubSub.subscribe(DELETE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          messageId = msg.messageId;\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: messageId\n        });\n      }\n    }));\n    return function () {\n      if (subscriber) {\n        subscriber.forEach(function (s) {\n          try {\n            s.remove();\n          } catch (_a) {//\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n\n  if (!currentOpenChannel || !currentOpenChannel.url || amIBanned) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.NO_CHANNELS\n    }));\n  }\n\n  if (loading) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.LOADING\n    }));\n  }\n\n  if (isInvalid) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: COMPONENT_CLASS_NAME,\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, renderChannelTitle ? renderChannelTitle({\n    channel: currentOpenChannel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(OpenchannelConversationHeader, {\n    title: currentOpenChannel.name,\n    subTitle: kFormatter(currentOpenChannel.participantCount) + \" \" + stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS,\n    coverImage: currentOpenChannel.coverUrl,\n    onActionClick: onChatHeaderActionClick,\n    amIOperator: amIOperator\n  }), currentOpenChannel.isFrozen && /*#__PURE__*/React__default.createElement(FrozenNotification, null), /*#__PURE__*/React__default.createElement(OpenchannelConversationScroll$1, {\n    ref: conversationScrollRef,\n    renderCustomMessage: renderCustomMessage,\n    openchannel: currentOpenChannel,\n    user: user,\n    useMessageGrouping: useMessageGrouping,\n    isOnline: isOnline,\n    allMessages: allMessages,\n    onScroll: onScroll,\n    hasMore: hasMore,\n    updateMessage: updateMessage,\n    deleteMessage: deleteMessage,\n    resendMessage: resendMessage\n  }), renderMessageInput ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, renderMessageInput({\n    channel: currentOpenChannel,\n    user: user,\n    disabled: disabled\n  })) : /*#__PURE__*/React__default.createElement(MessageInputWrapper$1, {\n    channel: currentOpenChannel,\n    user: user,\n    ref: messageInputRef,\n    disabled: disabled || amIMuted,\n    onSendMessage: handleSendMessage,\n    onFileUpload: handleFileUpload,\n    renderMessageInput: renderMessageInput\n  }));\n};\n\nvar index = withSendbirdContext(OpenchannelConversation);\nexport { OpenchannelConversation, index as default };","map":null,"metadata":{},"sourceType":"module"}