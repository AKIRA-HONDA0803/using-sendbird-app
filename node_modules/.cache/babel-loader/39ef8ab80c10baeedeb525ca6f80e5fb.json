{"ast":null,"code":"import React__default, { useContext, useMemo, useRef, useState, useEffect } from 'react';\nimport { M as Modal, T as Type, a as TextButton, B as Button, d as ButtonTypes, e as ButtonSizes, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, s as selectors, h as UserProfileProvider, A as copyToClipboard } from './index-cb0d7936.js';\nimport { c as LocalizationContext, d as __spreadArray, w as withSendbirdContext } from './LocalizationContext-dfe8b78b.js';\nimport { A as Avatar, L as Label, a as LabelTypography, b as LabelColors, I as Icon, c as IconTypes, d as IconColors, P as PlaceHolder, f as PlaceHolderTypes } from './index-fe1a6d27.js';\nimport { g as getOpenChannelAvatar } from './utils-7b22e0fc.js';\nimport { I as InputLabel, a as Input, n as noop, U as UserListItem$1 } from './index-1fe82074.js';\nimport { a as Accordion, A as AccordionGroup } from './index-d85ca28f.js';\nimport 'prop-types';\nimport 'react-dom';\n\nfunction ChannelAvatar(_a) {\n  var channel = _a.channel,\n      theme = _a.theme,\n      _b = _a.height,\n      height = _b === void 0 ? 56 : _b,\n      _c = _a.width,\n      width = _c === void 0 ? 56 : _c;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var memoizedAvatar = useMemo(function () {\n    return /*#__PURE__*/React__default.createElement(Avatar, {\n      className: \"sendbird-chat-header__avatar--open-channel\",\n      src: getOpenChannelAvatar(channel),\n      width: width + \"px\",\n      height: height + \"px\",\n      alt: channel.name || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE\n    });\n  }, [channel.coverUrl, theme]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, memoizedAvatar);\n}\n\nvar EditDetails = function EditDetails(props) {\n  var _onSubmit = props.onSubmit,\n      onCancel = props.onCancel,\n      channel = props.channel,\n      theme = props.theme;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n\n  var _a = useState(null),\n      currentImg = _a[0],\n      setCurrentImg = _a[1];\n\n  var _b = useState(null),\n      newFile = _b[0],\n      setNewFile = _b[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var title = channel.name;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (title !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(newFile, inputRef.current.value);\n\n      onCancel();\n    },\n    type: Type.PRIMARY\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? /*#__PURE__*/React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), /*#__PURE__*/React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\n\nfunction ChannelProfile(props) {\n  var disabled = props.disabled,\n      channel = props.channel,\n      theme = props.theme,\n      onChannelInfoChange = props.onChannelInfoChange;\n  var title = channel.name;\n\n  var _a = useState(false),\n      showModal = _a[0],\n      setShowModal = _a[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile--inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    theme: theme,\n    height: 80,\n    width: 80\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1,\n    className: \"sendbird-openchannel-profile__title\"\n  }, title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE), /*#__PURE__*/React__default.createElement(TextButton, {\n    disabled: disabled,\n    className: \"sendbird-openchannel-profile__edit\",\n    onClick: function onClick() {\n      if (disabled) {\n        return;\n      }\n\n      setShowModal(true);\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY\n  }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)), showModal && /*#__PURE__*/React__default.createElement(EditDetails, {\n    onCancel: function onCancel() {\n      return setShowModal(false);\n    },\n    onSubmit: onChannelInfoChange,\n    channel: channel,\n    theme: theme\n  })));\n}\n\nfunction ParticipantsModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(null),\n      participantListQuery = _c[0],\n      setParticipantListQuery = _c[1];\n\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$1, {\n      user: p,\n      key: p.userId\n    });\n  }))));\n}\n\nvar SHOWN_MEMBER_MAX = 10;\n\nvar UserListItem = function UserListItem(_a) {\n  var member = _a.member,\n      _b = _a.currentUser,\n      currentUser = _b === void 0 ? '' : _b;\n  var avatarRef = useRef(null);\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member-avatar\"\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        },\n        ref: avatarRef,\n        src: member.profileUrl,\n        width: 24,\n        height: 24\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef // for catching location(x, y) of MenuItems\n        ,\n        parentContainRef: avatarRef // for toggling more options(menus & reactions)\n        ,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: member,\n        currentUserId: currentUser,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        disableMessaging: true,\n        user: member,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, member.nickname || stringSet.NO_NAME, currentUser === member.userId && stringSet.CHANNEL_SETTING__MEMBERS__YOU));\n};\n\nfunction ParticipantsAccordion(_a) {\n  var channel = _a.channel,\n      currentUser = _a.currentUser;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(false),\n      showMoreModal = _c[0],\n      setShowMoreModal = _c[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(Accordion, {\n    className: \"sendbird-participants-accordion\",\n    id: \"participants\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MEMBERS,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-openchannel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"\"\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__list\"\n      }, participants.slice(0, SHOWN_MEMBER_MAX).map(function (p) {\n        return /*#__PURE__*/React__default.createElement(UserListItem, {\n          member: p,\n          currentUser: currentUser,\n          key: p.userId\n        });\n      }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n        className: \"sendbird-channel-settings__empty-list\",\n        type: LabelTypography.SUBTITLE_2,\n        color: LabelColors.ONBACKGROUND_3\n      }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null), participants.length >= SHOWN_MEMBER_MAX && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__footer\"\n      }, /*#__PURE__*/React__default.createElement(Button, {\n        className: \"sendbird-participants-accordion__footer__all-participants\",\n        type: ButtonTypes.SECONDARY,\n        size: ButtonSizes.SMALL,\n        onClick: function onClick() {\n          return setShowMoreModal(true);\n        }\n      }, stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL), showMoreModal && /*#__PURE__*/React__default.createElement(ParticipantsModal, {\n        currentUser: currentUser,\n        hideModal: function hideModal() {\n          setShowMoreModal(false);\n        },\n        channel: channel\n      })));\n    }\n  });\n}\n\nfunction DeleteChannel(_a) {\n  var isOnline = _a.isOnline,\n      onDeleteChannel = _a.onDeleteChannel;\n\n  var _b = useState(false),\n      showDeleteChannelModal = _b[0],\n      setShowDeleteChannelModal = _b[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__panel-item\\n          sendbird-openchannel-settings__delete-channel\\n            \" + (!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''),\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowDeleteChannelModal(true);\n    },\n    onClick: function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowDeleteChannelModal(true);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.DELETE,\n    className: ['sendbird-openchannel-settings__panel-icon-left', 'sendbird-openchannel-settings__panel-icon__delete'].join(' '),\n    height: \"24px\",\n    width: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)), showDeleteChannelModal && /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: function onCancel() {\n      setShowDeleteChannelModal(false);\n    },\n    onSubmit: function onSubmit() {\n      onDeleteChannel();\n    },\n    submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE\n  }));\n}\n\nfunction ParticipantsList(_a) {\n  var channel = _a.channel,\n      onCloseClick = _a.onCloseClick,\n      currentUser = _a.currentUser;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(null),\n      participantListQuery = _c[0],\n      setParticipantListQuery = _c[1];\n\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participant\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participants-list\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", null, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      member: p,\n      currentUser: currentUser,\n      key: p.userId\n    });\n  }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null)));\n}\n\nfunction InvalidChannel(_a) {\n  var onCloseClick = _a.onCloseClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__placeholder\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.WRONG\n  })));\n}\n\nvar emptyLogger = function emptyLogger() {\n  return {\n    info: noop,\n    error: noop,\n    warning: noop\n  };\n};\n\nfunction OpenChannelSettings(props) {\n  var channelUrl = props.channelUrl,\n      _a = props.onCloseClick,\n      _onCloseClick = _a === void 0 ? noop : _a,\n      onBeforeUpdateChannel = props.onBeforeUpdateChannel,\n      _b = props.onChannelModified,\n      onChannelModified = _b === void 0 ? noop : _b,\n      renderChannelProfile = props.renderChannelProfile,\n      renderUserProfile = props.renderUserProfile,\n      _onDeleteChannel = props.onDeleteChannel,\n      _c = props.disableUserProfile,\n      disableUserProfile = _c === void 0 ? false : _c,\n      _d = props.logger,\n      logger = _d === void 0 ? emptyLogger() : _d,\n      sdk = props.sdk,\n      theme = props.theme,\n      user = props.user,\n      isOnline = props.isOnline;\n\n  var currentUser = user.userId;\n\n  var _e = useState(null),\n      channel = _e[0],\n      setChannel = _e[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n      if (!error) {\n        setChannel(openChannel);\n      } else {\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk]);\n\n  if (!channel) {\n    return /*#__PURE__*/React__default.createElement(InvalidChannel, {\n      onCloseClick: function onCloseClick() {\n        logger.info('OpenChannelSettings: Click close');\n\n        if (_onCloseClick) {\n          _onCloseClick();\n        }\n      }\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-openchannel-settings\",\n    disableUserProfile: disableUserProfile,\n    renderUserProfile: renderUserProfile\n  }, channel.isOperator(user) ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__close-icon\",\n    type: IconTypes.CLOSE,\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      _onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__profile\"\n  }, renderChannelProfile ? renderChannelProfile({\n    channel: channel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(ChannelProfile, {\n    disabled: !isOnline,\n    channel: channel,\n    theme: theme,\n    onChannelInfoChange: function onChannelInfoChange(currentImg, currentTitle) {\n      logger.info('ChannelSettings: Channel information being updated');\n\n      if (onBeforeUpdateChannel) {\n        var params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data);\n        logger.info('ChannelSettings: onBeforeUpdateChannel', params);\n        channel.updateChannel(params, function (openChannel) {\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      } else {\n        channel.updateChannel(currentTitle, currentImg, channel.data, function (openChannel) {\n          logger.info('ChannelSettings: Channel information updated', openChannel);\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      }\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__url\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__copy-icon\",\n    type: IconTypes.COPY,\n    height: \"22px\",\n    width: \"22px\",\n    onClick: function onClick() {\n      copyToClipboard(channel.url);\n    }\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-label\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-value\",\n    type: LabelTypography.SUBTITLE_2\n  }, channel.url)), /*#__PURE__*/React__default.createElement(AccordionGroup, null, /*#__PURE__*/React__default.createElement(ParticipantsAccordion, {\n    channel: channel,\n    currentUser: currentUser\n  })), /*#__PURE__*/React__default.createElement(DeleteChannel, {\n    isOnline: isOnline,\n    onDeleteChannel: function onDeleteChannel() {\n      channel.delete(function (response, error) {\n        if (error) {\n          logger.warning('OpenChannelSettings: Delete channel failed', error);\n          return;\n        }\n\n        logger.info('OpenChannelSettings: Delete channel success', response);\n\n        if (_onDeleteChannel) {\n          _onDeleteChannel(channel);\n        }\n      });\n    }\n  })) : /*#__PURE__*/React__default.createElement(ParticipantsList, {\n    currentUser: currentUser,\n    channel: channel,\n    onCloseClick: function onCloseClick() {\n      _onCloseClick();\n    }\n  }));\n}\n\nvar ChannelSettingsWithSendbird = withSendbirdContext(OpenChannelSettings, function (store) {\n  var logger = store && store.config && store.config.logger;\n  var theme = store && store.config && store.config.theme || 'light';\n  var isOnline = store && store.config && store.config.isOnline;\n  var user = store && store.stores && store.stores.userStore && store.stores.userStore.user;\n  return {\n    sdk: selectors.getSdk(store),\n    logger: logger,\n    theme: theme,\n    isOnline: isOnline,\n    user: user\n  };\n});\nexport { ChannelSettingsWithSendbird as default };","map":null,"metadata":{},"sourceType":"module"}