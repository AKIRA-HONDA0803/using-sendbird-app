{"ast":null,"code":"import { b as _slicedToArray, c as LocalizationContext, d as __spreadArray, _ as __assign, w as withSendbirdContext, u as uuidv4, e as _toConsumableArray } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useRef, useState, useContext, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { M as Modal, T as Type, a as TextButton, C as ContextMenu, I as IconButton, b as MenuItems, c as MenuItem, B as Button, d as ButtonTypes, e as ButtonSizes, U as UserProfileContext, f as ConnectedUserProfile, g as getSdk, h as UserProfileProvider } from './index-cb0d7936.js';\nimport { I as InviteMembers$1, B as Badge, c as createDefaultUserListQuery, L as LeaveChannel } from './LeaveChannel-42fd86b9.js';\nimport { A as Avatar, L as Label, a as LabelTypography, b as LabelColors, I as Icon, c as IconTypes, d as IconColors, P as PlaceHolder, f as PlaceHolderTypes } from './index-fe1a6d27.js';\nimport { I as InputLabel, a as Input, n as noop, U as UserListItem$2, M as MutedAvatarOverlay } from './index-1fe82074.js';\nimport { C as ChannelAvatar } from './index-db1485c0.js';\nimport { A as AccordionGroup, a as Accordion } from './index-d85ca28f.js';\nimport 'react-dom';\nimport './utils-7b22e0fc.js';\n\nvar EditDetails = function EditDetails(props) {\n  var _onSubmit = props.onSubmit,\n      onCancel = props.onCancel,\n      channel = props.channel,\n      userId = props.userId,\n      theme = props.theme;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentImg = _useState2[0],\n      setCurrentImg = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newFile = _useState4[0],\n      setNewFile = _useState4[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var title = channel.name;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (title !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(newFile, inputRef.current.value);\n\n      onCancel();\n    },\n    type: Type.PRIMARY\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? /*#__PURE__*/React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), /*#__PURE__*/React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\n\nEditDetails.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  channel: PropTypes.shape({\n    name: PropTypes.string\n  }).isRequired,\n  userId: PropTypes.string.isRequired,\n  theme: PropTypes.string.isRequired\n};\n\nvar ChannelProfile = function ChannelProfile(props) {\n  var disabled = props.disabled,\n      channel = props.channel,\n      userId = props.userId,\n      theme = props.theme,\n      onChannelInfoChange = props.onChannelInfoChange;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var getChannelName = function getChannelName() {\n    if (channel && channel.name && channel.name !== 'Group Channel') {\n      return channel.name;\n    }\n\n    if (channel && (channel.name === 'Group Channel' || !channel.name)) {\n      return channel.members.map(function (member) {\n        return member.nickname || stringSet.NO_NAME;\n      }).join(', ');\n    }\n\n    return stringSet.NO_TITLE;\n  };\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-profile\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-profile--inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-profile__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme,\n    width: 80,\n    height: 80\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-profile__title\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, getChannelName()), /*#__PURE__*/React__default.createElement(TextButton, {\n    disabled: disabled,\n    className: \"sendbird-channel-profile__edit\",\n    onClick: function onClick() {\n      if (disabled) {\n        return;\n      }\n\n      setShowModal(true);\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY\n  }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)), showModal && /*#__PURE__*/React__default.createElement(EditDetails, {\n    onCancel: function onCancel() {\n      return setShowModal(false);\n    },\n    onSubmit: onChannelInfoChange,\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })));\n};\n\nChannelProfile.propTypes = {\n  channel: PropTypes.shape({\n    name: PropTypes.string,\n    members: PropTypes.arrayOf(PropTypes.shape({\n      nickname: PropTypes.string\n    }))\n  }).isRequired,\n  userId: PropTypes.string.isRequired,\n  theme: PropTypes.string,\n  disabled: PropTypes.bool,\n  onChannelInfoChange: PropTypes.func\n};\nChannelProfile.defaultProps = {\n  theme: 'light',\n  disabled: false,\n  onChannelInfoChange: function onChannelInfoChange() {}\n};\n\nfunction MembersModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel,\n      currentUser = _a.currentUser;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState(null),\n      memberQuery = _c[0],\n      setMemberQuery = _c[1];\n\n  useEffect(function () {\n    var memberListQuery = channel.createMemberListQuery();\n    memberListQuery.limit = 20;\n    memberListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n    });\n    setMemberQuery(memberListQuery);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: \"All Members\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = memberQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        memberQuery.next(function (o, error) {\n          if (error) {\n            return;\n          }\n\n          setMembers(__spreadArray(__spreadArray([], members, true), o, true));\n        });\n      }\n    }\n  }, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$2, {\n      user: member,\n      key: member.userId,\n      currentUser: currentUser,\n      action: function action(_a) {\n        var parentRef = _a.parentRef,\n            actionRef = _a.actionRef;\n        return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, channel.myRole === 'operator' && /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n              ,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                if (member.role !== 'operator') {\n                  channel.addOperators([member.userId], function () {\n                    setMembers(members.map(function (m) {\n                      if (m.userId === member.userId) {\n                        return __assign(__assign({}, member), {\n                          role: 'operator'\n                        });\n                      }\n\n                      return m;\n                    }));\n                    closeDropdown();\n                  });\n                } else {\n                  channel.removeOperators([member.userId], function () {\n                    setMembers(members.map(function (m) {\n                      if (m.userId === member.userId) {\n                        return __assign(__assign({}, member), {\n                          role: ''\n                        });\n                      }\n\n                      return m;\n                    }));\n                    closeDropdown();\n                  });\n                }\n              }\n            }, member.role !== 'operator' ? 'Promote to operator' : 'Demote operator'), // No muted members in broadcast channel\n            !channel.isBroadcast && /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                if (member.isMuted) {\n                  channel.unmuteUser(member, function () {\n                    setMembers(members.map(function (m) {\n                      if (m.userId === member.userId) {\n                        return __assign(__assign({}, member), {\n                          isMuted: false\n                        });\n                      }\n\n                      return m;\n                    }));\n                    closeDropdown();\n                  });\n                } else {\n                  channel.muteUser(member, function () {\n                    setMembers(members.map(function (m) {\n                      if (m.userId === member.userId) {\n                        return __assign(__assign({}, member), {\n                          isMuted: true\n                        });\n                      }\n\n                      return m;\n                    }));\n                    closeDropdown();\n                  });\n                }\n              }\n            }, member.isMuted ? 'Unmute' : 'Mute'), /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.banUser(member, -1, '', function () {\n                  setMembers(members.filter(function (_a) {\n                    var userId = _a.userId;\n                    return userId !== member.userId;\n                  }));\n                });\n              }\n            }, \"Ban\"));\n          }\n        }));\n      }\n    });\n  }))));\n}\n\nvar SHOWN_MEMBER_MAX = 10;\n\nvar UserListItem$1 = function UserListItem(_ref) {\n  var _ref$member = _ref.member,\n      member = _ref$member === void 0 ? {} : _ref$member,\n      _ref$currentUser = _ref.currentUser,\n      currentUser = _ref$currentUser === void 0 ? '' : _ref$currentUser;\n  var avatarRef = useRef(null);\n\n  var _useContext = useContext(UserProfileContext),\n      disableUserProfile = _useContext.disableUserProfile,\n      renderUserProfile = _useContext.renderUserProfile;\n\n  var _useContext2 = useContext(LocalizationContext),\n      stringSet = _useContext2.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-members-accordion__member\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-members-accordion__member-avatar\"\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        },\n        ref: avatarRef,\n        src: member.profileUrl,\n        width: 24,\n        height: 24\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef // for catching location(x, y) of MenuItems\n        ,\n        parentContainRef: avatarRef // for toggling more options(menus & reactions)\n        ,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: member,\n        currentUserId: currentUser,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: member,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, member.nickname || stringSet.NO_NAME, currentUser === member.userId && stringSet.CHANNEL_SETTING__MEMBERS__YOU));\n};\n\nUserListItem$1.propTypes = {\n  member: PropTypes.shape({\n    userId: PropTypes.string,\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string\n  }).isRequired,\n  currentUser: PropTypes.string.isRequired\n};\n\nvar MembersAccordion = function MembersAccordion(_ref2) {\n  var channel = _ref2.channel,\n      disabled = _ref2.disabled,\n      currentUser = _ref2.currentUser,\n      userQueryCreator = _ref2.userQueryCreator,\n      onInviteMembers = _ref2.onInviteMembers,\n      swapParams = _ref2.swapParams;\n  var members = channel.members || [];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showMoreModal = _useState2[0],\n      setShowMoreModal = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showAddUserModal = _useState4[0],\n      setShowAddUserModal = _useState4[1];\n\n  var _useContext3 = useContext(LocalizationContext),\n      stringSet = _useContext3.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-members-accordion\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-members-accordion__list\"\n  }, members.slice(0, SHOWN_MEMBER_MAX).map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$1, {\n      member: member,\n      currentUser: currentUser,\n      key: member.userId\n    });\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-members-accordion__footer\"\n  }, members.length >= SHOWN_MEMBER_MAX && /*#__PURE__*/React__default.createElement(Button, {\n    className: \"sendbird-members-accordion__footer__all-members\",\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function onClick() {\n      return setShowMoreModal(true);\n    }\n  }, stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS), members.length >= SHOWN_MEMBER_MAX && showMoreModal && /*#__PURE__*/React__default.createElement(MembersModal, {\n    currentUser: currentUser,\n    hideModal: function hideModal() {\n      setShowMoreModal(false);\n    },\n    channel: channel\n  }), /*#__PURE__*/React__default.createElement(Button, {\n    className: \"sendbird-members-accordion__footer__invite-users\",\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    disabled: disabled,\n    onClick: function onClick() {\n      if (disabled) {\n        return;\n      }\n\n      setShowAddUserModal(true);\n    }\n  }, stringSet.CHANNEL_SETTING__MEMBERS__INVITE_MEMBER), showAddUserModal && /*#__PURE__*/React__default.createElement(InviteMembers$1, {\n    swapParams: swapParams,\n    titleText: stringSet.MODAL__INVITE_MEMBER__TITLE,\n    submitText: stringSet.BUTTON__INVITE,\n    closeModal: function closeModal() {\n      return setShowAddUserModal(false);\n    },\n    idsToFilter: members.map(function (member) {\n      return member.userId;\n    }),\n    userQueryCreator: userQueryCreator,\n    onSubmit: onInviteMembers\n  })));\n};\n\nMembersAccordion.propTypes = {\n  swapParams: PropTypes.bool,\n  disabled: PropTypes.bool,\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({}))\n  }),\n  currentUser: PropTypes.string,\n  userQueryCreator: PropTypes.func.isRequired,\n  onInviteMembers: PropTypes.func.isRequired\n};\nMembersAccordion.defaultProps = {\n  swapParams: false,\n  currentUser: '',\n  disabled: false,\n  channel: {}\n}; // might move to reusable/UI\n\nvar COMPONENT_NAME = 'sendbird-user-list-item--small';\n\nvar UserListItem = function UserListItem(_a) {\n  var user = _a.user,\n      className = _a.className,\n      currentUser = _a.currentUser,\n      action = _a.action;\n  var actionRef = useRef(null);\n  var parentRef = useRef(null);\n  var avatarRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useContext(UserProfileContext),\n      disableUserProfile = _b.disableUserProfile,\n      renderUserProfile = _b.renderUserProfile;\n\n  var injectingClassNames = Array.isArray(className) ? className : [className];\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: parentRef,\n    className: __spreadArray([COMPONENT_NAME], injectingClassNames, true).join(' ')\n  }, user.isMuted && /*#__PURE__*/React__default.createElement(MutedAvatarOverlay, null), /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        },\n        ref: avatarRef,\n        className: COMPONENT_NAME + \"__avatar\",\n        src: user.profileUrl,\n        width: 24,\n        height: 24\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef // for catching location(x, y) of MenuItems\n        ,\n        parentContainRef: avatarRef // for toggling more options(menus & reactions)\n        ,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: user,\n        currentUserId: currentUser,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: user,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: COMPONENT_NAME + \"__title\",\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME, currentUser === user.userId && \" (You)\"), // if there is now nickname, display userId\n  !user.nickname && /*#__PURE__*/React__default.createElement(Label, {\n    className: COMPONENT_NAME + \"__subtitle\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId), user.role === 'operator' && /*#__PURE__*/React__default.createElement(Label, {\n    className: COMPONENT_NAME + \"__operator\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, \"Operator\"), action && /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: actionRef,\n    className: COMPONENT_NAME + \"__action\"\n  }, action({\n    actionRef: actionRef,\n    parentRef: parentRef\n  })));\n};\n\nfunction OperatorsModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel,\n      currentUser = _a.currentUser;\n\n  var _b = useState([]),\n      operators = _b[0],\n      setOperators = _b[1];\n\n  var _c = useState(null),\n      operatorQuery = _c[0],\n      setOperatorQuery = _c[1];\n\n  useEffect(function () {\n    var operatorListQuery = channel.createOperatorListQuery();\n    operatorListQuery.limit = 20;\n    operatorListQuery.next(function (operators, error) {\n      if (error) {\n        return;\n      }\n\n      setOperators(operators);\n    });\n    setOperatorQuery(operatorListQuery);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: \"All operators\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = operatorQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        operatorQuery.next(function (o, error) {\n          if (error) {\n            return;\n          }\n\n          setOperators(__spreadArray(__spreadArray([], operators, true), o, true));\n        });\n      }\n    }\n  }, operators.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$2, {\n      currentUser: currentUser,\n      user: member,\n      key: member.userId,\n      action: function action(_a) {\n        var parentRef = _a.parentRef,\n            actionRef = _a.actionRef;\n        return /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n              ,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.removeOperators([member.userId], function (response, error) {\n                  if (error) {\n                    return;\n                  }\n\n                  setOperators(operators.filter(function (_a) {\n                    var userId = _a.userId;\n                    return userId !== member.userId;\n                  }));\n                });\n                closeDropdown();\n              }\n            }, \"Dismiss operator\"));\n          }\n        });\n      }\n    });\n  }))));\n}\n\nfunction AddOperatorsModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel,\n      _onSubmit = _a.onSubmit;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState({}),\n      selectedMembers = _c[0],\n      setSelectedMembers = _c[1];\n\n  var _d = useState(null),\n      memberQuery = _d[0],\n      setMemberQuery = _d[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    var memberListQuery = channel.createMemberListQuery();\n    memberListQuery.limit = 20;\n    memberListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n    });\n    setMemberQuery(memberListQuery);\n  }, []);\n  var selectedCount = Object.keys(selectedMembers).filter(function (m) {\n    return selectedMembers[m];\n  }).length;\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    type: Type.PRIMARY,\n    submitText: \"Add\",\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: function onSubmit() {\n      var members = Object.keys(selectedMembers).filter(function (m) {\n        return selectedMembers[m];\n      });\n\n      _onSubmit(members);\n    },\n    titleText: \"Select members\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3,\n    type: LabelTypography.CAPTION_1\n  }, selectedCount + \" \" + stringSet.MODAL__INVITE_MEMBER__SELECTEC), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = memberQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        memberQuery.next(function (o, error) {\n          if (error) {\n            return;\n          }\n\n          setMembers(__spreadArray(__spreadArray([], members, true), o, true));\n        });\n      }\n    }\n  }, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$2, {\n      checkBox: true,\n      checked: selectedMembers[member.userId],\n      onChange: function onChange(event) {\n        var _a;\n\n        var modifiedSelectedMembers = __assign(__assign({}, selectedMembers), (_a = {}, _a[event.target.id] = event.target.checked, _a));\n\n        if (!event.target.checked) {\n          delete modifiedSelectedMembers[event.target.id];\n        }\n\n        setSelectedMembers(modifiedSelectedMembers);\n      },\n      user: member,\n      key: member.userId\n    });\n  }))));\n}\n\nvar OperatorList = function OperatorList(_a) {\n  var sdk = _a.sdk,\n      channel = _a.channel;\n\n  var _b = useState([]),\n      operators = _b[0],\n      setOperators = _b[1];\n\n  var _c = useState(false),\n      showMore = _c[0],\n      setShowMore = _c[1];\n\n  var _d = useState(false),\n      showAdd = _d[0],\n      setShowAdd = _d[1];\n\n  var _e = useState(false),\n      hasNext = _e[0],\n      setHasNext = _e[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channel) {\n      setOperators([]);\n      return;\n    }\n\n    var operatorListQuery = channel.createOperatorListQuery();\n    operatorListQuery.limit = 10;\n    operatorListQuery.next(function (operators, error) {\n      if (error) {\n        return;\n      }\n\n      setOperators(operators);\n      setHasNext(operatorListQuery.hasNext);\n    });\n  }, [channel]);\n  var refershList = useCallback(function () {\n    if (!channel) {\n      setOperators([]);\n      return;\n    }\n\n    var operatorListQuery = channel.createOperatorListQuery();\n    operatorListQuery.limit = 10;\n    operatorListQuery.next(function (operators, error) {\n      if (error) {\n        return;\n      }\n\n      setOperators(operators);\n      setHasNext(operatorListQuery.hasNext);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, operators.map(function (operator) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      key: operator.userId,\n      user: operator,\n      currentUser: sdk.currentUser.userId,\n      action: function action(_a) {\n        var actionRef = _a.actionRef,\n            parentRef = _a.parentRef;\n        return /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n              ,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.removeOperators([operator.userId], function (response, error) {\n                  if (error) {\n                    return;\n                  }\n\n                  setOperators(operators.filter(function (_a) {\n                    var userId = _a.userId;\n                    return userId !== operator.userId;\n                  }));\n                });\n                closeDropdown();\n              }\n            }, \"Dismiss operator\"));\n          }\n        });\n      }\n    });\n  }), hasNext && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-accordion__footer\"\n  }, /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function onClick() {\n      setShowMore(true);\n    }\n  }, stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ALL), /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function onClick() {\n      setShowAdd(true);\n    }\n  }, stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ADD)), showMore && /*#__PURE__*/React__default.createElement(OperatorsModal, {\n    currentUser: sdk.currentUser.userId,\n    hideModal: function hideModal() {\n      setShowMore(false);\n      refershList();\n    },\n    channel: channel\n  }), showAdd && /*#__PURE__*/React__default.createElement(AddOperatorsModal, {\n    hideModal: function hideModal() {\n      return setShowAdd(false);\n    },\n    channel: channel,\n    onSubmit: function onSubmit(members) {\n      setShowAdd(false);\n      channel.addOperators(members, function () {\n        refershList();\n      });\n    }\n  }));\n};\n\nvar mapStoreToProps$3 = function mapStoreToProps(store) {\n  return {\n    sdk: getSdk(store)\n  };\n};\n\nvar OperatorList$1 = withSendbirdContext(OperatorList, mapStoreToProps$3);\n\nfunction InviteMembers(_a) {\n  var hideModal = _a.hideModal,\n      userQueryCreator = _a.userQueryCreator,\n      _onSubmit = _a.onSubmit;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState({}),\n      selectedMembers = _c[0],\n      setSelectedMembers = _c[1];\n\n  var _d = useState(null),\n      userQuery = _d[0],\n      setUserQuery = _d[1];\n\n  useEffect(function () {\n    var userListQuery = userQueryCreator();\n    userListQuery.limit = 20;\n    userListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n    });\n    setUserQuery(userListQuery);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    disabled: Object.keys(selectedMembers).length === 0,\n    submitText: \"Invite\",\n    type: Type.PRIMARY,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: function onSubmit() {\n      var members = Object.keys(selectedMembers).filter(function (m) {\n        return selectedMembers[m];\n      });\n\n      _onSubmit(members);\n    },\n    titleText: \"Select members\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = userQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        userQuery.next(function (o, error) {\n          if (error) {\n            return;\n          }\n\n          setMembers(__spreadArray(__spreadArray([], members, true), o, true));\n        });\n      }\n    }\n  }, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$2, {\n      checkBox: true,\n      checked: selectedMembers[member.userId],\n      onChange: function onChange(event) {\n        var _a;\n\n        var modifiedSelectedMembers = __assign(__assign({}, selectedMembers), (_a = {}, _a[event.target.id] = event.target.checked, _a));\n\n        if (!event.target.checked) {\n          delete modifiedSelectedMembers[event.target.id];\n        }\n\n        setSelectedMembers(modifiedSelectedMembers);\n      },\n      user: member,\n      key: member.userId\n    });\n  }))));\n}\n\nvar MemberList = function MemberList(_a) {\n  var sdk = _a.sdk,\n      channel = _a.channel,\n      userQueryCreator = _a.userQueryCreator,\n      userId = _a.userId;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState(false),\n      hasNext = _c[0],\n      setHasNext = _c[1];\n\n  var _d = useState(false),\n      showAllMembers = _d[0],\n      setShowAllMembers = _d[1];\n\n  var _e = useState(false),\n      showInviteMembers = _e[0],\n      setShowInviteMembers = _e[1];\n\n  useEffect(function () {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n\n    var memberUserListQuery = channel.createMemberListQuery();\n    memberUserListQuery.limit = 10;\n    memberUserListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n    });\n  }, [channel]);\n  var refershList = useCallback(function () {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n\n    var memberUserListQuery = channel.createMemberListQuery();\n    memberUserListQuery.limit = 10;\n    memberUserListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      key: member.userId,\n      user: member,\n      currentUser: sdk.currentUser.userId,\n      action: userId !== member.userId ? function (_a) {\n        var actionRef = _a.actionRef,\n            parentRef = _a.parentRef;\n        return /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n              ,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                if (member.role !== 'operator') {\n                  channel.addOperators([member.userId], function () {\n                    refershList();\n                    closeDropdown();\n                  });\n                } else {\n                  channel.removeOperators([member.userId], function () {\n                    refershList();\n                    closeDropdown();\n                  });\n                }\n              }\n            }, member.role !== 'operator' ? 'Promote to operator' : 'Demote operator'), // No muted members in broadcast channel\n            !channel.isBroadcast && /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                if (member.isMuted) {\n                  channel.unmuteUser(member, function () {\n                    refershList();\n                    closeDropdown();\n                  });\n                } else {\n                  channel.muteUser(member, function () {\n                    refershList();\n                    closeDropdown();\n                  });\n                }\n              }\n            }, member.isMuted ? 'Unmute' : 'Mute'), /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.banUser(member, -1, '', function () {\n                  refershList();\n                  closeDropdown();\n                });\n              }\n            }, \"Ban\"));\n          }\n        });\n      } : null\n    });\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-accordion__footer\"\n  }, hasNext && /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function onClick() {\n      return setShowAllMembers(true);\n    }\n  }, \"All members\"), /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function onClick() {\n      return setShowInviteMembers(true);\n    }\n  }, \"Invite members\")), showAllMembers && /*#__PURE__*/React__default.createElement(MembersModal, {\n    currentUser: sdk.currentUser.userId,\n    channel: channel,\n    hideModal: function hideModal() {\n      setShowAllMembers(false);\n      refershList();\n    }\n  }), showInviteMembers && /*#__PURE__*/React__default.createElement(InviteMembers, {\n    userQueryCreator: userQueryCreator,\n    onSubmit: function onSubmit(selectedMembers) {\n      channel.inviteWithUserIds(selectedMembers, function () {\n        setShowInviteMembers(false);\n        refershList();\n      });\n    },\n    channel: channel,\n    hideModal: function hideModal() {\n      return setShowInviteMembers(false);\n    }\n  }));\n};\n\nvar mapStoreToProps$2 = function mapStoreToProps(store) {\n  return {\n    sdk: getSdk(store)\n  };\n};\n\nvar MemberList$1 = withSendbirdContext(MemberList, mapStoreToProps$2);\n\nfunction BannedMembersModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState(null),\n      memberQuery = _c[0],\n      setMemberQuery = _c[1];\n\n  useEffect(function () {\n    var bannedUserListQuery = channel.createBannedUserListQuery();\n    bannedUserListQuery.next(function (users, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(users);\n    });\n    setMemberQuery(bannedUserListQuery);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: \"Muted members\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = memberQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        memberQuery.next(function (o, error) {\n          if (error) {\n            return;\n          }\n\n          setMembers(__spreadArray(__spreadArray([], members, true), o, true));\n        });\n      }\n    }\n  }, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$2, {\n      user: member,\n      key: member.userId,\n      action: function action(_a) {\n        var parentRef = _a.parentRef,\n            actionRef = _a.actionRef;\n        return /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n              ,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.unbanUser(member, function () {\n                  closeDropdown();\n                  setMembers(members.filter(function (m) {\n                    return m.userId !== member.userId;\n                  }));\n                });\n              }\n            }, \"Unban\"));\n          }\n        });\n      }\n    });\n  }))));\n}\n\nvar BannedMemberList = function BannedMemberList(_a) {\n  var channel = _a.channel;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState(false),\n      hasNext = _c[0],\n      setHasNext = _c[1];\n\n  var _d = useState(false),\n      showModal = _d[0],\n      setShowModal = _d[1];\n\n  useEffect(function () {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n\n    var bannedUserListQuery = channel.createBannedUserListQuery();\n    bannedUserListQuery.next(function (users, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(users);\n      setHasNext(bannedUserListQuery.hasNext);\n    });\n  }, [channel]);\n  var refreshList = useCallback(function () {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n\n    var bannedUserListQuery = channel.createBannedUserListQuery();\n    bannedUserListQuery.next(function (users, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(users);\n      setHasNext(bannedUserListQuery.hasNext);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      key: member.userId,\n      user: member,\n      action: function action(_a) {\n        var actionRef = _a.actionRef,\n            parentRef = _a.parentRef;\n        return /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n              ,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.unbanUser(member, function () {\n                  closeDropdown();\n                  refreshList();\n                });\n              }\n            }, \"Unban\"));\n          }\n        });\n      }\n    });\n  }), members && members.length === 0 && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, \"No banned members yet\"), hasNext && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-accordion__footer\"\n  }, /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function onClick() {\n      setShowModal(true);\n    }\n  }, \"All banned members\")), showModal && /*#__PURE__*/React__default.createElement(BannedMembersModal, {\n    channel: channel,\n    hideModal: function hideModal() {\n      setShowModal(false);\n      refreshList();\n    }\n  }));\n};\n\nvar mapStoreToProps$1 = function mapStoreToProps(store) {\n  return {\n    sdk: getSdk(store)\n  };\n};\n\nvar BannedMemberList$1 = withSendbirdContext(BannedMemberList, mapStoreToProps$1);\n\nfunction MutedMembersModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel,\n      currentUser = _a.currentUser;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState(null),\n      memberQuery = _c[0],\n      setMemberQuery = _c[1];\n\n  useEffect(function () {\n    var memberUserListQuery = channel.createMemberListQuery();\n    memberUserListQuery.limit = 10;\n    memberUserListQuery.mutedMemberFilter = 'muted';\n    memberUserListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n    });\n    setMemberQuery(memberUserListQuery);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: \"Muted members\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = memberQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        memberQuery.next(function (o, error) {\n          if (error) {\n            return;\n          }\n\n          setMembers(__spreadArray(__spreadArray([], members, true), o, true));\n        });\n      }\n    }\n  }, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$2, {\n      currentUser: currentUser,\n      user: member,\n      key: member.userId,\n      action: function action(_a) {\n        var actionRef = _a.actionRef,\n            parentRef = _a.parentRef;\n        return /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n              ,\n              closeDropdown: closeDropdown,\n              openLeft: true\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.unmuteUser(member, function () {\n                  closeDropdown();\n                  setMembers(members.filter(function (m) {\n                    return m.userId !== member.userId;\n                  }));\n                });\n              }\n            }, \"Unmute\"));\n          }\n        });\n      }\n    });\n  }))));\n}\n\nvar MutedMemberList = function MutedMemberList(_a) {\n  var sdk = _a.sdk,\n      channel = _a.channel;\n\n  var _b = useState([]),\n      members = _b[0],\n      setMembers = _b[1];\n\n  var _c = useState(false),\n      hasNext = _c[0],\n      setHasNext = _c[1];\n\n  var _d = useState(false),\n      showModal = _d[0],\n      setShowModal = _d[1];\n\n  useEffect(function () {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n\n    var memberUserListQuery = channel.createMemberListQuery();\n    memberUserListQuery.limit = 10;\n    memberUserListQuery.mutedMemberFilter = 'muted';\n    memberUserListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n    });\n  }, [channel]);\n  var refreshList = useCallback(function () {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n\n    var memberUserListQuery = channel.createMemberListQuery();\n    memberUserListQuery.limit = 10;\n    memberUserListQuery.mutedMemberFilter = 'muted';\n    memberUserListQuery.next(function (members, error) {\n      if (error) {\n        return;\n      }\n\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, members.map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      key: member.userId,\n      user: member,\n      currentUser: sdk.currentUser.userId,\n      action: function action(_a) {\n        var actionRef = _a.actionRef,\n            parentRef = _a.parentRef;\n        return /*#__PURE__*/React__default.createElement(ContextMenu, {\n          menuTrigger: function menuTrigger(toggleDropdown) {\n            return /*#__PURE__*/React__default.createElement(IconButton, {\n              className: \"sendbird-user-message__more__menu\",\n              width: \"32px\",\n              height: \"32px\",\n              onClick: toggleDropdown\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              width: \"24px\",\n              height: \"24px\",\n              type: IconTypes.MORE,\n              fillColor: IconColors.CONTENT_INVERSE\n            }));\n          },\n          menuItems: function menuItems(closeDropdown) {\n            return /*#__PURE__*/React__default.createElement(MenuItems, {\n              closeDropdown: closeDropdown,\n              openLeft: true,\n              parentContainRef: parentRef,\n              parentRef: actionRef // for catching location(x, y) of MenuItems\n\n            }, /*#__PURE__*/React__default.createElement(MenuItem, {\n              onClick: function onClick() {\n                channel.unmuteUser(member, function () {\n                  refreshList();\n                  closeDropdown();\n                });\n              }\n            }, \"Unmute\"));\n          }\n        });\n      }\n    });\n  }), members && members.length === 0 && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, \"No muted members yet\"), hasNext && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-accordion__footer\"\n  }, /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: function onClick() {\n      setShowModal(true);\n    }\n  }, \"All muted members\")), showModal && /*#__PURE__*/React__default.createElement(MutedMembersModal, {\n    currentUser: sdk.currentUser.userId,\n    channel: channel,\n    hideModal: function hideModal() {\n      setShowModal(false);\n      refreshList();\n    }\n  }));\n};\n\nvar mapStoreToProps = function mapStoreToProps(store) {\n  return {\n    sdk: getSdk(store)\n  };\n};\n\nvar MutedMemberList$1 = withSendbirdContext(MutedMemberList, mapStoreToProps);\n\nvar kFormatter$1 = function kFormatter(num) {\n  return Math.abs(num) > 999 ? (Math.abs(num) / 1000).toFixed(1) + \"K\" : num;\n};\n\nfunction AdminPannel(_a) {\n  var userQueryCreator = _a.userQueryCreator,\n      channel = _a.channel,\n      userId = _a.userId;\n\n  var _b = useState(false),\n      frozen = _b[0],\n      setFrozen = _b[1]; // work around for\n  // https://sendbird.slack.com/archives/G01290GCDCN/p1595922832000900\n  // SDK bug - after frozen/unfrozen myRole becomes \"none\"\n\n\n  useEffect(function () {\n    setFrozen(channel.isFrozen);\n  }, [channel]);\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(AccordionGroup, {\n    className: \"sendbird-channel-settings__operator\"\n  }, /*#__PURE__*/React__default.createElement(Accordion, {\n    className: \"sendbird-channel-settings__operators-list\",\n    id: \"operators\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.OPERATOR,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-channel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.CHANNEL_SETTING__OPERATORS__TITLE));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(OperatorList$1, {\n        channel: channel\n      }));\n    }\n  }), /*#__PURE__*/React__default.createElement(Accordion, {\n    className: \"sendbird-channel-settings__members-list\",\n    id: \"members\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MEMBERS,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-channel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.CHANNEL_SETTING__MEMBERS__TITLE), /*#__PURE__*/React__default.createElement(Badge, {\n        count: kFormatter$1(channel.memberCount)\n      }));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(MemberList$1, {\n        userQueryCreator: userQueryCreator,\n        channel: channel,\n        userId: userId\n      }));\n    }\n  }), // No muted members in broadcast channel\n  !channel.isBroadcast && /*#__PURE__*/React__default.createElement(Accordion, {\n    id: \"mutedMembers\",\n    className: \"sendbird-channel-settings__muted-members-list\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MUTE,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-channel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.CHANNEL_SETTING__MUTED_MEMBERS__TITLE));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(MutedMemberList$1, {\n        channel: channel\n      }));\n    }\n  }), /*#__PURE__*/React__default.createElement(Accordion, {\n    className: \"sendbird-channel-settings__banned-members-list\",\n    id: \"bannedMembers\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.BAN,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-channel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.CHANNEL_SETTING__BANNED_MEMBERS__TITLE));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(BannedMemberList$1, {\n        channel: channel\n      }));\n    }\n  }), // cannot frozen broadcast channel\n  !channel.isBroadcast && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__freeze\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    width: 24,\n    height: 24,\n    className: \"sendbird-channel-settings__accordion-icon\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__FREEZE_CHANNEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__frozen-icon\"\n  }, frozen ? /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      channel.unfreeze(function () {\n        setFrozen(false);\n      });\n    },\n    type: IconTypes.TOGGLE_ON,\n    fillColor: IconColors.PRIMARY,\n    width: 44,\n    height: 24\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      channel.freeze(function () {\n        setFrozen(true);\n      });\n    },\n    type: IconTypes.TOGGLE_OFF,\n    fillColor: IconColors.PRIMARY,\n    width: 44,\n    height: 24\n  }))));\n}\n\nvar COMPONENT_CLASS_NAME = 'sendbird-channel-settings';\n\nvar kFormatter = function kFormatter(num) {\n  return Math.abs(num) > 999 ? \"\".concat((Math.abs(num) / 1000).toFixed(1), \"K\") : num;\n};\n\nfunction ChannelSettings(props) {\n  var className = props.className,\n      onCloseClick = props.onCloseClick,\n      channelUrl = props.channelUrl,\n      disableUserProfile = props.disableUserProfile,\n      renderUserProfile = props.renderUserProfile,\n      _onChannelModified = props.onChannelModified,\n      renderChannelProfile = props.renderChannelProfile,\n      onBeforeUpdateChannel = props.onBeforeUpdateChannel;\n  var sdkStore = props.stores.sdkStore,\n      _props$config = props.config,\n      userListQuery = _props$config.userListQuery,\n      theme = _props$config.theme,\n      userId = _props$config.userId,\n      logger = _props$config.logger,\n      isOnline = _props$config.isOnline,\n      _props$queries = props.queries,\n      queries = _props$queries === void 0 ? {} : _props$queries;\n  var _props$config2 = props.config,\n      config = _props$config2 === void 0 ? {} : _props$config2;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var sdk = sdkStore.sdk,\n      initialized = sdkStore.initialized; // hack to kepp track of channel updates by triggering useEffect\n\n  var _useState = useState(uuidv4()),\n      _useState2 = _slicedToArray(_useState, 2),\n      channelUpdateId = _useState2[0],\n      setChannelUpdateId = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      channel = _useState4[0],\n      setChannel = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      invalidChannel = _useState6[0],\n      setInvalidChannel = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showAccordion = _useState8[0],\n      setShowAccordion = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showLeaveChannelModal = _useState10[0],\n      setShowLeaveChannelModal = _useState10[1];\n\n  var componentClassNames = (Array.isArray(className) ? [COMPONENT_CLASS_NAME].concat(_toConsumableArray(className)) : [COMPONENT_CLASS_NAME, className]).join(' ');\n  useEffect(function () {\n    logger.info('ChannelSettings: Setting up');\n\n    if (!channelUrl || !initialized || !sdk) {\n      logger.warning('ChannelSettings: Setting up failed', 'No channelUrl or sdk uninitialized');\n      setInvalidChannel(false);\n    } else {\n      if (!sdk || !sdk.GroupChannel) {\n        logger.warning('ChannelSettings: No GroupChannel');\n        return;\n      }\n\n      sdk.GroupChannel.getChannel(channelUrl, function (groupChannel) {\n        if (!groupChannel) {\n          logger.warning('ChannelSettings: Channel not found');\n          setInvalidChannel(true);\n        } else {\n          logger.info('ChannelSettings: Fetched group channel', groupChannel);\n          setInvalidChannel(false);\n          setChannel(groupChannel);\n        }\n      });\n    }\n  }, [channelUrl, initialized, channelUpdateId]);\n\n  if (!channel || invalidChannel) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: componentClassNames\n    }, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-channel-settings__header\"\n    }, /*#__PURE__*/React__default.createElement(Label, {\n      type: LabelTypography.H_2,\n      color: LabelColors.ONBACKGROUND_1\n    }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"sendbird-channel-settings__close-icon\",\n      type: IconTypes.CLOSE,\n      height: \"24px\",\n      width: \"24px\",\n      onClick: function onClick() {\n        logger.info('ChannelSettings: Click close');\n        onCloseClick();\n      }\n    })), /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    })));\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: componentClassNames,\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__header-icon\"\n  }, /*#__PURE__*/React__default.createElement(IconButton, {\n    width: \"32px\",\n    height: \"32px\",\n    onClick: function onClick() {\n      logger.info('ChannelSettings: Click close');\n      onCloseClick();\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-channel-settings__close-icon\",\n    type: IconTypes.CLOSE,\n    height: \"22px\",\n    width: \"22px\"\n  })))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__scroll-area\"\n  }, renderChannelProfile ? renderChannelProfile({\n    channel: channel\n  }) : /*#__PURE__*/React__default.createElement(ChannelProfile, {\n    disabled: !isOnline,\n    channel: channel,\n    userId: userId,\n    theme: theme,\n    onChannelInfoChange: function onChannelInfoChange(currentImg, currentTitle) {\n      logger.info('ChannelSettings: Channel information being updated');\n      var swapParams = sdk.getErrorFirstCallback();\n\n      if (onBeforeUpdateChannel) {\n        var params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data); // swapParams\n\n        channel.updateChannel(params, function (response, error) {\n          var groupChannel = response;\n\n          if (swapParams) {\n            groupChannel = error;\n          }\n\n          _onChannelModified(groupChannel);\n\n          setChannelUpdateId(uuidv4());\n        });\n        return;\n      }\n\n      channel.updateChannel(currentTitle, currentImg, channel.data, function (response, error) {\n        var groupChannel = response;\n\n        if (swapParams) {\n          groupChannel = error;\n        }\n\n        logger.info('ChannelSettings: Channel information updated', groupChannel);\n\n        _onChannelModified(groupChannel);\n\n        setChannelUpdateId(uuidv4());\n      });\n    }\n  }), channel.myRole === 'operator' ? /*#__PURE__*/React__default.createElement(AdminPannel, {\n    channel: channel,\n    userId: userId,\n    onChannelModified: function onChannelModified(groupChannel) {\n      // setChannelUpdateId(uuidv4());\n      _onChannelModified(groupChannel);\n    },\n    userQueryCreator: function userQueryCreator() {\n      return userListQuery && typeof userListQuery === 'function' ? userListQuery() : createDefaultUserListQuery({\n        sdk: sdk,\n        userFilledApplicationUserListQuery: userFilledApplicationUserListQuery\n      });\n    }\n  }) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-settings__panel-item', 'sendbird-channel-settings__members'].join(' '),\n    role: \"switch\",\n    \"aria-checked\": showAccordion,\n    onKeyDown: function onKeyDown() {\n      return setShowAccordion(!showAccordion);\n    },\n    onClick: function onClick() {\n      return setShowAccordion(!showAccordion);\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-channel-settings__panel-icon-left\",\n    type: IconTypes.MEMBERS,\n    fillColor: IconColors.PRIMARY,\n    height: \"24px\",\n    width: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__MEMBERS__TITLE, /*#__PURE__*/React__default.createElement(Badge, {\n    count: kFormatter(channel.memberCount)\n  })), /*#__PURE__*/React__default.createElement(Icon, {\n    className: ['sendbird-channel-settings__panel-icon-right', 'sendbird-channel-settings__panel-icon--chevron', showAccordion ? 'sendbird-channel-settings__panel-icon--open' : ''].join(' '),\n    type: IconTypes.CHEVRON_RIGHT,\n    height: \"24px\",\n    width: \"24px\"\n  })), showAccordion && /*#__PURE__*/React__default.createElement(MembersAccordion, {\n    currentUser: userId,\n    disabled: !isOnline // eslint-disable-next-line\n    ,\n    userQueryCreator: function userQueryCreator() {\n      return userListQuery && typeof userListQuery === 'function' ? userListQuery() : createDefaultUserListQuery({\n        sdk: sdk,\n        userFilledApplicationUserListQuery: userFilledApplicationUserListQuery\n      });\n    },\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    channel: channel,\n    members: channel.members,\n    onInviteMembers: function onInviteMembers(selectedMembers) {\n      logger.info('ChannelSettings: Inviting new users');\n      channel.inviteWithUserIds(selectedMembers).then(function (res) {\n        _onChannelModified(res);\n\n        setChannelUpdateId(uuidv4());\n        logger.info('ChannelSettings: Inviting new users success!', res);\n      });\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-settings__panel-item', 'sendbird-channel-settings__leave-channel', !isOnline ? 'sendbird-channel-settings__panel-item__disabled' : ''].join(' '),\n    role: \"button\",\n    disabled: true,\n    onKeyDown: function onKeyDown() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowLeaveChannelModal(true);\n    },\n    onClick: function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowLeaveChannelModal(true);\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: ['sendbird-channel-settings__panel-icon-left', 'sendbird-channel-settings__panel-icon__leave'].join(' '),\n    type: IconTypes.LEAVE,\n    fillColor: IconColors.ERROR,\n    height: \"24px\",\n    width: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE)), showLeaveChannelModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    onCloseModal: function onCloseModal() {\n      return setShowLeaveChannelModal(false);\n    },\n    onLeaveChannel: function onLeaveChannel() {\n      logger.info('ChannelSettings: Leaving channel', channel);\n      channel.leave().then(function () {\n        logger.info('ChannelSettings: Leaving channel successful!', channel);\n        onCloseClick();\n      });\n    }\n  })));\n}\n\nChannelSettings.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  onCloseClick: PropTypes.func,\n  onChannelModified: PropTypes.func,\n  onBeforeUpdateChannel: PropTypes.func,\n  renderChannelProfile: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  channelUrl: PropTypes.string.isRequired,\n  queries: PropTypes.shape({\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  // from withSendbirdContext\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      sdk: PropTypes.shape({\n        getErrorFirstCallback: PropTypes.func,\n        GroupChannel: PropTypes.oneOfType([PropTypes.shape({\n          getChannel: PropTypes.func\n        }), PropTypes.func]),\n        createApplicationUserListQuery: PropTypes.any\n      }),\n      initialized: PropTypes.bool\n    })\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string,\n    theme: PropTypes.string,\n    userListQuery: PropTypes.func,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    })\n  }).isRequired\n};\nChannelSettings.defaultProps = {\n  className: '',\n  onBeforeUpdateChannel: null,\n  queries: {},\n  disableUserProfile: false,\n  renderUserProfile: null,\n  renderChannelProfile: null,\n  onCloseClick: function onCloseClick() {},\n  onChannelModified: function onChannelModified() {}\n};\nvar ChannelSettings$1 = withSendbirdContext(ChannelSettings);\nexport { ChannelSettings$1 as default };","map":null,"metadata":{},"sourceType":"module"}