{"ast":null,"code":"import React__default, { useEffect, useCallback, useContext, useState, useReducer, useRef } from 'react';\nimport { _ as __assign, d as __spreadArray, c as LocalizationContext, w as withSendbirdContext } from './LocalizationContext-dfe8b78b.js';\nimport { g as format, A as Avatar, L as Label, a as LabelTypography, b as LabelColors, c as IconTypes, I as Icon, d as IconColors, P as PlaceHolder, j as PlaceHolderTypes } from './index-fe1a6d27.js';\nimport { i as isToday, a as isYesterday } from './index-d3cbd48c.js';\nimport 'prop-types';\nimport './index-0cc16758.js';\nvar GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nvar GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nvar START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nvar START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nvar SET_QUERY_INVALID = 'SET_QUERY_INVALID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar CHANNEL_INVALID = 'CHANNEL_INVALID';\nvar RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case SET_CURRENT_CHANNEL:\n      {\n        var currentChannel = action.payload;\n        return __assign(__assign({}, state), {\n          currentChannel: currentChannel,\n          initialized: true\n        });\n      }\n\n    case CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          currentChannel: null,\n          initialized: false\n        });\n      }\n\n    case GET_SEARCHED_MESSAGES:\n      {\n        var _a = action.payload,\n            messages = _a.messages,\n            createdQuery = _a.createdQuery;\n\n        if (createdQuery && createdQuery.channelUrl === state.currentMessageSearchQuery.channelUrl && createdQuery.key === state.currentMessageSearchQuery.key) {\n          return __assign(__assign({}, state), {\n            loading: false,\n            isInvalid: false,\n            allMessages: __spreadArray([], messages, true),\n            hasMoreResult: state.currentMessageSearchQuery.hasNext\n          });\n        }\n\n        return __assign({}, state);\n      }\n\n    case SET_QUERY_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n\n    case START_MESSAGE_SEARCH:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: false,\n          loading: false\n        });\n      }\n\n    case START_GETTING_SEARCHED_MESSAGES:\n      {\n        var currentMessageSearchQuery = action.payload;\n        return __assign(__assign({}, state), {\n          loading: true,\n          currentMessageSearchQuery: currentMessageSearchQuery\n        });\n      }\n\n    case GET_NEXT_SEARCHED_MESSAGES:\n      {\n        var messages = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), messages, true),\n          hasMoreResult: state.currentMessageSearchQuery.hasNext\n        });\n      }\n\n    case RESET_SEARCH_STRING:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false\n};\n\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n      sdkInit = _a.sdkInit;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, function (groupChannel, error) {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispathcer({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        } else {\n          messageSearchDispathcer({\n            type: CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nfunction useGetSearchedMessages(_a, _b) {\n  var currentChannel = _a.currentChannel,\n      channelUrl = _a.channelUrl,\n      requestString = _a.requestString,\n      messageSearchQuery = _a.messageSearchQuery,\n      onResultLoaded = _a.onResultLoaded,\n      retryCount = _a.retryCount;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    messageSearchDispathcer({\n      type: START_MESSAGE_SEARCH,\n      payload: null\n    });\n\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        var inputSearchMessageQueryObject = __assign(__assign({}, messageSearchQuery), {\n          order: 'ts',\n          channelUrl: channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt\n        });\n\n        var createdQuery_1 = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery_1.next(function (messages, error) {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispathcer({\n              type: GET_SEARCHED_MESSAGES,\n              payload: {\n                messages: messages,\n                createdQuery: createdQuery_1\n              }\n            });\n\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispathcer({\n              type: SET_QUERY_INVALID,\n              payload: null\n            });\n\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispathcer({\n          type: START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery_1\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nfunction useScrollCallback(_a, _b) {\n  var currentMessageSearchQuery = _a.currentMessageSearchQuery,\n      hasMoreResult = _a.hasMoreResult,\n      onResultLoaded = _a.onResultLoaded;\n  var logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  return useCallback(function (cb) {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next(function (messages, error) {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispathcer({\n            type: GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages\n          });\n          cb(messages, null);\n\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nvar getCreatedAt$1 = function getCreatedAt$1(createdAt) {\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p');\n  }\n\n  if (isYesterday(createdAt)) {\n    return 'Yesterday';\n  }\n\n  return format(createdAt, 'MMM dd');\n};\n\nfunction MessageSearchItem(_a) {\n  var className = _a.className,\n      message = _a.message,\n      selected = _a.selected,\n      _onClick = _a.onClick;\n  var createdAt = message.createdAt;\n  var messageText = message.message;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n      nickname = sender.nickname;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-item', selected ? 'sendbird-message-search-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-text\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, messageText), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt$1(createdAt))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right-footer\"\n  }));\n}\n\nfunction getCreatedAt(createdAt) {\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p');\n  }\n\n  if (isYesterday(createdAt)) {\n    return 'Yesterday';\n  }\n\n  return format(createdAt, 'MMM dd');\n}\n\nfunction getIconOfFileType(message) {\n  var url = message.url;\n  var fileMessageUrl = url;\n  var fileExtension = fileMessageUrl.match(/\\.([^.]*?)(?=\\?|#|$)/)[1];\n\n  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {\n    return IconTypes.PHOTO;\n  } else if (/mp4$/i.test(fileExtension)) {\n    return IconTypes.PLAY;\n  } else if (/mp3/i.test(fileExtension)) {\n    return IconTypes.FILE_AUDIO;\n  } else if (/gif/i.test(fileExtension)) {\n    return IconTypes.GIF;\n  } else {\n    return IconTypes.FILE_DOCUMENT;\n  }\n}\n\nfunction truncate(fullText, textLimit) {\n  if (fullText.length <= textLimit) return fullText;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = textLimit - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullText.substr(0, frontChars) + separator + fullText.substr(fullText.length - backChars);\n}\n\nfunction MessageSearchFileItem(props) {\n  var className = props.className,\n      message = props.message,\n      selected = props.selected,\n      _onClick = props.onClick;\n  var createdAt = message.createdAt,\n      url = message.url,\n      name = message.name;\n  var fileMessageUrl = url;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n      nickname = sender.nickname;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-file-item', selected ? 'sendbird-message-search-file-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-file-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content__type-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: getIconOfFileType(message),\n    fillColor: IconColors.PRIMARY,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__content__url\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(name || fileMessageUrl, 28)))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt(createdAt)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right-footer\"\n  }));\n}\n\nvar DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(_a, _b) {\n  var searchString = _a.searchString;\n  var messageSearchDispathcer = _b.messageSearchDispathcer;\n\n  var _c = useState(''),\n      requestString = _c[0],\n      setRequestString = _c[1];\n\n  var _d = useState(null),\n      debouncingTimer = _d[0],\n      setDebouncingTimer = _d[1];\n\n  useEffect(function () {\n    clearTimeout(debouncingTimer);\n\n    if (searchString) {\n      setDebouncingTimer(setTimeout(function () {\n        setRequestString(searchString);\n      }, DEBOUNCING_TIME));\n    } else {\n      setRequestString('');\n      messageSearchDispathcer({\n        type: RESET_SEARCH_STRING,\n        payload: ''\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nvar COMPONENT_CLASS_NAME = 'sendbird-message-search';\n\nfunction MessageSearch(props) {\n  var // sendbird internal props\n  stores = props.stores,\n      config = props.config,\n      // message search props\n  channelUrl = props.channelUrl,\n      searchString = props.searchString,\n      messageSearchQuery = props.messageSearchQuery,\n      renderSearchItem = props.renderSearchItem,\n      onResultLoaded = props.onResultLoaded,\n      onResultClick = props.onResultClick; // hook variables\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _a = useState(0),\n      retryCount = _a[0],\n      setRetryCount = _a[1]; // this is a trigger flag for activating useGetSearchMessages\n\n\n  var _b = useState(0),\n      selectedMessageId = _b[0],\n      setSelectedMessageId = _b[1];\n\n  var _c = useReducer(reducer, initialState),\n      messageSearchStore = _c[0],\n      messageSearchDispathcer = _c[1];\n\n  var allMessages = messageSearchStore.allMessages,\n      loading = messageSearchStore.loading,\n      isInvalid = messageSearchStore.isInvalid,\n      currentChannel = messageSearchStore.currentChannel,\n      currentMessageSearchQuery = messageSearchStore.currentMessageSearchQuery,\n      hasMoreResult = messageSearchStore.hasMoreResult;\n\n  var getChannelName = function getChannelName() {\n    if (currentChannel && currentChannel.name && currentChannel.name !== 'Group Channel') {\n      return currentChannel.name;\n    }\n\n    if (currentChannel && (currentChannel.name === 'Group Channel' || !currentChannel.name)) {\n      return currentChannel.members.map(function (member) {\n        return member.nickname || stringSet.NO_NAME;\n      }).join(', ');\n    }\n\n    return stringSet.NO_TITLE;\n  }; // const\n\n\n  var sdkStore = stores.sdkStore;\n  var logger = config.logger;\n  var sdk = sdkStore.sdk;\n  var sdkInit = sdkStore.initialized;\n  var scrollRef = useRef(null);\n\n  var handleOnScroll = function handleOnScroll(e) {\n    var scrollElement = e.target;\n    var scrollTop = scrollElement.scrollTop,\n        scrollHeight = scrollElement.scrollHeight,\n        clientHeight = scrollElement.clientHeight;\n\n    if (!hasMoreResult) {\n      return;\n    }\n\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(function () {// after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var requestString = useSearchStringEffect({\n    searchString: searchString\n  }, {\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  useGetSearchedMessages({\n    currentChannel: currentChannel,\n    channelUrl: channelUrl,\n    requestString: requestString,\n    messageSearchQuery: messageSearchQuery,\n    onResultLoaded: onResultLoaded,\n    retryCount: retryCount\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var onScroll = useScrollCallback({\n    currentMessageSearchQuery: currentMessageSearchQuery,\n    hasMoreResult: hasMoreResult,\n    onResultLoaded: onResultLoaded\n  }, {\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n\n  var handleRetryToConnect = function handleRetryToConnect() {\n    setRetryCount(retryCount + 1);\n  };\n\n  if (isInvalid && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG,\n      retryToConnect: handleRetryToConnect\n    }));\n  }\n\n  if (loading && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCHING\n    }));\n  }\n\n  if (!searchString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCH_IN,\n      searchInString: getChannelName()\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME,\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, allMessages.length > 0 ? allMessages.map(function (message) {\n    if (renderSearchItem) {\n      return renderSearchItem({\n        message: message,\n        onResultClick: onResultClick\n      });\n    }\n\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(MessageSearchFileItem, {\n        className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n        message: message,\n        key: message.messageId,\n        selected: selectedMessageId === message.messageId,\n        onClick: function onClick() {\n          onResultClick(message);\n          setSelectedMessageId(message.messageId);\n        }\n      });\n    }\n\n    return /*#__PURE__*/React__default.createElement(MessageSearchItem, {\n      className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n      message: message,\n      key: message.messageId,\n      selected: selectedMessageId === message.messageId,\n      onClick: function onClick() {\n        onResultClick(message);\n        setSelectedMessageId(message.messageId);\n      }\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.NO_RESULTS\n  }));\n}\n\nvar MessageSearch$1 = withSendbirdContext(MessageSearch);\nexport { MessageSearch$1 as default };","map":null,"metadata":{},"sourceType":"module"}