{"ast":null,"code":"import { c as LocalizationContext, e as _toConsumableArray, b as _slicedToArray, a as _objectSpread2, f as _defineProperty } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './index-fe1a6d27.js';\nimport { M as Modal, T as Type } from './index-cb0d7936.js';\nimport { U as UserListItem } from './index-1fe82074.js';\n\nfunction Badge(_ref) {\n  var count = _ref.count,\n      maxLevel = _ref.maxLevel,\n      className = _ref.className;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var maximumNumber = parseInt('9'.repeat(maxLevel > 6 ? 6 : maxLevel), 10);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-badge']).join(' ')\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-badge__text\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONCONTENT_1\n  }, count > maximumNumber ? \"\".concat(maximumNumber).concat(stringSet.BADGE__OVER) : count)));\n}\n\nBadge.propTypes = {\n  count: PropTypes.number.isRequired,\n  maxLevel: PropTypes.number,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n};\nBadge.defaultProps = {\n  maxLevel: 2,\n  className: []\n};\n\nvar filterUser = function filterUser(idsToFilter) {\n  return function (currentId) {\n    return idsToFilter.includes(currentId);\n  };\n};\n\nvar InviteMembers = function InviteMembers(props) {\n  var userQueryCreator = props.userQueryCreator,\n      closeModal = props.closeModal,\n      _onSubmit = props.onSubmit,\n      submitText = props.submitText,\n      titleText = props.titleText,\n      idsToFilter = props.idsToFilter,\n      swapParams = props.swapParams;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedUsers = _useState4[0],\n      setSelectedUsers = _useState4[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      usersDataSource = _useState6[0],\n      setUsersDataSource = _useState6[1];\n\n  var selectedCount = Object.keys(selectedUsers).length;\n  useEffect(function () {\n    var applicationUserListQuery = userQueryCreator();\n    setUsersDataSource(applicationUserListQuery);\n    applicationUserListQuery.next(function (res, err) {\n      // eslint-disable-next-line no-underscore-dangle\n      var users_ = res;\n      var error = err;\n\n      if (swapParams) {\n        users_ = err;\n        error = users_;\n      }\n\n      if (error) {\n        return;\n      }\n\n      setUsers(users_);\n    });\n  }, []);\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: titleText,\n    submitText: submitText,\n    type: Type.PRIMARY,\n    onCancel: closeModal,\n    onSubmit: function onSubmit() {\n      var selectedUserList = Object.keys(selectedUsers);\n\n      if (selectedUserList.length > 0) {\n        _onSubmit(selectedUserList);\n\n        closeModal();\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Label, {\n    color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3,\n    type: LabelTypography.CAPTION_1\n  }, \"\".concat(selectedCount, \" \").concat(stringSet.MODAL__INVITE_MEMBER__SELECTEC)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-create-channel--scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = usersDataSource.hasNext;\n      var fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        usersDataSource.next(function (usersBatch, error) {\n          if (error) {\n            return;\n          }\n\n          setUsers([].concat(_toConsumableArray(users), _toConsumableArray(usersBatch)));\n        });\n      }\n    }\n  }, users.map(function (user) {\n    return !filterUser(idsToFilter)(user.userId) && /*#__PURE__*/React__default.createElement(UserListItem, {\n      key: user.userId,\n      user: user,\n      checkBox: true,\n      checked: selectedUsers[user.userId],\n      onChange: function onChange(event) {\n        var modifiedSelectedUsers = _objectSpread2(_objectSpread2({}, selectedUsers), {}, _defineProperty({}, event.target.id, event.target.checked));\n\n        if (!event.target.checked) {\n          delete modifiedSelectedUsers[event.target.id];\n        }\n\n        setSelectedUsers(modifiedSelectedUsers);\n      }\n    });\n  }))));\n};\n\nInviteMembers.propTypes = {\n  idsToFilter: PropTypes.arrayOf(PropTypes.string),\n  swapParams: PropTypes.bool,\n  userQueryCreator: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  submitText: PropTypes.string,\n  titleText: PropTypes.string\n};\nInviteMembers.defaultProps = {\n  swapParams: false,\n  submitText: 'create',\n  titleText: 'Create new channel',\n  idsToFilter: []\n};\n\nvar createDefaultUserListQuery = function createDefaultUserListQuery(_ref) {\n  var sdk = _ref.sdk,\n      _ref$userFilledApplic = _ref.userFilledApplicationUserListQuery,\n      userFilledApplicationUserListQuery = _ref$userFilledApplic === void 0 ? {} : _ref$userFilledApplic;\n  var params = sdk.createApplicationUserListQuery();\n\n  if (userFilledApplicationUserListQuery) {\n    Object.keys(userFilledApplicationUserListQuery).forEach(function (key) {\n      params[key] = userFilledApplicationUserListQuery[key];\n    });\n  }\n\n  return params;\n};\n\nvar getApplicationAttributes = function getApplicationAttributes() {\n  var sdk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _sdk$appInfo = sdk.appInfo,\n      appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n  var _appInfo$applicationA = appInfo.applicationAttributes,\n      applicationAttributes = _appInfo$applicationA === void 0 ? [] : _appInfo$applicationA;\n  return applicationAttributes;\n};\n\nvar isBroadcastChannelEnabled = function isBroadcastChannelEnabled() {\n  var sdk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ALLOW_BROADCAST_CHANNEL = 'allow_broadcast_channel';\n  var applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_BROADCAST_CHANNEL);\n  }\n\n  return false;\n};\n\nvar isSuperGroupChannelEnabled = function isSuperGroupChannelEnabled() {\n  var sdk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ALLOW_SUPER_GROUP_CHANNEL = 'allow_super_group_channel';\n  var applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_SUPER_GROUP_CHANNEL);\n  }\n\n  return false;\n};\n\nvar setChannelType = function setChannelType(params, type) {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n\n  return params;\n};\n\nvar createChannel = function createChannel(sdk, selectedUsers, onBeforeCreateChannel, userId) {\n  var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'group';\n  return new Promise(function (resolve, reject) {\n    // have custom params\n    if (onBeforeCreateChannel) {\n      var _params = onBeforeCreateChannel(selectedUsers);\n\n      setChannelType(_params, type);\n      sdk.GroupChannel.createChannel(_params, function (response, error) {\n        var swapParams = sdk.getErrorFirstCallback();\n        var groupChannel = response;\n        var err = error;\n\n        if (swapParams) {\n          groupChannel = error;\n          err = response;\n        }\n\n        if (err) {\n          reject(err);\n        }\n\n        resolve(groupChannel);\n      });\n      return;\n    }\n\n    var params = new sdk.GroupChannelParams();\n    params.addUserIds(selectedUsers);\n    params.isDistinct = false;\n\n    if (userId) {\n      params.operatorUserIds = [userId];\n    }\n\n    setChannelType(params, type); // do not have custom params\n\n    sdk.GroupChannel.createChannel(params, function (response, error) {\n      var swapParams = sdk.getErrorFirstCallback();\n      var groupChannel = response;\n      var err = error;\n\n      if (swapParams) {\n        groupChannel = error;\n        err = response;\n      }\n\n      if (err) {\n        reject(err);\n      }\n\n      resolve(groupChannel);\n    });\n  });\n};\n\nvar LeaveChannel = function LeaveChannel(props) {\n  var onCloseModal = props.onCloseModal,\n      onLeaveChannel = props.onLeaveChannel;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: onCloseModal,\n    onSubmit: onLeaveChannel,\n    submitText: \"Leave\",\n    titleText: \"Leave this channel?\"\n  });\n};\n\nLeaveChannel.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  onLeaveChannel: PropTypes.func.isRequired\n};\nexport { Badge as B, InviteMembers as I, LeaveChannel as L, isSuperGroupChannelEnabled as a, createChannel as b, createDefaultUserListQuery as c, isBroadcastChannelEnabled as i };","map":{"version":3,"sources":["../src/ui/Badge/index.jsx","../src/smart-components/InviteMembers/index.jsx","../src/smart-components/ChannelList/components/utils.js","../src/smart-components/ChannelSettings/components/LeaveChannel.jsx"],"names":["count","maxLevel","className","stringSet","useContext","maximumNumber","parseInt","Array","LabelTypography","LabelColors","ONCONTENT_1","Badge","PropTypes","filterUser","idsToFilter","InviteMembers","userQueryCreator","closeModal","onSubmit","submitText","titleText","swapParams","props","users","setUsers","useState","selectedUsers","setSelectedUsers","usersDataSource","setUsersDataSource","selectedCount","Object","useEffect","applicationUserListQuery","users_","error","ButtonTypes","selectedUserList","CAPTION_1","hasNext","fetchMore","e","user","modifiedSelectedUsers","event","string","createDefaultUserListQuery","sdk","userFilledApplicationUserListQuery","params","getApplicationAttributes","appInfo","applicationAttributes","isBroadcastChannelEnabled","ALLOW_BROADCAST_CHANNEL","isSuperGroupChannelEnabled","ALLOW_SUPER_GROUP_CHANNEL","setChannelType","type","createChannel","onBeforeCreateChannel","groupChannel","err","reject","resolve","LeaveChannel","onCloseModal","onLeaveChannel","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nexport default function Badge({\n  count,\n  maxLevel,\n  className,\n}) {\n  const { stringSet } = useContext(LocalizationContext);\n  const maximumNumber = parseInt('9'.repeat((maxLevel > 6) ? 6 : maxLevel), 10);\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-badge',\n      ].join(' ')}\n    >\n      <div className=\"sendbird-badge__text\">\n        <Label\n          type={LabelTypography.CAPTION_2}\n          color={LabelColors.ONCONTENT_1}\n        >\n          {\n            (count > maximumNumber)\n              ? `${maximumNumber}${stringSet.BADGE__OVER}`\n              : count\n          }\n        </Label>\n      </div>\n    </div>\n  );\n}\n\nBadge.propTypes = {\n  count: PropTypes.number.isRequired,\n  maxLevel: PropTypes.number,\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n};\n\nBadge.defaultProps = {\n  maxLevel: 2,\n  className: [],\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport Label, { LabelTypography, LabelColors } from '../../ui/Label';\nimport Modal from '../../ui/Modal';\nimport { Type as ButtonTypes } from '../../ui/Button/type';\nimport UserListItem from '../../ui/UserListItem';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nconst filterUser = (idsToFilter) => (currentId) => idsToFilter.includes(currentId);\n\nconst InviteMembers = (props) => {\n  const {\n    userQueryCreator,\n    closeModal,\n    onSubmit,\n    submitText,\n    titleText,\n    idsToFilter,\n    swapParams,\n  } = props;\n\n  const [users, setUsers] = useState([]);\n  const [selectedUsers, setSelectedUsers] = useState({});\n  const { stringSet } = useContext(LocalizationContext);\n  const [usersDataSource, setUsersDataSource] = useState({});\n  const selectedCount = Object.keys(selectedUsers).length;\n\n  useEffect(() => {\n    const applicationUserListQuery = userQueryCreator();\n    setUsersDataSource(applicationUserListQuery);\n    applicationUserListQuery.next((res, err) => {\n      // eslint-disable-next-line no-underscore-dangle\n      let users_ = res;\n      let error = err;\n      if (swapParams) {\n        users_ = err;\n        error = users_;\n      }\n      if (error) {\n        return;\n      }\n      setUsers(users_);\n    });\n  }, []);\n\n  return (\n    <Modal\n      titleText={titleText}\n      submitText={submitText}\n      type={ButtonTypes.PRIMARY}\n      onCancel={closeModal}\n      onSubmit={() => {\n        const selectedUserList = Object.keys(selectedUsers);\n        if (selectedUserList.length > 0) {\n          onSubmit(selectedUserList);\n          closeModal();\n        }\n      }}\n    >\n      <div>\n        <Label\n          color={(selectedCount > 0) ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3}\n          type={LabelTypography.CAPTION_1}\n        >\n          {`${selectedCount} ${stringSet.MODAL__INVITE_MEMBER__SELECTEC}`}\n        </Label>\n        <div\n          className=\"sendbird-create-channel--scroll\"\n          onScroll={(e) => {\n            const { hasNext } = usersDataSource;\n            const fetchMore = (\n              e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight\n            );\n\n            if (hasNext && fetchMore) {\n              usersDataSource.next((usersBatch, error) => {\n                if (error) {\n                  return;\n                }\n                setUsers([\n                  ...users,\n                  ...usersBatch,\n                ]);\n              });\n            }\n          }}\n        >\n          {\n            users.map((user) => (!filterUser(idsToFilter)(user.userId)) && (\n              <UserListItem\n                key={user.userId}\n                user={user}\n                checkBox\n                checked={selectedUsers[user.userId]}\n                onChange={\n                  (event) => {\n                    const modifiedSelectedUsers = {\n                      ...selectedUsers,\n                      [event.target.id]: event.target.checked,\n                    };\n                    if (!event.target.checked) {\n                      delete modifiedSelectedUsers[event.target.id];\n                    }\n                    setSelectedUsers(modifiedSelectedUsers);\n                  }\n                }\n              />\n            ))\n          }\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nInviteMembers.propTypes = {\n  idsToFilter: PropTypes.arrayOf(PropTypes.string),\n  swapParams: PropTypes.bool,\n  userQueryCreator: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  submitText: PropTypes.string,\n  titleText: PropTypes.string,\n};\nInviteMembers.defaultProps = {\n  swapParams: false,\n  submitText: 'create',\n  titleText: 'Create new channel',\n  idsToFilter: [],\n};\n\nexport default InviteMembers;\n","export const createDefaultUserListQuery = ({ sdk, userFilledApplicationUserListQuery = {} }) => {\n  const params = sdk.createApplicationUserListQuery();\n  if (userFilledApplicationUserListQuery) {\n    Object.keys(userFilledApplicationUserListQuery).forEach((key) => {\n      params[key] = userFilledApplicationUserListQuery[key];\n    });\n  }\n  return params;\n};\n\nconst getApplicationAttributes = (sdk = {}) => {\n  const { appInfo = {} } = sdk;\n  const { applicationAttributes = [] } = appInfo;\n  return applicationAttributes;\n};\n\nexport const isBroadcastChannelEnabled = (sdk = {}) => {\n  const ALLOW_BROADCAST_CHANNEL = 'allow_broadcast_channel';\n  const applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_BROADCAST_CHANNEL);\n  }\n\n  return false;\n};\nexport const isSuperGroupChannelEnabled = (sdk = {}) => {\n  const ALLOW_SUPER_GROUP_CHANNEL = 'allow_super_group_channel';\n  const applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_SUPER_GROUP_CHANNEL);\n  }\n\n  return false;\n};\n\nexport const setChannelType = (params, type) => {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n  return params;\n};\n\nexport const createChannel = (\n  sdk,\n  selectedUsers,\n  onBeforeCreateChannel,\n  userId,\n  type = 'group',\n) => new Promise((resolve, reject) => {\n  // have custom params\n  if (onBeforeCreateChannel) {\n    const params = onBeforeCreateChannel(selectedUsers);\n    setChannelType(params, type);\n    sdk.GroupChannel.createChannel(params, (response, error) => {\n      const swapParams = sdk.getErrorFirstCallback();\n      let groupChannel = response;\n      let err = error;\n      if (swapParams) {\n        groupChannel = error;\n        err = response;\n      }\n      if (err) {\n        reject(err);\n      }\n      resolve(groupChannel);\n    });\n    return;\n  }\n\n  const params = new sdk.GroupChannelParams();\n  params.addUserIds(selectedUsers);\n  params.isDistinct = false;\n\n  if (userId) {\n    params.operatorUserIds = [userId];\n  }\n  setChannelType(params, type);\n  // do not have custom params\n  sdk.GroupChannel.createChannel(\n    params,\n    (response, error) => {\n      const swapParams = sdk.getErrorFirstCallback();\n      let groupChannel = response;\n      let err = error;\n      if (swapParams) {\n        groupChannel = error;\n        err = response;\n      }\n      if (err) {\n        reject(err);\n      }\n      resolve(groupChannel);\n    },\n  );\n});\n\nexport default createChannel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Modal from '../../../ui/Modal';\n\nconst LeaveChannel = (props) => {\n  const {\n    onCloseModal,\n    onLeaveChannel,\n  } = props;\n  return (\n    <Modal\n      onCancel={onCloseModal}\n      onSubmit={onLeaveChannel}\n      submitText=\"Leave\"\n      titleText=\"Leave this channel?\"\n    />\n  );\n};\n\nLeaveChannel.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  onLeaveChannel: PropTypes.func.isRequired,\n};\n\nexport default LeaveChannel;\n"]},"metadata":{},"sourceType":"module"}