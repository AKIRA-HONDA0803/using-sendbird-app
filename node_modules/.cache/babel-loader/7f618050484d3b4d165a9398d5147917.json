{"ast":null,"code":"import { a as _objectSpread2, e as _toConsumableArray, c as LocalizationContext, w as withSendbirdContext, b as _slicedToArray, u as uuidv4 } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useContext, useRef, useState, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { U as UPDATE_USER_INFO } from './actionTypes-3af77038.js';\nimport { i as filterChannelListParams, j as getChannelsWithUpsertedChannel, t as truncateString, I as IconButton, M as Modal, T as Type, a as TextButton, C as ContextMenu, b as MenuItems, c as MenuItem, k as CREATE_CHANNEL$1, l as UPDATE_USER_MESSAGE, L as LEAVE_CHANNEL, S as SEND_MESSAGE_START, h as UserProfileProvider } from './index-cb0d7936.js';\nimport { C as ChannelAvatar } from './index-db1485c0.js';\nimport { B as Badge, i as isBroadcastChannelEnabled, a as isSuperGroupChannelEnabled, I as InviteMembers, c as createDefaultUserListQuery, b as createChannel, L as LeaveChannel } from './LeaveChannel-42fd86b9.js';\nimport { g as format, h as LabelStringSet, I as Icon, c as IconTypes, d as IconColors, L as Label, a as LabelTypography, b as LabelColors, A as Avatar, P as PlaceHolder, f as PlaceHolderTypes } from './index-fe1a6d27.js';\nimport { i as isToday, a as isYesterday } from './index-d3cbd48c.js';\nimport { I as InputLabel, a as Input, n as noop$1 } from './index-1fe82074.js';\nimport 'react-dom';\nimport './utils-7b22e0fc.js';\nimport './index-0cc16758.js';\nvar RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nvar CREATE_CHANNEL = 'CREATE_CHANNEL';\nvar LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nvar HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\nvar FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nvar FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nvar FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\nvar INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nvar INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nvar INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\nvar ON_USER_JOINED = 'ON_USER_JOINED';\nvar ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nvar ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nvar ON_USER_LEFT = 'ON_USER_LEFT';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nvar ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\nvar CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nvar CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\nvar channelListInitialState = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: ''\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case INIT_CHANNELS_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n\n    case RESET_CHANNEL_LIST:\n      return channelListInitialState;\n\n    case INIT_CHANNELS_SUCCESS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        initialized: true,\n        loading: false,\n        allChannels: action.payload,\n        currentChannel: action.payload && action.payload.length && action.payload.length > 0 ? action.payload[0].url : null\n      });\n\n    case FETCH_CHANNELS_SUCCESS:\n      {\n        var currentChannels = state.allChannels.map(function (c) {\n          return c.url;\n        });\n        var filteredChannels = action.payload.filter(function (_ref) {\n          var url = _ref.url;\n          return !currentChannels.find(function (c) {\n            return c === url;\n          });\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [].concat(_toConsumableArray(state.allChannels), _toConsumableArray(filteredChannels))\n        });\n      }\n\n    case CREATE_CHANNEL:\n      {\n        var channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel.url\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channel.url,\n          allChannels: [channel].concat(_toConsumableArray(state.allChannels.filter(function (ch) {\n            return ch.url !== channel.url;\n          })))\n        });\n      }\n\n    case ON_CHANNEL_ARCHIVED:\n      {\n        var _channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel)\n            });\n          }\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: _channel.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel.url ? 1 : 0].url : state.currentChannel,\n          allChannels: state.allChannels.filter(function (_ref2) {\n            var url = _ref2.url;\n            return url !== _channel.url;\n          })\n        });\n      }\n\n    case LEAVE_CHANNEL_SUCCESS:\n    case ON_CHANNEL_DELETED:\n      {\n        var channelUrl = action.payload;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channelUrl === state.currentChannel ? state.allChannels[0].url : state.currentChannel,\n          allChannels: state.allChannels.filter(function (_ref3) {\n            var url = _ref3.url;\n            return url !== channelUrl;\n          })\n        });\n      }\n\n    case ON_USER_LEFT:\n      {\n        var _action$payload = action.payload,\n            _channel2 = _action$payload.channel,\n            isMe = _action$payload.isMe;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel2, state.currentUserId)) {\n            var _filteredChannels2 = getChannelsWithUpsertedChannel(state.allChannels, _channel2);\n\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              currentChannel: isMe && _channel2.url === state.currentChannel ? _filteredChannels2[0].url : state.currentChannel,\n              allChannels: _filteredChannels2\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel2.url === state.currentChannel ? state.allChannels[0].url : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref4) {\n              var url = _ref4.url;\n              return url !== _channel2.url;\n            })\n          });\n        }\n\n        var _filteredChannels = state.allChannels.filter(function (c) {\n          return !(c.url === _channel2.url && isMe);\n        });\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: isMe && _channel2.url === state.currentChannel ? _filteredChannels[0].url : state.currentChannel,\n          allChannels: _filteredChannels\n        });\n      }\n\n    case ON_USER_JOINED:\n    case ON_CHANNEL_CHANGED:\n    case ON_READ_RECEIPT_UPDATED:\n    case ON_DELIVERY_RECEIPT_UPDATED:\n      {\n        var _state$allChannels = state.allChannels,\n            allChannels = _state$allChannels === void 0 ? [] : _state$allChannels;\n        var _channel3 = action.payload;\n        var unreadMessageCount = _channel3.unreadMessageCount;\n        if (!_channel3.lastMessage) return state;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel3, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(allChannels, _channel3)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel3.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel3.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref5) {\n              var url = _ref5.url;\n              return url !== _channel3.url;\n            })\n          });\n        } // if its only an unread message count change, dont push to top\n\n\n        if (unreadMessageCount === 0) {\n          var currentChannel = allChannels.find(function (_ref6) {\n            var url = _ref6.url;\n            return url === _channel3.url;\n          });\n          var currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n\n          if (currentUnreadCount === 0) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: state.allChannels.map(function (ch) {\n                return ch.url === _channel3.url ? _channel3 : ch;\n              })\n            });\n          }\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [_channel3].concat(_toConsumableArray(state.allChannels.filter(function (_ref7) {\n            var url = _ref7.url;\n            return url !== action.payload.url;\n          })))\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentChannel: action.payload\n      });\n\n    case SHOW_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: true\n      });\n\n    case HIDE_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: false\n      });\n\n    case ON_LAST_MESSAGE_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allChannels: state.allChannels.map(function (channel) {\n          return channel.url === action.payload.url ? action.payload : channel;\n        })\n      });\n\n    case ON_CHANNEL_FROZEN:\n      {\n        var _channel4 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel4, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel4)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel4.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel4.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref8) {\n              var url = _ref8.url;\n              return url !== _channel4.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel4.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var _channel5 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel5, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel5)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel5.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel5.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref9) {\n              var url = _ref9.url;\n              return url !== _channel5.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel5.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case CHANNEL_REPLACED_TO_TOP:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [action.payload].concat(_toConsumableArray(state.allChannels.filter(function (channel) {\n            return channel.url !== action.payload.url;\n          })))\n        });\n      }\n\n    case CHANNEL_LIST_PARAMS_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar getChannelTitle = function getChannelTitle() {\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n\n  if (!channel || !channel.name && !channel.members) {\n    return stringSet.NO_TITLE;\n  }\n\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members.filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\n\nvar getLastMessageCreatedAt = function getLastMessageCreatedAt(channel) {\n  if (!channel || !channel.lastMessage) {\n    return '';\n  }\n\n  var date = channel.lastMessage.createdAt;\n\n  if (isToday(date)) {\n    return format(date, 'p');\n  }\n\n  if (isYesterday(date)) {\n    return 'Yesterday';\n  }\n\n  return format(date, 'MMM dd');\n};\n\nvar getTotalMembers = function getTotalMembers(channel) {\n  return channel && channel.memberCount ? channel.memberCount : 0;\n};\n\nvar getPrettyLastMessage = function getPrettyLastMessage() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var MAXLEN = 30;\n  var messageType = message.messageType,\n      name = message.name;\n\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n\n  return message.message;\n};\n\nvar getLastMessage = function getLastMessage(channel) {\n  return channel && channel.lastMessage ? getPrettyLastMessage(channel.lastMessage) : '';\n};\n\nvar getChannelUnreadMessageCount = function getChannelUnreadMessageCount(channel) {\n  return channel && channel.unreadMessageCount ? channel.unreadMessageCount : 0;\n};\n\nfunction ChannelPreview(_ref) {\n  var channel = _ref.channel,\n      currentUser = _ref.currentUser,\n      isActive = _ref.isActive,\n      ChannelAction = _ref.ChannelAction,\n      theme = _ref.theme,\n      onClick = _ref.onClick,\n      tabIndex = _ref.tabIndex;\n  var userId = currentUser.userId;\n  var isBroadcast = channel.isBroadcast,\n      isFrozen = channel.isFrozen;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-preview', isActive ? 'sendbird-channel-preview--active' : ''].join(' '),\n    role: \"link\",\n    onClick: onClick,\n    onKeyPress: onClick,\n    tabIndex: tabIndex\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header\"\n  }, isBroadcast && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.SECONDARY,\n    height: \"16px\",\n    width: \"16px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, getChannelTitle(channel, userId, stringSet)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__total-members\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getTotalMembers(channel)), isFrozen && /*#__PURE__*/React__default.createElement(\"div\", {\n    title: \"Frozen\",\n    className: \"sendbird-channel-preview__content__upper__header__frozen-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    height: 12,\n    width: 12\n  }))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getLastMessageCreatedAt(channel))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__lower__last-message\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, getLastMessage(channel)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count\"\n  }, getChannelUnreadMessageCount(channel) // return number\n  ? /*#__PURE__*/React__default.createElement(Badge, {\n    count: getChannelUnreadMessageCount(channel)\n  }) : null))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__action\"\n  }, ChannelAction));\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number\n};\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: function onClick() {},\n  tabIndex: 0\n};\n\nfunction ChannelHeader(_ref) {\n  var user = _ref.user,\n      renderHeader = _ref.renderHeader,\n      iconButton = _ref.iconButton,\n      onEdit = _ref.onEdit,\n      allowProfileEdit = _ref.allowProfileEdit;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-header', allowProfileEdit ? 'sendbird-channel-header--allow-edit' : ''].join(' ')\n  }, renderHeader ? renderHeader() : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title\",\n    role: \"button\",\n    onClick: onEdit,\n    onKeyDown: onEdit,\n    tabIndex: \"0\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"32px\",\n    height: \"32px\",\n    src: user.profileUrl,\n    alt: user.nickname\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__user-id\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__right-icon\"\n  }, iconButton));\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([PropTypes.element, PropTypes.instanceOf(IconButton)]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool\n};\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false\n};\n\nfunction EditUserProfile(_a) {\n  var user = _a.user,\n      _b = _a.theme,\n      theme = _b === void 0 ? 'light' : _b,\n      onCancel = _a.onCancel,\n      _onSubmit = _a.onSubmit,\n      _c = _a.changeTheme,\n      changeTheme = _c === void 0 ? noop$1 : _c,\n      _d = _a.onThemeChange,\n      onThemeChange = _d === void 0 ? null : _d;\n  var hiddenInputRef = useRef(null);\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _e = useState(null),\n      currentImg = _e[0],\n      setCurrentImg = _e[1];\n\n  var _f = useState(null),\n      newFile = _f[0],\n      setNewFile = _f[1];\n\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.EDIT_PROFILE__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    type: Type.PRIMARY,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (user.nickname !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(inputRef.current.value, newFile);\n\n      onCancel();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"sendbird-edit-user-profile\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__img\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__IMAGE_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__img__avatar\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"80px\",\n    height: \"80px\",\n    src: currentImg || user.profileUrl\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-edit-user-profile__img__avatar-button\",\n    notUnderline: true,\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    }\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.EDIT_PROFILE__IMAGE_UPLOAD))), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__name\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__NICKNAME_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    required: user.nickname !== '',\n    name: \"sendbird-edit-user-profile__name__input\",\n    ref: inputRef,\n    value: user.nickname,\n    placeHolder: stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__userid\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__USERID_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    disabled: true,\n    name: \"sendbird-edit-user-profile__userid__input\",\n    value: user.userId\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__theme\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__THEME_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__theme__theme-icon\"\n  }, theme === 'dark' ? /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('light');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('light');\n      }\n    },\n    type: IconTypes.TOGGLE_ON,\n    width: 44,\n    height: 24\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('dark');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('dark');\n      }\n    },\n    type: IconTypes.TOGGLE_OFF,\n    width: 44,\n    height: 24\n  })))));\n}\n\nvar mapStoreToProps = function mapStoreToProps(store) {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme\n  };\n};\n\nvar ConnectedEditUserProfile = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nfunction AddChannel(_ref) {\n  var sdk = _ref.sdk,\n      disabled = _ref.disabled,\n      channelListDispatcher = _ref.channelListDispatcher,\n      onBeforeCreateChannel = _ref.onBeforeCreateChannel,\n      userId = _ref.userId,\n      userFilledApplicationUserListQuery = _ref.userFilledApplicationUserListQuery,\n      userListQuery = _ref.userListQuery;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      step = _useState4[0],\n      setStep = _useState4[1];\n\n  var _useState5 = useState('group'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  var isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  var isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(IconButton, {\n    height: \"32px\",\n    width: \"32px\",\n    onClick: function onClick() {\n      setShowModal(true);\n    },\n    disabled: disabled\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CREATE,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), showModal && step === 0 && /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE,\n    hideFooter: true,\n    onCancel: function onCancel() {\n      setShowModal(false);\n    },\n    onSubmit: function onSubmit() {}\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle-wrap\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('group');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('group');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__chat-icon\",\n    type: IconTypes.CHAT,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP)), isSupergroupAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('supergroup');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('supergroup');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__supergroup-icon\",\n    type: IconTypes.SUPERGROUP,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP)), isBroadcastAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('broadcast');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('broadcast');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__broadcast-icon\",\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST)))), showModal && step === 1 && /*#__PURE__*/React__default.createElement(InviteMembers, {\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    titleText: stringSet.MODAL__CREATE_CHANNEL__TITLE,\n    submitText: stringSet.BUTTON__CREATE,\n    closeModal: function closeModal() {\n      setStep(0);\n      setShowModal(false);\n    },\n    idsToFilter: [userId],\n    userQueryCreator: function userQueryCreator() {\n      return userListQuery && typeof userListQuery === 'function' ? userListQuery() : createDefaultUserListQuery({\n        sdk: sdk,\n        userFilledApplicationUserListQuery: userFilledApplicationUserListQuery\n      });\n    },\n    onSubmit: function onSubmit(selectedUsers) {\n      return createChannel(sdk, selectedUsers, onBeforeCreateChannel, userId, type).then(function (channel) {\n        // maybe - do this in event listener\n        channelListDispatcher({\n          type: CREATE_CHANNEL,\n          payload: channel\n        });\n      });\n    }\n  }));\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func\n};\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null\n};\n\nfunction ChannelPreviewAction(_ref) {\n  var disabled = _ref.disabled,\n      onLeaveChannel = _ref.onLeaveChannel;\n  var parentRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: function onKeyDown(e) {\n      e.stopPropagation();\n    },\n    tabIndex: 0,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    }\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        ref: parentRef,\n        onClick: toggleDropdown,\n        height: \"32px\",\n        width: \"32px\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: parentRef,\n        parentContainRef: parentRef,\n        closeDropdown: closeDropdown\n      }, /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          setShowModal(true);\n          closeDropdown();\n        }\n      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));\n    }\n  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    onCloseModal: function onCloseModal() {\n      return setShowModal(false);\n    },\n    onLeaveChannel: onLeaveChannel\n  }));\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired\n};\nChannelPreviewAction.defaultProps = {\n  disabled: false\n};\n\nfunction ChannelsPlaceholder(_ref) {\n  var type = _ref.type;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: type\n  }));\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\nvar createEventHandler = function createEventHandler(_ref) {\n  var sdk = _ref.sdk,\n      sdkChannelHandlerId = _ref.sdkChannelHandlerId,\n      channelListDispatcher = _ref.channelListDispatcher,\n      logger = _ref.logger;\n  var ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = function (channel) {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_CHANGED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelDeleted = function (channelUrl) {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: ON_CHANNEL_DELETED,\n      payload: channelUrl\n    });\n  };\n\n  ChannelHandler.onUserJoined = function (channel) {\n    logger.info('ChannelList: onUserJoined', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_USER_JOINED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onUserBanned = function (channel, user) {\n    var currentUser = sdk.currentUser;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: true\n        }\n      });\n    } else {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: false\n        }\n      });\n    }\n  };\n\n  ChannelHandler.onUserLeft = function (channel, leftUser) {\n    var currentUser = sdk.currentUser;\n    var isMe = currentUser.userId === leftUser.userId;\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: ON_USER_LEFT,\n      payload: {\n        channel: channel,\n        isMe: isMe\n      }\n    });\n  };\n\n  ChannelHandler.onReadStatus = function (channel) {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: ON_READ_RECEIPT_UPDATED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = function (channel) {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = function (channel, message) {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = function (channel) {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_ARCHIVED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = function (channel) {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_FROZEN,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = function (channel) {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_UNFROZEN,\n      payload: channel\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nvar createChannelListQuery = function createChannelListQuery(_ref2) {\n  var sdk = _ref2.sdk,\n      _ref2$userFilledChann = _ref2.userFilledChannelListQuery,\n      userFilledChannelListQuery = _ref2$userFilledChann === void 0 ? {} : _ref2$userFilledChann;\n  var channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach(function (key) {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\n\n\nfunction setupChannelList(_ref3) {\n  var sdk = _ref3.sdk,\n      sdkChannelHandlerId = _ref3.sdkChannelHandlerId,\n      channelListDispatcher = _ref3.channelListDispatcher,\n      setChannelSource = _ref3.setChannelSource,\n      onChannelSelect = _ref3.onChannelSelect,\n      userFilledChannelListQuery = _ref3.userFilledChannelListQuery,\n      logger = _ref3.logger,\n      sortChannelList = _ref3.sortChannelList;\n\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      sdkChannelHandlerId: sdkChannelHandlerId,\n      logger: logger\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', {\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  var channelListQuery = createChannelListQuery({\n    sdk: sdk,\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n  channelListDispatcher({\n    type: INIT_CHANNELS_START\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery: channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId\n      }\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n\n  if (channelListQuery.hasNext) {\n    channelListQuery.next(function (response, error) {\n      var swapParams = sdk.getErrorFirstCallback();\n      var channelList = response;\n      var err = error;\n\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n\n      logger.info('ChannelList - fetched channels', channelList);\n\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: INIT_CHANNELS_FAILURE\n        });\n        return;\n      } // select first channel\n\n\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      var sorted = channelList;\n\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n\n      onChannelSelect(sorted[0]);\n      channelListDispatcher({\n        type: INIT_CHANNELS_SUCCESS,\n        payload: sorted\n      });\n\n      if (channelList && typeof channelList.forEach === 'function') {\n        logger.info('ChannelList - mark all channels as delivered');\n        channelList.forEach(function (c) {\n          return c.markAsDelivered();\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {//\n    }\n  });\n};\n\nvar pubSubHandler = function pubSubHandler(pubSub, channelListDispatcher) {\n  var subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(CREATE_CHANNEL$1, pubSub.subscribe(CREATE_CHANNEL$1, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel\n    });\n  }));\n  subScriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n    var _updatedChannel$lastM;\n\n    var channel = msg.channel,\n        message = msg.message;\n    var updatedChannel = channel;\n\n    if ((updatedChannel === null || updatedChannel === void 0 ? void 0 : (_updatedChannel$lastM = updatedChannel.lastMessage) === null || _updatedChannel$lastM === void 0 ? void 0 : _updatedChannel$lastM.messageId) === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n\n    if (channel) {\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel\n      });\n    }\n  }));\n  subScriber.set(LEAVE_CHANNEL, pubSub.subscribe(LEAVE_CHANNEL, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url\n    });\n  }));\n  subScriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: CHANNEL_REPLACED_TO_TOP,\n      payload: channel\n    });\n  }));\n  return subScriber;\n};\n\nvar noop = function noop() {};\n\nfunction ChannelList(props) {\n  var _props$stores = props.stores,\n      _props$stores$sdkStor = _props$stores.sdkStore,\n      sdkStore = _props$stores$sdkStor === void 0 ? {} : _props$stores$sdkStor,\n      _props$stores$userSto = _props$stores.userStore,\n      userStore = _props$stores$userSto === void 0 ? {} : _props$stores$userSto,\n      _props$config = props.config,\n      userId = _props$config.userId,\n      isOnline = _props$config.isOnline,\n      userListQuery = _props$config.userListQuery,\n      logger = _props$config.logger,\n      pubSub = _props$config.pubSub,\n      theme = _props$config.theme,\n      userDispatcher = props.dispatchers.userDispatcher,\n      _props$queries = props.queries,\n      queries = _props$queries === void 0 ? {} : _props$queries,\n      renderChannelPreview = props.renderChannelPreview,\n      renderHeader = props.renderHeader,\n      renderUserProfile = props.renderUserProfile,\n      disableUserProfile = props.disableUserProfile,\n      allowProfileEdit = props.allowProfileEdit,\n      sortChannelList = props.sortChannelList,\n      onProfileEditSuccess = props.onProfileEditSuccess,\n      onThemeChange = props.onThemeChange,\n      onBeforeCreateChannel = props.onBeforeCreateChannel,\n      onChannelSelect = props.onChannelSelect;\n  var _props$config2 = props.config,\n      config = _props$config2 === void 0 ? {} : _props$config2; // enable if it is true atleast once(both are flase by default)\n\n  var enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var _sdkStore$sdk = sdkStore.sdk,\n      sdk = _sdkStore$sdk === void 0 ? {} : _sdkStore$sdk;\n  var userFilledChannelListQuery = queries.channelListQuery;\n  var userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n  var sdkError = sdkStore.error;\n  var sdkIntialized = sdkStore.initialized;\n\n  var _useReducer = useReducer(reducer, channelListInitialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      channelListStore = _useReducer2[0],\n      channelListDispatcher = _useReducer2[1];\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      channelSource = _useState4[0],\n      setChannelSource = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showProfileEdit = _useState6[0],\n      setShowProfileEdit = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sdkChannelHandlerId = _useState8[0],\n      setSdkChannelHandlerId = _useState8[1];\n\n  var loading = channelListStore.loading,\n      currentChannel = channelListStore.currentChannel;\n  useEffect(function () {\n    setUser(userStore.user);\n  }, [userStore.user]);\n  useEffect(function () {\n    var subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return function () {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n  useEffect(function () {\n    setSdkChannelHandlerId(uuidv4);\n\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk: sdk,\n        sdkChannelHandlerId: sdkChannelHandlerId,\n        channelListDispatcher: channelListDispatcher,\n        setChannelSource: setChannelSource,\n        onChannelSelect: onChannelSelect,\n        userFilledChannelListQuery: userFilledChannelListQuery,\n        logger: logger,\n        sortChannelList: sortChannelList\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers'); // remove previous channelHandlers\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      } // remove channelSource\n\n\n      setChannelSource({}); // cleanup\n\n      channelListDispatcher({\n        type: RESET_CHANNEL_LIST\n      });\n    }\n\n    return function () {\n      logger.info('ChannelList: Removing channelHandlers');\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n  var allChannels = channelListStore.allChannels;\n  var sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    var warning = \"ChannelList: You have removed/added extra channels on sortChannelList\\n      this could cause unexpected problems\"; // eslint-disable-next-line no-console\n\n    console.warn(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n    logger.warning(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n  }\n\n  useEffect(function () {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) {\n      return;\n    }\n\n    sdk.GroupChannel.getChannel(currentChannel, function (groupChannel) {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-channel-list\",\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__header\"\n  }, /*#__PURE__*/React__default.createElement(ChannelHeader, {\n    renderHeader: renderHeader,\n    user: user,\n    onEdit: function onEdit() {\n      if (enableEditProfile) {\n        setShowProfileEdit(true);\n      }\n    },\n    allowProfileEdit: enableEditProfile,\n    iconButton: /*#__PURE__*/React__default.createElement(AddChannel, {\n      disabled: !isOnline,\n      userListQuery: userListQuery,\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      userId: userId,\n      userFilledApplicationUserListQuery: userFilledApplicationUserListQuery,\n      onBeforeCreateChannel: onBeforeCreateChannel\n    })\n  })), showProfileEdit && /*#__PURE__*/React__default.createElement(ConnectedEditUserProfile, {\n    onThemeChange: onThemeChange,\n    user: user,\n    onCancel: function onCancel() {\n      setShowProfileEdit(false);\n    },\n    onSubmit: function onSubmit(newName, newFile) {\n      sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, function (updatedUser) {\n        userDispatcher({\n          type: UPDATE_USER_INFO,\n          payload: updatedUser\n        });\n\n        if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n          onProfileEditSuccess(updatedUser);\n        }\n      });\n    }\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__body\",\n    onScroll: function onScroll(e) {\n      var fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n\n      if (fetchMore && channelSource.hasNext) {\n        logger.info('ChannelList: Fetching more channels');\n        channelListDispatcher({\n          type: FETCH_CHANNELS_START\n        });\n        channelSource.next(function (response, error) {\n          var swapParams = sdk.getErrorFirstCallback();\n          var channelList = response;\n          var err = error;\n\n          if (swapParams) {\n            channelList = error;\n            err = response;\n          }\n\n          if (err) {\n            logger.info('ChannelList: Fetching channels failed', err);\n            channelListDispatcher({\n              type: FETCH_CHANNELS_FAILURE,\n              payload: channelList\n            });\n            return;\n          }\n\n          logger.info('ChannelList: Fetching channels successful', channelList);\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: channelList\n          });\n\n          if (channelList && typeof channelList.forEach === 'function') {\n            logger.info('ChannelList: Marking all channels as read');\n            channelList.forEach(function (c) {\n              return c.markAsDelivered();\n            });\n          }\n        });\n      }\n    }\n  }, sdkError && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.WRONG\n  }), /*#__PURE__*/React__default.createElement(\"div\", null, sortedChannels && sortedChannels.map(function (channel, idx) {\n    var _onLeaveChannel = function onLeaveChannel(c, cb) {\n      logger.info('ChannelList: Leaving channel', c);\n      c.leave().then(function (res) {\n        logger.info('ChannelList: Leaving channel success', res);\n\n        if (cb && typeof cb === 'function') {\n          cb(res, null);\n        }\n\n        channelListDispatcher({\n          type: LEAVE_CHANNEL_SUCCESS,\n          payload: channel.url\n        });\n      }).catch(function (err) {\n        logger.error('ChannelList: Leaving channel failed', err);\n\n        if (cb && typeof cb === 'function') {\n          cb(null, err);\n        }\n      });\n    };\n\n    var onClick = function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      logger.info('ChannelList: Clicked on channel:', channel);\n      channelListDispatcher({\n        type: SET_CURRENT_CHANNEL,\n        payload: channel.url\n      });\n    };\n\n    return renderChannelPreview ?\n    /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      key: channel.url,\n      onClick: onClick\n    }, renderChannelPreview({\n      channel: channel,\n      onLeaveChannel: _onLeaveChannel\n    })) : /*#__PURE__*/React__default.createElement(ChannelPreview, {\n      key: channel.url,\n      tabIndex: idx,\n      onClick: onClick,\n      channel: channel,\n      currentUser: user,\n      theme: theme,\n      isActive: channel.url === currentChannel // todo - potential performance hit refactor\n      ,\n      ChannelAction: /*#__PURE__*/React__default.createElement(ChannelPreviewAction, {\n        disabled: !isOnline,\n        onLeaveChannel: function onLeaveChannel() {\n          return _onLeaveChannel(channel);\n        }\n      })\n    });\n  })), (!sdkIntialized || loading) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.LOADING\n  }), //  placeholder\n  (!allChannels || allChannels.length === 0) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.NO_CHANNELS\n  })));\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({})\n    })\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func\n    })\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  onChannelSelect: PropTypes.func\n};\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop\n};\nvar ChannelList$1 = withSendbirdContext(ChannelList);\nexport { ChannelList$1 as default };","map":{"version":3,"sources":["../src/smart-components/ChannelList/dux/actionTypes.js","../src/smart-components/ChannelList/dux/initialState.js","../src/smart-components/ChannelList/dux/reducers.js","../src/ui/ChannelPreview/utils.js","../src/ui/ChannelPreview/index.jsx","../src/ui/ChannelHeader/index.jsx","../src/ui/EditUserProfile/index.tsx","../src/smart-components/ChannelList/components/AddChannel.jsx","../src/smart-components/ChannelList/components/ChannelPreviewAction.jsx","../src/smart-components/ChannelList/components/Placeholder.jsx","../src/smart-components/ChannelList/utils.js","../src/smart-components/ChannelList/index.jsx"],"names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","SHOW_CHANNEL_SETTINGS","HIDE_CHANNEL_SETTINGS","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","initialized","loading","allChannels","currentChannel","showSettings","channelListQuery","currentUserId","action","currentChannels","c","filteredChannels","url","state","channel","filterChannelListParams","getChannelsWithUpsertedChannel","ch","channelUrl","isMe","unreadMessageCount","currentUnreadCount","payload","getChannelTitle","stringSet","LabelStringSet","userId","nickname","getLastMessageCreatedAt","date","isToday","format","isYesterday","getTotalMembers","getPrettyLastMessage","message","MAXLEN","messageType","name","truncateString","getLastMessage","getChannelUnreadMessageCount","currentUser","isActive","ChannelAction","theme","onClick","tabIndex","isBroadcast","isFrozen","useContext","IconTypes","IconColors","LabelTypography","LabelColors","ONBACKGROUND_1","utils","ONBACKGROUND_2","ONBACKGROUND_3","ChannelPreview","members","PropTypes","coverUrl","bool","string","number","user","renderHeader","iconButton","onEdit","allowProfileEdit","ChannelHeader","profileUrl","EditUserProfile","_a","_b","onCancel","onSubmit","_c","noop","_d","hiddenInputRef","useRef","inputRef","formRef","currentImg","setCurrentImg","useState","newFile","setNewFile","ButtonType","e","React","display","URL","PRIMARY","EDIT_PROFILE__NICKNAME_PLACEHOLDER","changeTheme","onThemeChange","mapStoreToProps","store","setCurrenttheme","ConnectedEditUserProfile","withSendbirdContext","sdk","disabled","channelListDispatcher","onBeforeCreateChannel","userFilledApplicationUserListQuery","userListQuery","showModal","setShowModal","step","setStep","type","setType","isBroadcastAvailable","isBroadcastChannelEnabled","isSupergroupAvailable","isSuperGroupChannelEnabled","createDefaultUserListQuery","AddChannel","getErrorFirstCallback","createApplicationUserListQuery","func","onLeaveChannel","parentRef","closeDropdown","ChannelPreviewAction","isRequired","ChannelsPlaceholder","createEventHandler","sdkChannelHandlerId","logger","ChannelHandler","leftUser","createChannelListQuery","userFilledChannelListQuery","Object","setChannelSource","onChannelSelect","sortChannelList","channelActions","swapParams","channelList","err","sorted","pubSubHandleRemover","subscriber","s","pubSubHandler","subScriber","msg","updatedChannel","sdkStore","userStore","isOnline","pubSub","userDispatcher","queries","renderChannelPreview","renderUserProfile","disableUserProfile","onProfileEditSuccess","props","config","enableEditProfile","userDefinedDisableUserProfile","userDefinedRenderProfile","sdkError","sdkIntialized","channelListStore","useReducer","setUser","channelSource","showProfileEdit","setShowProfileEdit","setSdkChannelHandlerId","useEffect","setupChannelList","channelListActions","sortedChannels","warning","console","before","after","updatedUser","fetchMore","PlaceholderTypes","WRONG","cb","LOADING","NO_CHANNELS","ChannelList","stores","dispatchers","info","error","subscribe","publish","channelNameContainsFilter","channelUrlsFilter","customTypesFilter","customTypeStartsWithFilter","hiddenChannelFilter","includeEmpty","limit","memberStateFilter","metadataOrderKeyFilter","nicknameContainsFilter","order","publicChannelFilter","superChannelFilter","unreadChannelFilter","userIdsExactFilter","userIdsIncludeFilter","userIdsIncludeFilterQueryType","applicationUserListQuery","userIdsFilter","metaDataKeyFilter","metaDataValuesFilter"],"mappings":"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","sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nexport const HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS:\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: action.payload,\n        currentChannel: (action.payload && action.payload.length && action.payload.length > 0)\n          ? action.payload[0].url\n          : null,\n      };\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel.url,\n        };\n      }\n      return {\n        ...state,\n        currentChannel: channel.url,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel.url)],\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n      }\n      return {\n        ...state,\n        currentChannel: (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          : state.currentChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      return {\n        ...state,\n        currentChannel: (channelUrl === state.currentChannel)\n          ? state.allChannels[0].url\n          : state.currentChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          return {\n            ...state,\n            currentChannel: (isMe && (channel.url === state.currentChannel))\n              ? filteredChannels[0].url\n              : state.currentChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        return {\n          ...state,\n          currentChannel: (channel.url === state.currentChannel)\n            ? state.allChannels[0].url\n            : state.currentChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel.url && isMe));\n      return {\n        ...state,\n        currentChannel: (isMe && (channel.url === state.currentChannel))\n          ? filteredChannels[0].url\n          : state.currentChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: (channel.url === state.currentChannel)\n            ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n            // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.SHOW_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: true,\n      };\n    case actions.HIDE_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: false,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED:\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel.url === action.payload.url ? action.payload : channel)),\n      };\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: (channel.url === state.currentChannel)\n            ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n            // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: (channel.url === state.currentChannel)\n            ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n            // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    default:\n      return state;\n  }\n}\n","import isToday from 'date-fns/isToday';\nimport format from 'date-fns/format';\nimport isYesterday from 'date-fns/isYesterday';\n\nimport { truncateString } from '../../utils';\nimport { LabelStringSet } from '../Label';\n\nexport const getChannelTitle = (channel = {}, currentUserId, stringSet = LabelStringSet) => {\n  if (!channel || (!channel.name && !channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || stringSet.NO_NAME))\n    .join(', ');\n};\n\nexport const getLastMessageCreatedAt = (channel) => {\n  if (!channel || !channel.lastMessage) {\n    return '';\n  }\n  const date = channel.lastMessage.createdAt;\n  if (isToday(date)) {\n    return format(date, 'p');\n  }\n\n  if (isYesterday(date)) {\n    return 'Yesterday';\n  }\n\n  return format(date, 'MMM dd');\n};\n\nexport const getTotalMembers = (channel) => (\n  channel && channel.memberCount\n    ? channel.memberCount\n    : 0\n);\n\nconst getPrettyLastMessage = (message = {}) => {\n  const MAXLEN = 30;\n  const { messageType, name } = message;\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n  return message.message;\n};\n\nexport const getLastMessage = (channel) => (\n  channel && channel.lastMessage\n    ? getPrettyLastMessage(channel.lastMessage)\n    : ''\n);\n\nexport const getChannelUnreadMessageCount = (channel) => (\n  (channel && channel.unreadMessageCount)\n    ? channel.unreadMessageCount\n    : 0\n);\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nimport ChannelAvatar from '../ChannelAvatar/index';\nimport Badge from '../Badge';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport * as utils from './utils';\n\nexport default function ChannelPreview({\n  channel,\n  currentUser,\n  isActive,\n  ChannelAction,\n  theme,\n  onClick,\n  tabIndex,\n}) {\n  const {\n    userId,\n  } = currentUser;\n  const { isBroadcast, isFrozen } = channel;\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-preview',\n        isActive ? 'sendbird-channel-preview--active' : '',\n      ].join(' ')}\n      role=\"link\"\n      onClick={onClick}\n      onKeyPress={onClick}\n      tabIndex={tabIndex}\n    >\n      <div\n        className=\"sendbird-channel-preview__avatar\"\n      >\n        <ChannelAvatar\n          channel={channel}\n          userId={userId}\n          theme={theme}\n        />\n      </div>\n      <div className=\"sendbird-channel-preview__content\">\n        <div className=\"sendbird-channel-preview__content__upper\">\n          <div className=\"sendbird-channel-preview__content__upper__header\">\n            {\n              isBroadcast\n              && (\n                <div className=\"sendbird-channel-preview__content__upper__header__broadcast-icon\">\n                  <Icon\n                    type={IconTypes.BROADCAST}\n                    fillColor={IconColors.SECONDARY}\n                    height=\"16px\"\n                    width=\"16px\"\n                  />\n                </div>\n              )\n            }\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__channel-name\"\n              type={LabelTypography.SUBTITLE_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {utils.getChannelTitle(channel, userId, stringSet)}\n            </Label>\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__total-members\"\n              type={LabelTypography.CAPTION_2}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {utils.getTotalMembers(channel)}\n            </Label>\n            {\n              isFrozen\n              && (\n                <div title=\"Frozen\" className=\"sendbird-channel-preview__content__upper__header__frozen-icon\">\n                  <Icon\n                    type={IconTypes.FREEZE}\n                    fillColor={IconColors.PRIMARY}\n                    height={12}\n                    width={12}\n                  />\n                </div>\n              )\n            }\n          </div>\n          <Label\n            className=\"sendbird-channel-preview__content__upper__last-message-at\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {utils.getLastMessageCreatedAt(channel)}\n          </Label>\n        </div>\n        <div className=\"sendbird-channel-preview__content__lower\">\n          <Label\n            className=\"sendbird-channel-preview__content__lower__last-message\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_3}\n          >\n            {utils.getLastMessage(channel)}\n          </Label>\n          <div className=\"sendbird-channel-preview__content__lower__unread-message-count\">\n            {\n              utils.getChannelUnreadMessageCount(channel) // return number\n                ? <Badge count={utils.getChannelUnreadMessageCount(channel)} />\n                : null\n            }\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"sendbird-channel-preview__action\"\n      >\n        {ChannelAction}\n      </div>\n    </div>\n  );\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool,\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string,\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number,\n};\n\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: () => { },\n  tabIndex: 0,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport IconButton from '../IconButton';\n\nimport './index.scss';\nimport Avatar from '../Avatar/index';\n\nexport default function ChannelHeader({\n  user,\n  renderHeader,\n  iconButton,\n  onEdit,\n  allowProfileEdit,\n}) {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-header',\n        allowProfileEdit ? 'sendbird-channel-header--allow-edit' : '',\n      ].join(' ')}\n    >\n      {\n        renderHeader\n          ? renderHeader()\n          : (\n            <div\n              className=\"sendbird-channel-header__title\"\n              role=\"button\"\n              onClick={onEdit}\n              onKeyDown={onEdit}\n              tabIndex=\"0\"\n            >\n              <div className=\"sendbird-channel-header__title__left\">\n                <Avatar\n                  width=\"32px\"\n                  height=\"32px\"\n                  src={user.profileUrl}\n                  alt={user.nickname}\n                />\n              </div>\n              <div className=\"sendbird-channel-header__title__right\">\n                <Label\n                  className=\"sendbird-channel-header__title__right__name\"\n                  type={LabelTypography.SUBTITLE_2}\n                  color={LabelColors.ONBACKGROUND_1}\n                >\n                  {user.nickname || stringSet.NO_NAME}\n                </Label>\n                <Label\n                  className=\"sendbird-channel-header__title__right__user-id\"\n                  type={LabelTypography.BODY_2}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {user.userId}\n                </Label>\n              </div>\n            </div>\n          )\n      }\n      <div className=\"sendbird-channel-header__right-icon\">\n        {iconButton}\n      </div>\n    </div>\n  );\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string,\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.instanceOf(IconButton),\n  ]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool,\n};\n\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false,\n};\n","import React, {\n  ReactElement,\n  useRef,\n  useState,\n  useContext,\n} from 'react';\nimport './index.scss';\n\nimport Modal from '../Modal';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport Input, { InputLabel } from '../Input';\nimport Avatar from '../Avatar';\nimport Icon, { IconTypes } from '../Icon';\nimport { Type as ButtonType } from '../Button/type';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport TextButton from '../TextButton';\nimport { SendbirdTypes } from '../../types';\nimport { noop } from '../../utils/utils';\n\ninterface Props {\n  user: SendbirdTypes['User'];\n  theme?: string;\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  changeTheme?(theme: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nexport function EditUserProfile({\n  user,\n  theme = 'light',\n  onCancel,\n  onSubmit,\n  changeTheme = noop,\n  onThemeChange = null,\n}: Props): ReactElement {\n  const hiddenInputRef = useRef(null);\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n\n  return (\n    <Modal\n      titleText={stringSet.EDIT_PROFILE__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      type={ButtonType.PRIMARY}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (user.nickname !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        onSubmit(inputRef.current.value, newFile);\n        onCancel();\n      }}\n    >\n      <form\n        className=\"sendbird-edit-user-profile\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <section className=\"sendbird-edit-user-profile__img\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__IMAGE_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__img__avatar\">\n            <Avatar\n              width=\"80px\"\n              height=\"80px\"\n              src={currentImg || user.profileUrl}\n            />\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"sendbird-edit-user-profile__img__avatar-button\"\n            notUnderline\n            onClick={() => hiddenInputRef.current.click()}\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.EDIT_PROFILE__IMAGE_UPLOAD}\n            </Label>\n          </TextButton>\n        </section>\n        <section className=\"sendbird-edit-user-profile__name\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__NICKNAME_LABEL}\n          </InputLabel>\n          <Input\n            required={user.nickname !== ''}\n            name=\"sendbird-edit-user-profile__name__input\"\n            ref={inputRef}\n            value={user.nickname}\n            placeHolder={stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__userid\">\n          <InputLabel>\n            {/*  userID */}\n            {stringSet.EDIT_PROFILE__USERID_LABEL}\n          </InputLabel>\n          <Input\n            disabled\n            name=\"sendbird-edit-user-profile__userid__input\"\n            value={user.userId}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__theme\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__THEME_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__theme__theme-icon\">\n            {\n              theme === 'dark'\n                ? (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('light');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('light');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_ON}\n                    width={44}\n                    height={24}\n                  />\n                )\n                : (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('dark');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('dark');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_OFF}\n                    width={44}\n                    height={24}\n                  />\n                )\n            }\n          </div>\n        </section>\n      </form>\n    </Modal>\n  );\n}\n\nconst mapStoreToProps = (store) => {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme,\n  };\n};\n\ninterface ConnectedEditUserProfileProps {\n  user: SendbirdTypes['User'];\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nconst ConnectedEditUserProfile: (\n  props: ConnectedEditUserProfileProps\n) => React.Component = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nexport default ConnectedEditUserProfile;\n","import './add-channel.scss';\n\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport IconButton from '../../../ui/IconButton';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport InviteMembers from '../../InviteMembers';\n\nimport {\n  createChannel,\n  createDefaultUserListQuery,\n  isBroadcastChannelEnabled,\n  isSuperGroupChannelEnabled,\n} from './utils';\nimport { CREATE_CHANNEL } from '../dux/actionTypes';\nimport Modal from '../../../ui/Modal';\n\nexport default function AddChannel({\n  sdk,\n  disabled,\n  channelListDispatcher,\n  onBeforeCreateChannel,\n  userId,\n  userFilledApplicationUserListQuery,\n  userListQuery,\n}) {\n  const [showModal, setShowModal] = useState(false);\n  const [step, setStep] = useState(0);\n  const [type, setType] = useState('group');\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  const isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  const isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n\n  return (\n    <>\n      <IconButton\n        height=\"32px\"\n        width=\"32px\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n        disabled={disabled}\n      >\n        <Icon\n          type={IconTypes.CREATE}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </IconButton>\n      {\n        showModal && step === 0 && (\n          <Modal\n            titleText={stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE}\n            hideFooter\n            onCancel={() => { setShowModal(false); }}\n            onSubmit={() => { }}\n          >\n            <div className=\"sendbird-add-channel__rectangle-wrap\">\n              <div\n                className=\"sendbird-add-channel__rectangle\"\n                onClick={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n              >\n                <Icon\n                  className=\"sendbird-add-channel__rectangle__chat-icon\"\n                  type={IconTypes.CHAT}\n                  fillColor={IconColors.PRIMARY}\n                  width=\"28px\"\n                  height=\"28px\"\n                />\n                <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                  {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP}\n                </Label>\n              </div>\n              {\n                isSupergroupAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__supergroup-icon\"\n                      type={IconTypes.SUPERGROUP}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP}\n                    </Label>\n                  </div>\n                )\n              }\n              {\n                isBroadcastAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__broadcast-icon\"\n                      type={IconTypes.BROADCAST}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST}\n                    </Label>\n                  </div>\n                )\n              }\n            </div>\n          </Modal>\n        )\n      }\n      {\n        showModal && step === 1 && (\n          <InviteMembers\n            swapParams={\n              sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback()\n            }\n            titleText={stringSet.MODAL__CREATE_CHANNEL__TITLE}\n            submitText={stringSet.BUTTON__CREATE}\n            closeModal={() => {\n              setStep(0);\n              setShowModal(false);\n            }}\n            idsToFilter={[userId]}\n            userQueryCreator={() => ((userListQuery && typeof userListQuery === 'function')\n              ? userListQuery()\n              : createDefaultUserListQuery({ sdk, userFilledApplicationUserListQuery })\n            )}\n            onSubmit={(selectedUsers) => createChannel(\n              sdk,\n              selectedUsers,\n              onBeforeCreateChannel,\n              userId,\n              type,\n            ).then((channel) => {\n              // maybe - do this in event listener\n              channelListDispatcher({\n                type: CREATE_CHANNEL,\n                payload: channel,\n              });\n            })}\n          />\n        )\n      }\n    </>\n  );\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func,\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func,\n};\n\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null,\n};\n","import React, {\n  useState,\n  useRef,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../ui/ContextMenu';\nimport IconButton from '../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport LeaveChannelModal from '../../ChannelSettings/components/LeaveChannel';\n\nexport default function ChannelPreviewAction({ disabled, onLeaveChannel }) {\n  const parentRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      role=\"button\"\n      style={{ display: 'inline-block' }}\n      onKeyDown={(e) => { e.stopPropagation(); }}\n      tabIndex={0}\n      onClick={(e) => { e.stopPropagation(); }}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown) => (\n          <IconButton\n            ref={parentRef}\n            onClick={toggleDropdown}\n            height=\"32px\"\n            width=\"32px\"\n          >\n            <Icon\n              type={IconTypes.MORE}\n              fillColor={IconColors.PRIMARY}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(closeDropdown) => (\n          <MenuItems\n            parentRef={parentRef}\n            parentContainRef={parentRef}\n            closeDropdown={closeDropdown}\n          >\n            <MenuItem\n              onClick={() => {\n                if (disabled) { return; }\n                setShowModal(true);\n                closeDropdown();\n              }}\n            >\n              {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n            </MenuItem>\n          </MenuItems>\n        )}\n      />\n      {\n        showModal && (\n          <LeaveChannelModal\n            onCloseModal={() => setShowModal(false)}\n            onLeaveChannel={onLeaveChannel}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n};\n\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Placeholder from '../../../ui/PlaceHolder';\n\nexport default function ChannelsPlaceholder({\n  type,\n}) {\n  return (\n    <div className=\"sendbird-channel-list\">\n      <Placeholder type={type} />\n    </div>\n  );\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = (channel) => {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_CHANGED,\n      payload: channel,\n    });\n  };\n  ChannelHandler.onChannelDeleted = (channelUrl) => {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_DELETED,\n      payload: channelUrl,\n    });\n  };\n  ChannelHandler.onUserJoined = (channel) => {\n    logger.info('ChannelList: onUserJoined', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_JOINED,\n        payload: channel,\n      });\n    }\n  };\n  ChannelHandler.onUserBanned = (channel, user) => {\n    const { currentUser } = sdk;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: true,\n        },\n      });\n    } else {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: false,\n        },\n      });\n    }\n  };\n  ChannelHandler.onUserLeft = (channel, leftUser) => {\n    const { currentUser } = sdk;\n    const isMe = (currentUser.userId === leftUser.userId);\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: channelActions.ON_USER_LEFT,\n      payload: {\n        channel,\n        isMe,\n      },\n    });\n  };\n\n  ChannelHandler.onReadStatus = (channel) => {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: channelActions.ON_READ_RECEIPT_UPDATED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = (channel) => {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = (channel, message) => {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = (channel) => {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_ARCHIVED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = (channel) => {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_FROZEN,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = (channel) => {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_UNFROZEN,\n      payload: channel,\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n}) {\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next((response, error) => {\n      const swapParams = sdk.getErrorFirstCallback();\n      let channelList = response;\n      let err = error;\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n      logger.info('ChannelList - fetched channels', channelList);\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n        return;\n      }\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sorted = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n      onChannelSelect(sorted[0]);\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: sorted,\n      });\n      if (channelList && typeof channelList.forEach === 'function') {\n        logger.info('ChannelList - mark all channels as delivered');\n        channelList.forEach((c) => c.markAsDelivered());\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subScriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subScriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url,\n    });\n  }));\n\n  subScriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subScriber;\n};\n\nexport default setupChannelList;\n","import React, { useEffect, useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport * as userActions from '../../lib/dux/user/actionTypes';\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\n\nimport * as channelListActions from './dux/actionTypes';\nimport channelListInitialState from './dux/initialState';\nimport channelListReducers from './dux/reducers';\n\nimport ChannelPreview from '../../ui/ChannelPreview';\nimport ChannelHeader from '../../ui/ChannelHeader';\nimport EditUserProfile from '../../ui/EditUserProfile';\nimport PlaceholderTypes from '../../ui/PlaceHolder/type';\n\nimport AddChannel from './components/AddChannel';\nimport ChannelPreviewAction from './components/ChannelPreviewAction';\nimport PlaceHolder from './components/Placeholder';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from './utils';\nimport { uuidv4 } from '../../utils/uuid';\n\nimport './index.scss';\n\nconst noop = () => { };\n\nfunction ChannelList(props) {\n  const {\n    stores: { sdkStore = {}, userStore = {} },\n    config: {\n      userId,\n      isOnline,\n      userListQuery,\n      logger,\n      pubSub,\n      theme,\n    },\n    dispatchers: {\n      userDispatcher,\n    },\n    queries = {},\n    renderChannelPreview,\n    renderHeader,\n    renderUserProfile,\n    disableUserProfile,\n    allowProfileEdit,\n    sortChannelList,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    onChannelSelect,\n  } = props;\n  const { config = {} } = props;\n  // enable if it is true atleast once(both are flase by default)\n  const enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  const { sdk = {} } = sdkStore;\n  const userFilledChannelListQuery = queries.channelListQuery;\n  const userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n\n  const sdkError = sdkStore.error;\n  const sdkIntialized = sdkStore.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  );\n  const [user, setUser] = useState({});\n  const [channelSource, setChannelSource] = useState({});\n  const [showProfileEdit, setShowProfileEdit] = useState(false);\n  const [sdkChannelHandlerId, setSdkChannelHandlerId] = useState(null);\n\n  const { loading, currentChannel } = channelListStore;\n\n  useEffect(() => {\n    setUser(userStore.user);\n  }, [userStore.user]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    setSdkChannelHandlerId(uuidv4);\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource({});\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  useEffect(() => {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) { return; }\n    sdk.GroupChannel.getChannel(currentChannel, (groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n\n  return (\n    <UserProfileProvider\n      className=\"sendbird-channel-list\"\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      <div className=\"sendbird-channel-list__header\">\n        <ChannelHeader\n          renderHeader={renderHeader}\n          user={user}\n          onEdit={() => {\n            if (enableEditProfile) {\n              setShowProfileEdit(true);\n            }\n          }}\n          allowProfileEdit={enableEditProfile}\n          iconButton={(\n            <AddChannel\n              disabled={!isOnline}\n              userListQuery={userListQuery}\n              sdk={sdk}\n              channelListDispatcher={channelListDispatcher}\n              userId={userId}\n              userFilledApplicationUserListQuery={userFilledApplicationUserListQuery}\n              onBeforeCreateChannel={onBeforeCreateChannel}\n            />\n          )}\n        />\n      </div>\n      {\n        showProfileEdit && (\n          <EditUserProfile\n            onThemeChange={onThemeChange}\n            user={user}\n            onCancel={() => { setShowProfileEdit(false); }}\n            onSubmit={(newName, newFile) => {\n              sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, (updatedUser) => {\n                userDispatcher({ type: userActions.UPDATE_USER_INFO, payload: updatedUser });\n                if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n                  onProfileEditSuccess(updatedUser);\n                }\n              });\n            }}\n          />\n        )\n      }\n      <div\n        className=\"sendbird-channel-list__body\"\n        onScroll={(e) => {\n          const fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n          if (fetchMore && channelSource.hasNext) {\n            logger.info('ChannelList: Fetching more channels');\n            channelListDispatcher({\n              type: channelListActions.FETCH_CHANNELS_START,\n            });\n            channelSource.next((response, error) => {\n              const swapParams = sdk.getErrorFirstCallback();\n              let channelList = response;\n              let err = error;\n              if (swapParams) {\n                channelList = error;\n                err = response;\n              }\n              if (err) {\n                logger.info('ChannelList: Fetching channels failed', err);\n                channelListDispatcher({\n                  type: channelListActions.FETCH_CHANNELS_FAILURE,\n                  payload: channelList,\n                });\n                return;\n              }\n              logger.info('ChannelList: Fetching channels successful', channelList);\n              channelListDispatcher({\n                type: channelListActions.FETCH_CHANNELS_SUCCESS,\n                payload: channelList,\n              });\n              if (channelList && typeof channelList.forEach === 'function') {\n                logger.info('ChannelList: Marking all channels as read');\n                channelList.forEach((c) => c.markAsDelivered());\n              }\n            });\n          }\n        }}\n      >\n        {\n          (sdkError) && (\n            <PlaceHolder type={PlaceholderTypes.WRONG} />\n          )\n        }\n        {/*\n          To do: Implement windowing\n          Implement windowing if you are dealing with large number of messages/channels\n          https://github.com/bvaughn/react-window -> recommendation\n          We hesitate to bring one more dependency to our library,\n          we are planning to implement it inside the library\n        */}\n        <div>\n          {\n            sortedChannels && sortedChannels.map((channel, idx) => {\n              const onLeaveChannel = (c, cb) => {\n                logger.info('ChannelList: Leaving channel', c);\n                c.leave()\n                  .then((res) => {\n                    logger.info('ChannelList: Leaving channel success', res);\n                    if (cb && typeof cb === 'function') {\n                      cb(res, null);\n                    }\n                    channelListDispatcher({\n                      type: channelListActions.LEAVE_CHANNEL_SUCCESS,\n                      payload: channel.url,\n                    });\n                  })\n                  .catch((err) => {\n                    logger.error('ChannelList: Leaving channel failed', err);\n                    if (cb && typeof cb === 'function') {\n                      cb(null, err);\n                    }\n                  });\n              };\n\n              const onClick = () => {\n                if (!isOnline) { return; }\n                logger.info('ChannelList: Clicked on channel:', channel);\n                channelListDispatcher({\n                  type: channelListActions.SET_CURRENT_CHANNEL,\n                  payload: channel.url,\n                });\n              };\n\n              return (\n                (renderChannelPreview)\n                  ? (\n                    // eslint-disable-next-line\n                    <div key={channel.url} onClick={onClick}>\n                      {renderChannelPreview({ channel, onLeaveChannel })}\n                    </div>\n                  )\n                  : (\n                    <ChannelPreview\n                      key={channel.url}\n                      tabIndex={idx}\n                      onClick={onClick}\n                      channel={channel}\n                      currentUser={user}\n                      theme={theme}\n                      isActive={channel.url === currentChannel}\n                      // todo - potential performance hit refactor\n                      ChannelAction={(\n                        <ChannelPreviewAction\n                          disabled={!isOnline}\n                          onLeaveChannel={() => onLeaveChannel(channel)}\n                        />\n                      )}\n                    />\n                  )\n              );\n            })\n          }\n        </div>\n        {\n          (!sdkIntialized || loading) && (\n            <PlaceHolder type={PlaceholderTypes.LOADING} />\n          )\n        }\n        {\n          //  placeholder\n          (!allChannels || allChannels.length === 0) && (\n            <PlaceHolder type={PlaceholderTypes.NO_CHANNELS} />\n          )\n        }\n      </div>\n    </UserProfileProvider>\n  );\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({}),\n    }),\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func,\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func,\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func,\n    }),\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string,\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  onChannelSelect: PropTypes.func,\n};\n\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop,\n};\n\nexport default withSendbirdContext(ChannelList);\n"]},"metadata":{},"sourceType":"module"}