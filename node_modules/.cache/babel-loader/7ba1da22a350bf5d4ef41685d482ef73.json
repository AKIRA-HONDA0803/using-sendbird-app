{"ast":null,"code":"import { a as _objectSpread2, e as _toConsumableArray, c as LocalizationContext, w as withSendbirdContext, b as _slicedToArray, u as uuidv4 } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useContext, useRef, useState, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { U as UPDATE_USER_INFO } from './actionTypes-3af77038.js';\nimport { i as filterChannelListParams, j as getChannelsWithUpsertedChannel, t as truncateString, I as IconButton, M as Modal, T as Type, a as TextButton, C as ContextMenu, b as MenuItems, c as MenuItem, k as CREATE_CHANNEL$1, l as UPDATE_USER_MESSAGE, L as LEAVE_CHANNEL, S as SEND_MESSAGE_START, h as UserProfileProvider } from './index-cb0d7936.js';\nimport { C as ChannelAvatar } from './index-db1485c0.js';\nimport { B as Badge, i as isBroadcastChannelEnabled, a as isSuperGroupChannelEnabled, I as InviteMembers, c as createDefaultUserListQuery, b as createChannel, L as LeaveChannel } from './LeaveChannel-42fd86b9.js';\nimport { g as format, h as LabelStringSet, I as Icon, c as IconTypes, d as IconColors, L as Label, a as LabelTypography, b as LabelColors, A as Avatar, P as PlaceHolder, f as PlaceHolderTypes } from './index-fe1a6d27.js';\nimport { i as isToday, a as isYesterday } from './index-d3cbd48c.js';\nimport { I as InputLabel, a as Input, n as noop$1 } from './index-1fe82074.js';\nimport 'react-dom';\nimport './utils-7b22e0fc.js';\nimport './index-0cc16758.js';\nvar RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nvar CREATE_CHANNEL = 'CREATE_CHANNEL';\nvar LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nvar HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\nvar FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nvar FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nvar FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\nvar INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nvar INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nvar INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\nvar ON_USER_JOINED = 'ON_USER_JOINED';\nvar ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nvar ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nvar ON_USER_LEFT = 'ON_USER_LEFT';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nvar ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\nvar CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nvar CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\nvar channelListInitialState = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: ''\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case INIT_CHANNELS_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n\n    case RESET_CHANNEL_LIST:\n      return channelListInitialState;\n\n    case INIT_CHANNELS_SUCCESS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        initialized: true,\n        loading: false,\n        allChannels: action.payload,\n        currentChannel: action.payload && action.payload.length && action.payload.length > 0 ? action.payload[0].url : null\n      });\n\n    case FETCH_CHANNELS_SUCCESS:\n      {\n        var currentChannels = state.allChannels.map(function (c) {\n          return c.url;\n        });\n        var filteredChannels = action.payload.filter(function (_ref) {\n          var url = _ref.url;\n          return !currentChannels.find(function (c) {\n            return c === url;\n          });\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [].concat(_toConsumableArray(state.allChannels), _toConsumableArray(filteredChannels))\n        });\n      }\n\n    case CREATE_CHANNEL:\n      {\n        var channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel.url\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channel.url,\n          allChannels: [channel].concat(_toConsumableArray(state.allChannels.filter(function (ch) {\n            return ch.url !== channel.url;\n          })))\n        });\n      }\n\n    case ON_CHANNEL_ARCHIVED:\n      {\n        var _channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel)\n            });\n          }\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: _channel.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel.url ? 1 : 0].url : state.currentChannel,\n          allChannels: state.allChannels.filter(function (_ref2) {\n            var url = _ref2.url;\n            return url !== _channel.url;\n          })\n        });\n      }\n\n    case LEAVE_CHANNEL_SUCCESS:\n    case ON_CHANNEL_DELETED:\n      {\n        var channelUrl = action.payload;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channelUrl === state.currentChannel ? state.allChannels[0].url : state.currentChannel,\n          allChannels: state.allChannels.filter(function (_ref3) {\n            var url = _ref3.url;\n            return url !== channelUrl;\n          })\n        });\n      }\n\n    case ON_USER_LEFT:\n      {\n        var _action$payload = action.payload,\n            _channel2 = _action$payload.channel,\n            isMe = _action$payload.isMe;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel2, state.currentUserId)) {\n            var _filteredChannels2 = getChannelsWithUpsertedChannel(state.allChannels, _channel2);\n\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              currentChannel: isMe && _channel2.url === state.currentChannel ? _filteredChannels2[0].url : state.currentChannel,\n              allChannels: _filteredChannels2\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel2.url === state.currentChannel ? state.allChannels[0].url : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref4) {\n              var url = _ref4.url;\n              return url !== _channel2.url;\n            })\n          });\n        }\n\n        var _filteredChannels = state.allChannels.filter(function (c) {\n          return !(c.url === _channel2.url && isMe);\n        });\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: isMe && _channel2.url === state.currentChannel ? _filteredChannels[0].url : state.currentChannel,\n          allChannels: _filteredChannels\n        });\n      }\n\n    case ON_USER_JOINED:\n    case ON_CHANNEL_CHANGED:\n    case ON_READ_RECEIPT_UPDATED:\n    case ON_DELIVERY_RECEIPT_UPDATED:\n      {\n        var _state$allChannels = state.allChannels,\n            allChannels = _state$allChannels === void 0 ? [] : _state$allChannels;\n        var _channel3 = action.payload;\n        var unreadMessageCount = _channel3.unreadMessageCount;\n        if (!_channel3.lastMessage) return state;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel3, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(allChannels, _channel3)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel3.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel3.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref5) {\n              var url = _ref5.url;\n              return url !== _channel3.url;\n            })\n          });\n        } // if its only an unread message count change, dont push to top\n\n\n        if (unreadMessageCount === 0) {\n          var currentChannel = allChannels.find(function (_ref6) {\n            var url = _ref6.url;\n            return url === _channel3.url;\n          });\n          var currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n\n          if (currentUnreadCount === 0) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: state.allChannels.map(function (ch) {\n                return ch.url === _channel3.url ? _channel3 : ch;\n              })\n            });\n          }\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [_channel3].concat(_toConsumableArray(state.allChannels.filter(function (_ref7) {\n            var url = _ref7.url;\n            return url !== action.payload.url;\n          })))\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentChannel: action.payload\n      });\n\n    case SHOW_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: true\n      });\n\n    case HIDE_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: false\n      });\n\n    case ON_LAST_MESSAGE_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allChannels: state.allChannels.map(function (channel) {\n          return channel.url === action.payload.url ? action.payload : channel;\n        })\n      });\n\n    case ON_CHANNEL_FROZEN:\n      {\n        var _channel4 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel4, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel4)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel4.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel4.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref8) {\n              var url = _ref8.url;\n              return url !== _channel4.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel4.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var _channel5 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel5, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel5)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel5.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel5.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n            : state.currentChannel,\n            allChannels: state.allChannels.filter(function (_ref9) {\n              var url = _ref9.url;\n              return url !== _channel5.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel5.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case CHANNEL_REPLACED_TO_TOP:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [action.payload].concat(_toConsumableArray(state.allChannels.filter(function (channel) {\n            return channel.url !== action.payload.url;\n          })))\n        });\n      }\n\n    case CHANNEL_LIST_PARAMS_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar getChannelTitle = function getChannelTitle() {\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n\n  if (!channel || !channel.name && !channel.members) {\n    return stringSet.NO_TITLE;\n  }\n\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members.filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\n\nvar getLastMessageCreatedAt = function getLastMessageCreatedAt(channel) {\n  if (!channel || !channel.lastMessage) {\n    return '';\n  }\n\n  var date = channel.lastMessage.createdAt;\n\n  if (isToday(date)) {\n    return format(date, 'p');\n  }\n\n  if (isYesterday(date)) {\n    return 'Yesterday';\n  }\n\n  return format(date, 'MMM dd');\n};\n\nvar getTotalMembers = function getTotalMembers(channel) {\n  return channel && channel.memberCount ? channel.memberCount : 0;\n};\n\nvar getPrettyLastMessage = function getPrettyLastMessage() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var MAXLEN = 30;\n  var messageType = message.messageType,\n      name = message.name;\n\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n\n  return message.message;\n};\n\nvar getLastMessage = function getLastMessage(channel) {\n  return channel && channel.lastMessage ? getPrettyLastMessage(channel.lastMessage) : '';\n};\n\nvar getChannelUnreadMessageCount = function getChannelUnreadMessageCount(channel) {\n  return channel && channel.unreadMessageCount ? channel.unreadMessageCount : 0;\n};\n\nfunction ChannelPreview(_ref) {\n  var channel = _ref.channel,\n      currentUser = _ref.currentUser,\n      isActive = _ref.isActive,\n      ChannelAction = _ref.ChannelAction,\n      theme = _ref.theme,\n      onClick = _ref.onClick,\n      tabIndex = _ref.tabIndex;\n  var userId = currentUser.userId;\n  var isBroadcast = channel.isBroadcast,\n      isFrozen = channel.isFrozen;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-preview', isActive ? 'sendbird-channel-preview--active' : ''].join(' '),\n    role: \"link\",\n    onClick: onClick,\n    onKeyPress: onClick,\n    tabIndex: tabIndex\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header\"\n  }, isBroadcast && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.SECONDARY,\n    height: \"16px\",\n    width: \"16px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, getChannelTitle(channel, userId, stringSet)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__total-members\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getTotalMembers(channel)), isFrozen && /*#__PURE__*/React__default.createElement(\"div\", {\n    title: \"Frozen\",\n    className: \"sendbird-channel-preview__content__upper__header__frozen-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    height: 12,\n    width: 12\n  }))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getLastMessageCreatedAt(channel))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__lower__last-message\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, getLastMessage(channel)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count\"\n  }, getChannelUnreadMessageCount(channel) // return number\n  ? /*#__PURE__*/React__default.createElement(Badge, {\n    count: getChannelUnreadMessageCount(channel)\n  }) : null))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__action\"\n  }, ChannelAction));\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number\n};\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: function onClick() {},\n  tabIndex: 0\n};\n\nfunction ChannelHeader(_ref) {\n  var user = _ref.user,\n      renderHeader = _ref.renderHeader,\n      iconButton = _ref.iconButton,\n      onEdit = _ref.onEdit,\n      allowProfileEdit = _ref.allowProfileEdit;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-header', allowProfileEdit ? 'sendbird-channel-header--allow-edit' : ''].join(' ')\n  }, renderHeader ? renderHeader() : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title\",\n    role: \"button\",\n    onClick: onEdit,\n    onKeyDown: onEdit,\n    tabIndex: \"0\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"32px\",\n    height: \"32px\",\n    src: user.profileUrl,\n    alt: user.nickname\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__user-id\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__right-icon\"\n  }, iconButton));\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([PropTypes.element, PropTypes.instanceOf(IconButton)]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool\n};\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false\n};\n\nfunction EditUserProfile(_a) {\n  var user = _a.user,\n      _b = _a.theme,\n      theme = _b === void 0 ? 'light' : _b,\n      onCancel = _a.onCancel,\n      _onSubmit = _a.onSubmit,\n      _c = _a.changeTheme,\n      changeTheme = _c === void 0 ? noop$1 : _c,\n      _d = _a.onThemeChange,\n      onThemeChange = _d === void 0 ? null : _d;\n  var hiddenInputRef = useRef(null);\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _e = useState(null),\n      currentImg = _e[0],\n      setCurrentImg = _e[1];\n\n  var _f = useState(null),\n      newFile = _f[0],\n      setNewFile = _f[1];\n\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.EDIT_PROFILE__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    type: Type.PRIMARY,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (user.nickname !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(inputRef.current.value, newFile);\n\n      onCancel();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"sendbird-edit-user-profile\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__img\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__IMAGE_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__img__avatar\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"80px\",\n    height: \"80px\",\n    src: currentImg || user.profileUrl\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-edit-user-profile__img__avatar-button\",\n    notUnderline: true,\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    }\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.EDIT_PROFILE__IMAGE_UPLOAD))), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__name\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__NICKNAME_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    required: user.nickname !== '',\n    name: \"sendbird-edit-user-profile__name__input\",\n    ref: inputRef,\n    value: user.nickname,\n    placeHolder: stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__userid\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__USERID_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    disabled: true,\n    name: \"sendbird-edit-user-profile__userid__input\",\n    value: user.userId\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__theme\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__THEME_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__theme__theme-icon\"\n  }, theme === 'dark' ? /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('light');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('light');\n      }\n    },\n    type: IconTypes.TOGGLE_ON,\n    width: 44,\n    height: 24\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('dark');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('dark');\n      }\n    },\n    type: IconTypes.TOGGLE_OFF,\n    width: 44,\n    height: 24\n  })))));\n}\n\nvar mapStoreToProps = function mapStoreToProps(store) {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme\n  };\n};\n\nvar ConnectedEditUserProfile = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nfunction AddChannel(_ref) {\n  var sdk = _ref.sdk,\n      disabled = _ref.disabled,\n      channelListDispatcher = _ref.channelListDispatcher,\n      onBeforeCreateChannel = _ref.onBeforeCreateChannel,\n      userId = _ref.userId,\n      userFilledApplicationUserListQuery = _ref.userFilledApplicationUserListQuery,\n      userListQuery = _ref.userListQuery;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      step = _useState4[0],\n      setStep = _useState4[1];\n\n  var _useState5 = useState('group'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  var isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  var isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(IconButton, {\n    height: \"32px\",\n    width: \"32px\",\n    onClick: function onClick() {\n      setShowModal(true);\n    },\n    disabled: disabled\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CREATE,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), showModal && step === 0 && /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE,\n    hideFooter: true,\n    onCancel: function onCancel() {\n      setShowModal(false);\n    },\n    onSubmit: function onSubmit() {}\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle-wrap\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('group');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('group');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__chat-icon\",\n    type: IconTypes.CHAT,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP)), isSupergroupAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('supergroup');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('supergroup');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__supergroup-icon\",\n    type: IconTypes.SUPERGROUP,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP)), isBroadcastAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('broadcast');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('broadcast');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__broadcast-icon\",\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST)))), showModal && step === 1 && /*#__PURE__*/React__default.createElement(InviteMembers, {\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    titleText: stringSet.MODAL__CREATE_CHANNEL__TITLE,\n    submitText: stringSet.BUTTON__CREATE,\n    closeModal: function closeModal() {\n      setStep(0);\n      setShowModal(false);\n    },\n    idsToFilter: [userId],\n    userQueryCreator: function userQueryCreator() {\n      return userListQuery && typeof userListQuery === 'function' ? userListQuery() : createDefaultUserListQuery({\n        sdk: sdk,\n        userFilledApplicationUserListQuery: userFilledApplicationUserListQuery\n      });\n    },\n    onSubmit: function onSubmit(selectedUsers) {\n      return createChannel(sdk, selectedUsers, onBeforeCreateChannel, userId, type).then(function (channel) {\n        // maybe - do this in event listener\n        channelListDispatcher({\n          type: CREATE_CHANNEL,\n          payload: channel\n        });\n      });\n    }\n  }));\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func\n};\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null\n};\n\nfunction ChannelPreviewAction(_ref) {\n  var disabled = _ref.disabled,\n      onLeaveChannel = _ref.onLeaveChannel;\n  var parentRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: function onKeyDown(e) {\n      e.stopPropagation();\n    },\n    tabIndex: 0,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    }\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        ref: parentRef,\n        onClick: toggleDropdown,\n        height: \"32px\",\n        width: \"32px\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: parentRef,\n        parentContainRef: parentRef,\n        closeDropdown: closeDropdown\n      }, /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          setShowModal(true);\n          closeDropdown();\n        }\n      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));\n    }\n  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    onCloseModal: function onCloseModal() {\n      return setShowModal(false);\n    },\n    onLeaveChannel: onLeaveChannel\n  }));\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired\n};\nChannelPreviewAction.defaultProps = {\n  disabled: false\n};\n\nfunction ChannelsPlaceholder(_ref) {\n  var type = _ref.type;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: type\n  }));\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\nvar createEventHandler = function createEventHandler(_ref) {\n  var sdk = _ref.sdk,\n      sdkChannelHandlerId = _ref.sdkChannelHandlerId,\n      channelListDispatcher = _ref.channelListDispatcher,\n      logger = _ref.logger;\n  var ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = function (channel) {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_CHANGED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelDeleted = function (channelUrl) {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: ON_CHANNEL_DELETED,\n      payload: channelUrl\n    });\n  };\n\n  ChannelHandler.onUserJoined = function (channel) {\n    logger.info('ChannelList: onUserJoined', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_USER_JOINED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onUserBanned = function (channel, user) {\n    var currentUser = sdk.currentUser;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: true\n        }\n      });\n    } else {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: false\n        }\n      });\n    }\n  };\n\n  ChannelHandler.onUserLeft = function (channel, leftUser) {\n    var currentUser = sdk.currentUser;\n    var isMe = currentUser.userId === leftUser.userId;\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: ON_USER_LEFT,\n      payload: {\n        channel: channel,\n        isMe: isMe\n      }\n    });\n  };\n\n  ChannelHandler.onReadStatus = function (channel) {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: ON_READ_RECEIPT_UPDATED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = function (channel) {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = function (channel, message) {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = function (channel) {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_ARCHIVED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = function (channel) {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_FROZEN,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = function (channel) {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_UNFROZEN,\n      payload: channel\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nvar createChannelListQuery = function createChannelListQuery(_ref2) {\n  var sdk = _ref2.sdk,\n      _ref2$userFilledChann = _ref2.userFilledChannelListQuery,\n      userFilledChannelListQuery = _ref2$userFilledChann === void 0 ? {} : _ref2$userFilledChann;\n  var channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach(function (key) {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\n\n\nfunction setupChannelList(_ref3) {\n  var sdk = _ref3.sdk,\n      sdkChannelHandlerId = _ref3.sdkChannelHandlerId,\n      channelListDispatcher = _ref3.channelListDispatcher,\n      setChannelSource = _ref3.setChannelSource,\n      onChannelSelect = _ref3.onChannelSelect,\n      userFilledChannelListQuery = _ref3.userFilledChannelListQuery,\n      logger = _ref3.logger,\n      sortChannelList = _ref3.sortChannelList;\n\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      sdkChannelHandlerId: sdkChannelHandlerId,\n      logger: logger\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', {\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  var channelListQuery = createChannelListQuery({\n    sdk: sdk,\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n  channelListDispatcher({\n    type: INIT_CHANNELS_START\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery: channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId\n      }\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n\n  if (channelListQuery.hasNext) {\n    channelListQuery.next(function (response, error) {\n      var swapParams = sdk.getErrorFirstCallback();\n      var channelList = response;\n      var err = error;\n\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n\n      logger.info('ChannelList - fetched channels', channelList);\n\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: INIT_CHANNELS_FAILURE\n        });\n        return;\n      } // select first channel\n\n\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      var sorted = channelList;\n\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n\n      onChannelSelect(sorted[0]);\n      channelListDispatcher({\n        type: INIT_CHANNELS_SUCCESS,\n        payload: sorted\n      });\n\n      if (channelList && typeof channelList.forEach === 'function') {\n        logger.info('ChannelList - mark all channels as delivered');\n        channelList.forEach(function (c) {\n          return c.markAsDelivered();\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {//\n    }\n  });\n};\n\nvar pubSubHandler = function pubSubHandler(pubSub, channelListDispatcher) {\n  var subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(CREATE_CHANNEL$1, pubSub.subscribe(CREATE_CHANNEL$1, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel\n    });\n  }));\n  subScriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n    var _updatedChannel$lastM;\n\n    var channel = msg.channel,\n        message = msg.message;\n    var updatedChannel = channel;\n\n    if ((updatedChannel === null || updatedChannel === void 0 ? void 0 : (_updatedChannel$lastM = updatedChannel.lastMessage) === null || _updatedChannel$lastM === void 0 ? void 0 : _updatedChannel$lastM.messageId) === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n\n    if (channel) {\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel\n      });\n    }\n  }));\n  subScriber.set(LEAVE_CHANNEL, pubSub.subscribe(LEAVE_CHANNEL, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url\n    });\n  }));\n  subScriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: CHANNEL_REPLACED_TO_TOP,\n      payload: channel\n    });\n  }));\n  return subScriber;\n};\n\nvar noop = function noop() {};\n\nfunction ChannelList(props) {\n  var _props$stores = props.stores,\n      _props$stores$sdkStor = _props$stores.sdkStore,\n      sdkStore = _props$stores$sdkStor === void 0 ? {} : _props$stores$sdkStor,\n      _props$stores$userSto = _props$stores.userStore,\n      userStore = _props$stores$userSto === void 0 ? {} : _props$stores$userSto,\n      _props$config = props.config,\n      userId = _props$config.userId,\n      isOnline = _props$config.isOnline,\n      userListQuery = _props$config.userListQuery,\n      logger = _props$config.logger,\n      pubSub = _props$config.pubSub,\n      theme = _props$config.theme,\n      userDispatcher = props.dispatchers.userDispatcher,\n      _props$queries = props.queries,\n      queries = _props$queries === void 0 ? {} : _props$queries,\n      renderChannelPreview = props.renderChannelPreview,\n      renderHeader = props.renderHeader,\n      renderUserProfile = props.renderUserProfile,\n      disableUserProfile = props.disableUserProfile,\n      allowProfileEdit = props.allowProfileEdit,\n      sortChannelList = props.sortChannelList,\n      onProfileEditSuccess = props.onProfileEditSuccess,\n      onThemeChange = props.onThemeChange,\n      onBeforeCreateChannel = props.onBeforeCreateChannel,\n      onChannelSelect = props.onChannelSelect;\n  var _props$config2 = props.config,\n      config = _props$config2 === void 0 ? {} : _props$config2; // enable if it is true atleast once(both are flase by default)\n\n  var enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var _sdkStore$sdk = sdkStore.sdk,\n      sdk = _sdkStore$sdk === void 0 ? {} : _sdkStore$sdk;\n  var userFilledChannelListQuery = queries.channelListQuery;\n  var userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n  var sdkError = sdkStore.error;\n  var sdkIntialized = sdkStore.initialized;\n\n  var _useReducer = useReducer(reducer, channelListInitialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      channelListStore = _useReducer2[0],\n      channelListDispatcher = _useReducer2[1];\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      channelSource = _useState4[0],\n      setChannelSource = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showProfileEdit = _useState6[0],\n      setShowProfileEdit = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sdkChannelHandlerId = _useState8[0],\n      setSdkChannelHandlerId = _useState8[1];\n\n  var loading = channelListStore.loading,\n      currentChannel = channelListStore.currentChannel;\n  useEffect(function () {\n    setUser(userStore.user);\n  }, [userStore.user]);\n  useEffect(function () {\n    var subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return function () {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n  useEffect(function () {\n    setSdkChannelHandlerId(uuidv4);\n\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk: sdk,\n        sdkChannelHandlerId: sdkChannelHandlerId,\n        channelListDispatcher: channelListDispatcher,\n        setChannelSource: setChannelSource,\n        onChannelSelect: onChannelSelect,\n        userFilledChannelListQuery: userFilledChannelListQuery,\n        logger: logger,\n        sortChannelList: sortChannelList\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers'); // remove previous channelHandlers\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      } // remove channelSource\n\n\n      setChannelSource({}); // cleanup\n\n      channelListDispatcher({\n        type: RESET_CHANNEL_LIST\n      });\n    }\n\n    return function () {\n      logger.info('ChannelList: Removing channelHandlers');\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n  var allChannels = channelListStore.allChannels;\n  var sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    var warning = \"ChannelList: You have removed/added extra channels on sortChannelList\\n      this could cause unexpected problems\"; // eslint-disable-next-line no-console\n\n    console.warn(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n    logger.warning(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n  }\n\n  useEffect(function () {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) {\n      return;\n    }\n\n    sdk.GroupChannel.getChannel(currentChannel, function (groupChannel) {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-channel-list\",\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__header\"\n  }, /*#__PURE__*/React__default.createElement(ChannelHeader, {\n    renderHeader: renderHeader,\n    user: user,\n    onEdit: function onEdit() {\n      if (enableEditProfile) {\n        setShowProfileEdit(true);\n      }\n    },\n    allowProfileEdit: enableEditProfile,\n    iconButton: /*#__PURE__*/React__default.createElement(AddChannel, {\n      disabled: !isOnline,\n      userListQuery: userListQuery,\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      userId: userId,\n      userFilledApplicationUserListQuery: userFilledApplicationUserListQuery,\n      onBeforeCreateChannel: onBeforeCreateChannel\n    })\n  })), showProfileEdit && /*#__PURE__*/React__default.createElement(ConnectedEditUserProfile, {\n    onThemeChange: onThemeChange,\n    user: user,\n    onCancel: function onCancel() {\n      setShowProfileEdit(false);\n    },\n    onSubmit: function onSubmit(newName, newFile) {\n      sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, function (updatedUser) {\n        userDispatcher({\n          type: UPDATE_USER_INFO,\n          payload: updatedUser\n        });\n\n        if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n          onProfileEditSuccess(updatedUser);\n        }\n      });\n    }\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__body\",\n    onScroll: function onScroll(e) {\n      var fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n\n      if (fetchMore && channelSource.hasNext) {\n        logger.info('ChannelList: Fetching more channels');\n        channelListDispatcher({\n          type: FETCH_CHANNELS_START\n        });\n        channelSource.next(function (response, error) {\n          var swapParams = sdk.getErrorFirstCallback();\n          var channelList = response;\n          var err = error;\n\n          if (swapParams) {\n            channelList = error;\n            err = response;\n          }\n\n          if (err) {\n            logger.info('ChannelList: Fetching channels failed', err);\n            channelListDispatcher({\n              type: FETCH_CHANNELS_FAILURE,\n              payload: channelList\n            });\n            return;\n          }\n\n          logger.info('ChannelList: Fetching channels successful', channelList);\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: channelList\n          });\n\n          if (channelList && typeof channelList.forEach === 'function') {\n            logger.info('ChannelList: Marking all channels as read');\n            channelList.forEach(function (c) {\n              return c.markAsDelivered();\n            });\n          }\n        });\n      }\n    }\n  }, sdkError && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.WRONG\n  }), /*#__PURE__*/React__default.createElement(\"div\", null, sortedChannels && sortedChannels.map(function (channel, idx) {\n    var _onLeaveChannel = function onLeaveChannel(c, cb) {\n      logger.info('ChannelList: Leaving channel', c);\n      c.leave().then(function (res) {\n        logger.info('ChannelList: Leaving channel success', res);\n\n        if (cb && typeof cb === 'function') {\n          cb(res, null);\n        }\n\n        channelListDispatcher({\n          type: LEAVE_CHANNEL_SUCCESS,\n          payload: channel.url\n        });\n      }).catch(function (err) {\n        logger.error('ChannelList: Leaving channel failed', err);\n\n        if (cb && typeof cb === 'function') {\n          cb(null, err);\n        }\n      });\n    };\n\n    var onClick = function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      logger.info('ChannelList: Clicked on channel:', channel);\n      channelListDispatcher({\n        type: SET_CURRENT_CHANNEL,\n        payload: channel.url\n      });\n    };\n\n    return renderChannelPreview ?\n    /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      key: channel.url,\n      onClick: onClick\n    }, renderChannelPreview({\n      channel: channel,\n      onLeaveChannel: _onLeaveChannel\n    })) : /*#__PURE__*/React__default.createElement(ChannelPreview, {\n      key: channel.url,\n      tabIndex: idx,\n      onClick: onClick,\n      channel: channel,\n      currentUser: user,\n      theme: theme,\n      isActive: channel.url === currentChannel // todo - potential performance hit refactor\n      ,\n      ChannelAction: /*#__PURE__*/React__default.createElement(ChannelPreviewAction, {\n        disabled: !isOnline,\n        onLeaveChannel: function onLeaveChannel() {\n          return _onLeaveChannel(channel);\n        }\n      })\n    });\n  })), (!sdkIntialized || loading) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.LOADING\n  }), //  placeholder\n  (!allChannels || allChannels.length === 0) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.NO_CHANNELS\n  })));\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({})\n    })\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func\n    })\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  onChannelSelect: PropTypes.func\n};\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop\n};\nvar ChannelList$1 = withSendbirdContext(ChannelList);\nexport { ChannelList$1 as default };","map":null,"metadata":{},"sourceType":"module"}