{"ast":null,"code":"import { b as _slicedToArray, c as LocalizationContext, e as _toConsumableArray } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { L as Label, a as LabelTypography, b as LabelColors, I as Icon, c as IconTypes, d as IconColors, A as Avatar } from './index-fe1a6d27.js';\nimport { U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile } from './index-cb0d7936.js';\n\nvar InputLabel = function InputLabel(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-input-label\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_1\n  }, children);\n};\n\nInputLabel.propTypes = {\n  children: PropTypes.string.isRequired\n}; // future: add validations? onChange? more props etc etc\n\nvar Input = /*#__PURE__*/React__default.forwardRef(function (props, ref) {\n  var name = props.name,\n      required = props.required,\n      disabled = props.disabled,\n      placeHolder = props.placeHolder,\n      value = props.value;\n\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-input\"\n  }, /*#__PURE__*/React__default.createElement(\"input\", {\n    className: \"sendbird-input__input\",\n    ref: ref,\n    name: name,\n    required: required,\n    disabled: disabled,\n    value: inputValue,\n    onChange: function onChange(e) {\n      setInputValue(e.target.value);\n    }\n  }), placeHolder && !inputValue && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-input__placeholder\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_3\n  }, placeHolder));\n});\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  disabled: PropTypes.bool,\n  placeHolder: PropTypes.string,\n  value: PropTypes.string\n};\nInput.defaultProps = {\n  required: false,\n  disabled: false,\n  placeHolder: '',\n  value: ''\n};\n\nvar noop = function noop() {};\n\nfunction MutedAvatarOverlay(props) {\n  var _a = props.height,\n      height = _a === void 0 ? 24 : _a,\n      _b = props.width,\n      width = _b === void 0 ? 24 : _b;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-muted-avatar\",\n    style: {\n      height: height + \"px\",\n      width: width + \"px\"\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-muted-avatar__icon\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-muted-avatar__bg\",\n    style: {\n      height: height + \"px\",\n      width: width + \"px\"\n    }\n  }), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.MUTE,\n    fillColor: IconColors.WHITE,\n    width: height - 8 + \"px\",\n    height: width - 8 + \"px\"\n  })));\n}\n\nfunction Checkbox(_ref) {\n  var id = _ref.id,\n      checked = _ref.checked,\n      onChange = _ref.onChange;\n\n  var _useState = useState(checked),\n      _useState2 = _slicedToArray(_useState, 2),\n      isChecked = _useState2[0],\n      setCheck = _useState2[1];\n\n  return /*#__PURE__*/React__default.createElement(\"label\", {\n    className: \"sendbird-checkbox\",\n    htmlFor: id\n  }, /*#__PURE__*/React__default.createElement(\"input\", {\n    id: id,\n    type: \"checkbox\",\n    checked: isChecked,\n    onClick: function onClick() {\n      return setCheck(!isChecked);\n    },\n    onChange: onChange\n  }), /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"sendbird-checkbox--checkmark\"\n  }));\n}\n\nCheckbox.propTypes = {\n  id: PropTypes.string,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func\n};\nCheckbox.defaultProps = {\n  id: 'sendbird-checkbox-input',\n  checked: false,\n  onChange: function onChange() {}\n};\n\nfunction UserListItem(_ref) {\n  var className = _ref.className,\n      user = _ref.user,\n      checkBox = _ref.checkBox,\n      disableMessaging = _ref.disableMessaging,\n      currentUser = _ref.currentUser,\n      checked = _ref.checked,\n      _onChange = _ref.onChange,\n      action = _ref.action;\n  var uniqueKey = user.userId;\n  var actionRef = React__default.useRef(null);\n  var parentRef = React__default.useRef(null);\n  var avatarRef = React__default.useRef(null);\n\n  var _useContext = useContext(UserProfileContext),\n      disableUserProfile = _useContext.disableUserProfile,\n      renderUserProfile = _useContext.renderUserProfile;\n\n  var _useContext2 = useContext(LocalizationContext),\n      stringSet = _useContext2.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-user-list-item']).join(' '),\n    ref: parentRef\n  }, user.isMuted && /*#__PURE__*/React__default.createElement(MutedAvatarOverlay, {\n    height: 40,\n    width: 40\n  }), /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-user-list-item__avatar\",\n        ref: avatarRef,\n        src: user.profileUrl,\n        width: \"40px\",\n        height: \"40px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef // for catching location(x, y) of MenuItems\n        ,\n        parentContainRef: avatarRef // for toggling more options(menus & reactions)\n        ,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: user,\n        currentUserId: currentUser,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        disableMessaging: disableMessaging,\n        user: user,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-user-list-item__title\",\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME, currentUser === user.userId && ' (You)'), // if there is now nickname, display userId\n  !user.nickname && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-user-list-item__subtitle\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId), checkBox &&\n  /*#__PURE__*/\n  // eslint-disable-next-line jsx-a11y/label-has-associated-control\n  React__default.createElement(\"label\", {\n    className: \"sendbird-user-list-item__checkbox\",\n    htmlFor: uniqueKey\n  }, /*#__PURE__*/React__default.createElement(Checkbox, {\n    id: uniqueKey,\n    checked: checked,\n    onChange: function onChange(event) {\n      return _onChange(event);\n    }\n  })), user.role === 'operator' && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-user-list-item__operator\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, \"Operator\"), action && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-user-list-item__action\",\n    ref: actionRef\n  }, action({\n    actionRef: actionRef,\n    parentRef: parentRef\n  })));\n}\n\nUserListItem.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  user: PropTypes.shape({\n    userId: PropTypes.string,\n    role: PropTypes.string,\n    isMuted: PropTypes.bool,\n    nickname: PropTypes.string,\n    profileUrl: PropTypes.string\n  }).isRequired,\n  disableMessaging: PropTypes.bool,\n  currentUser: PropTypes.string,\n  action: PropTypes.element,\n  checkBox: PropTypes.bool,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func\n};\nUserListItem.defaultProps = {\n  className: '',\n  currentUser: '',\n  checkBox: false,\n  disableMessaging: false,\n  checked: false,\n  action: null,\n  onChange: function onChange() {}\n};\nexport { InputLabel as I, MutedAvatarOverlay as M, UserListItem as U, Input as a, noop as n };","map":null,"metadata":{},"sourceType":"module"}