{"ast":null,"code":"import React__default, { useEffect, useCallback, useContext, useState, useReducer, useRef } from 'react';\nimport { _ as __assign, d as __spreadArray, c as LocalizationContext, w as withSendbirdContext } from './LocalizationContext-dfe8b78b.js';\nimport { g as format, A as Avatar, L as Label, a as LabelTypography, b as LabelColors, c as IconTypes, I as Icon, d as IconColors, P as PlaceHolder, j as PlaceHolderTypes } from './index-fe1a6d27.js';\nimport { i as isToday, a as isYesterday } from './index-d3cbd48c.js';\nimport 'prop-types';\nimport './index-0cc16758.js';\nvar GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nvar GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nvar START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nvar START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nvar SET_QUERY_INVALID = 'SET_QUERY_INVALID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar CHANNEL_INVALID = 'CHANNEL_INVALID';\nvar RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case SET_CURRENT_CHANNEL:\n      {\n        var currentChannel = action.payload;\n        return __assign(__assign({}, state), {\n          currentChannel: currentChannel,\n          initialized: true\n        });\n      }\n\n    case CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          currentChannel: null,\n          initialized: false\n        });\n      }\n\n    case GET_SEARCHED_MESSAGES:\n      {\n        var _a = action.payload,\n            messages = _a.messages,\n            createdQuery = _a.createdQuery;\n\n        if (createdQuery && createdQuery.channelUrl === state.currentMessageSearchQuery.channelUrl && createdQuery.key === state.currentMessageSearchQuery.key) {\n          return __assign(__assign({}, state), {\n            loading: false,\n            isInvalid: false,\n            allMessages: __spreadArray([], messages, true),\n            hasMoreResult: state.currentMessageSearchQuery.hasNext\n          });\n        }\n\n        return __assign({}, state);\n      }\n\n    case SET_QUERY_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n\n    case START_MESSAGE_SEARCH:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: false,\n          loading: false\n        });\n      }\n\n    case START_GETTING_SEARCHED_MESSAGES:\n      {\n        var currentMessageSearchQuery = action.payload;\n        return __assign(__assign({}, state), {\n          loading: true,\n          currentMessageSearchQuery: currentMessageSearchQuery\n        });\n      }\n\n    case GET_NEXT_SEARCHED_MESSAGES:\n      {\n        var messages = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), messages, true),\n          hasMoreResult: state.currentMessageSearchQuery.hasNext\n        });\n      }\n\n    case RESET_SEARCH_STRING:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false\n};\n\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n      sdkInit = _a.sdkInit;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, function (groupChannel, error) {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispathcer({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        } else {\n          messageSearchDispathcer({\n            type: CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nfunction useGetSearchedMessages(_a, _b) {\n  var currentChannel = _a.currentChannel,\n      channelUrl = _a.channelUrl,\n      requestString = _a.requestString,\n      messageSearchQuery = _a.messageSearchQuery,\n      onResultLoaded = _a.onResultLoaded,\n      retryCount = _a.retryCount;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    messageSearchDispathcer({\n      type: START_MESSAGE_SEARCH,\n      payload: null\n    });\n\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        var inputSearchMessageQueryObject = __assign(__assign({}, messageSearchQuery), {\n          order: 'ts',\n          channelUrl: channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt\n        });\n\n        var createdQuery_1 = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery_1.next(function (messages, error) {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispathcer({\n              type: GET_SEARCHED_MESSAGES,\n              payload: {\n                messages: messages,\n                createdQuery: createdQuery_1\n              }\n            });\n\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispathcer({\n              type: SET_QUERY_INVALID,\n              payload: null\n            });\n\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispathcer({\n          type: START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery_1\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nfunction useScrollCallback(_a, _b) {\n  var currentMessageSearchQuery = _a.currentMessageSearchQuery,\n      hasMoreResult = _a.hasMoreResult,\n      onResultLoaded = _a.onResultLoaded;\n  var logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  return useCallback(function (cb) {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next(function (messages, error) {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispathcer({\n            type: GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages\n          });\n          cb(messages, null);\n\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nvar getCreatedAt$1 = function getCreatedAt$1(createdAt) {\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p');\n  }\n\n  if (isYesterday(createdAt)) {\n    return 'Yesterday';\n  }\n\n  return format(createdAt, 'MMM dd');\n};\n\nfunction MessageSearchItem(_a) {\n  var className = _a.className,\n      message = _a.message,\n      selected = _a.selected,\n      _onClick = _a.onClick;\n  var createdAt = message.createdAt;\n  var messageText = message.message;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n      nickname = sender.nickname;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-item', selected ? 'sendbird-message-search-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-text\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, messageText), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt$1(createdAt))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right-footer\"\n  }));\n}\n\nfunction getCreatedAt(createdAt) {\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p');\n  }\n\n  if (isYesterday(createdAt)) {\n    return 'Yesterday';\n  }\n\n  return format(createdAt, 'MMM dd');\n}\n\nfunction getIconOfFileType(message) {\n  var url = message.url;\n  var fileMessageUrl = url;\n  var fileExtension = fileMessageUrl.match(/\\.([^.]*?)(?=\\?|#|$)/)[1];\n\n  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {\n    return IconTypes.PHOTO;\n  } else if (/mp4$/i.test(fileExtension)) {\n    return IconTypes.PLAY;\n  } else if (/mp3/i.test(fileExtension)) {\n    return IconTypes.FILE_AUDIO;\n  } else if (/gif/i.test(fileExtension)) {\n    return IconTypes.GIF;\n  } else {\n    return IconTypes.FILE_DOCUMENT;\n  }\n}\n\nfunction truncate(fullText, textLimit) {\n  if (fullText.length <= textLimit) return fullText;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = textLimit - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullText.substr(0, frontChars) + separator + fullText.substr(fullText.length - backChars);\n}\n\nfunction MessageSearchFileItem(props) {\n  var className = props.className,\n      message = props.message,\n      selected = props.selected,\n      _onClick = props.onClick;\n  var createdAt = message.createdAt,\n      url = message.url,\n      name = message.name;\n  var fileMessageUrl = url;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n      nickname = sender.nickname;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-file-item', selected ? 'sendbird-message-search-file-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-file-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content__type-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: getIconOfFileType(message),\n    fillColor: IconColors.PRIMARY,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__content__url\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(name || fileMessageUrl, 28)))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt(createdAt)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right-footer\"\n  }));\n}\n\nvar DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(_a, _b) {\n  var searchString = _a.searchString;\n  var messageSearchDispathcer = _b.messageSearchDispathcer;\n\n  var _c = useState(''),\n      requestString = _c[0],\n      setRequestString = _c[1];\n\n  var _d = useState(null),\n      debouncingTimer = _d[0],\n      setDebouncingTimer = _d[1];\n\n  useEffect(function () {\n    clearTimeout(debouncingTimer);\n\n    if (searchString) {\n      setDebouncingTimer(setTimeout(function () {\n        setRequestString(searchString);\n      }, DEBOUNCING_TIME));\n    } else {\n      setRequestString('');\n      messageSearchDispathcer({\n        type: RESET_SEARCH_STRING,\n        payload: ''\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nvar COMPONENT_CLASS_NAME = 'sendbird-message-search';\n\nfunction MessageSearch(props) {\n  var // sendbird internal props\n  stores = props.stores,\n      config = props.config,\n      // message search props\n  channelUrl = props.channelUrl,\n      searchString = props.searchString,\n      messageSearchQuery = props.messageSearchQuery,\n      renderSearchItem = props.renderSearchItem,\n      onResultLoaded = props.onResultLoaded,\n      onResultClick = props.onResultClick; // hook variables\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _a = useState(0),\n      retryCount = _a[0],\n      setRetryCount = _a[1]; // this is a trigger flag for activating useGetSearchMessages\n\n\n  var _b = useState(0),\n      selectedMessageId = _b[0],\n      setSelectedMessageId = _b[1];\n\n  var _c = useReducer(reducer, initialState),\n      messageSearchStore = _c[0],\n      messageSearchDispathcer = _c[1];\n\n  var allMessages = messageSearchStore.allMessages,\n      loading = messageSearchStore.loading,\n      isInvalid = messageSearchStore.isInvalid,\n      currentChannel = messageSearchStore.currentChannel,\n      currentMessageSearchQuery = messageSearchStore.currentMessageSearchQuery,\n      hasMoreResult = messageSearchStore.hasMoreResult;\n\n  var getChannelName = function getChannelName() {\n    if (currentChannel && currentChannel.name && currentChannel.name !== 'Group Channel') {\n      return currentChannel.name;\n    }\n\n    if (currentChannel && (currentChannel.name === 'Group Channel' || !currentChannel.name)) {\n      return currentChannel.members.map(function (member) {\n        return member.nickname || stringSet.NO_NAME;\n      }).join(', ');\n    }\n\n    return stringSet.NO_TITLE;\n  }; // const\n\n\n  var sdkStore = stores.sdkStore;\n  var logger = config.logger;\n  var sdk = sdkStore.sdk;\n  var sdkInit = sdkStore.initialized;\n  var scrollRef = useRef(null);\n\n  var handleOnScroll = function handleOnScroll(e) {\n    var scrollElement = e.target;\n    var scrollTop = scrollElement.scrollTop,\n        scrollHeight = scrollElement.scrollHeight,\n        clientHeight = scrollElement.clientHeight;\n\n    if (!hasMoreResult) {\n      return;\n    }\n\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(function () {// after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var requestString = useSearchStringEffect({\n    searchString: searchString\n  }, {\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  useGetSearchedMessages({\n    currentChannel: currentChannel,\n    channelUrl: channelUrl,\n    requestString: requestString,\n    messageSearchQuery: messageSearchQuery,\n    onResultLoaded: onResultLoaded,\n    retryCount: retryCount\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var onScroll = useScrollCallback({\n    currentMessageSearchQuery: currentMessageSearchQuery,\n    hasMoreResult: hasMoreResult,\n    onResultLoaded: onResultLoaded\n  }, {\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n\n  var handleRetryToConnect = function handleRetryToConnect() {\n    setRetryCount(retryCount + 1);\n  };\n\n  if (isInvalid && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG,\n      retryToConnect: handleRetryToConnect\n    }));\n  }\n\n  if (loading && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCHING\n    }));\n  }\n\n  if (!searchString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCH_IN,\n      searchInString: getChannelName()\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME,\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, allMessages.length > 0 ? allMessages.map(function (message) {\n    if (renderSearchItem) {\n      return renderSearchItem({\n        message: message,\n        onResultClick: onResultClick\n      });\n    }\n\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(MessageSearchFileItem, {\n        className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n        message: message,\n        key: message.messageId,\n        selected: selectedMessageId === message.messageId,\n        onClick: function onClick() {\n          onResultClick(message);\n          setSelectedMessageId(message.messageId);\n        }\n      });\n    }\n\n    return /*#__PURE__*/React__default.createElement(MessageSearchItem, {\n      className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n      message: message,\n      key: message.messageId,\n      selected: selectedMessageId === message.messageId,\n      onClick: function onClick() {\n        onResultClick(message);\n        setSelectedMessageId(message.messageId);\n      }\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.NO_RESULTS\n  }));\n}\n\nvar MessageSearch$1 = withSendbirdContext(MessageSearch);\nexport { MessageSearch$1 as default };","map":{"version":3,"sources":["../src/smart-components/MessageSearch/dux/actionTypes.ts","../src/smart-components/MessageSearch/dux/reducers.ts","../src/smart-components/MessageSearch/dux/initialState.ts","../src/smart-components/MessageSearch/hooks/useSetChannel.ts","../src/smart-components/MessageSearch/hooks/useGetSearchedMessages.ts","../src/smart-components/MessageSearch/hooks/useScrollCallback.ts","../src/ui/MessageSearchItem/getCreatedAt.ts","../src/ui/MessageSearchItem/index.tsx","../src/ui/MessageSearchFileItem/utils.ts","../src/ui/MessageSearchFileItem/index.tsx","../src/smart-components/MessageSearch/hooks/useSearchStringEffect.ts","../src/smart-components/MessageSearch/index.tsx"],"names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","currentChannel","initialized","messages","createdQuery","loading","isInvalid","allMessages","hasMoreResult","hasNext","currentMessageSearchQuery","initialState","channelUrl","sdkInit","sdk","logger","messageSearchDispathcer","useEffect","type","payload","groupChannel","requestString","messageSearchQuery","onResultLoaded","retryCount","inputSearchMessageQueryObject","order","messageTimestampFrom","invitedAt","createdQuery_1","useCallback","cb","isToday","format","isYesterday","MessageSearchItem","_a","className","message","selected","onClick","messageText","sender","nickname","useContext","__spreadArray","Array","e","LabelTypography","LabelColors","ONBACKGROUND_1","stringSet","ONBACKGROUND_3","ONBACKGROUND_2","getCreatedAt","createdAt","getIconOfFileType","fileMessageUrl","fileExtension","IconTypes","truncate","fullText","textLimit","separator","sepLen","charsToShow","frontChars","Math","backChars","MessageSearchFileItem","props","url","name","IconColors","DEBOUNCING_TIME","searchString","setRequestString","useState","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","COMPONENT_CLASS_NAME","config","renderSearchItem","onResultClick","setRetryCount","selectedMessageId","setSelectedMessageId","messageSearchStore","useReducer","getChannelName","stores","sdkStore","scrollRef","useRef","handleOnScroll","scrollElement","scrollHeight","clientHeight","scrollTop","onScroll","useSetChannel","useSearchStringEffect","useGetSearchMessages","useScrollCallback","handleRetryToConnect","PlaceHolderTypes","SEARCHING","NO_RESULTS","widthSendbirdContext"],"mappings":"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","sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === state.currentMessageSearchQuery.channelUrl\n        && createdQuery.key === state.currentMessageSearchQuery.key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: state.currentMessageSearchQuery.hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      }\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      }\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: state.currentMessageSearchQuery.hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import SendbirdUIKit from '../../../index';\nexport interface State {\n  allMessages: Array<SendbirdUIKit.ClientFileMessage | SendbirdUIKit.ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: SendbirdUIKit.GroupChannelType;\n  currentMessageSearchQuery: SendbirdUIKit.ClientMessageSearchQuery;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispathcer }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, (groupChannel, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispathcer({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        } else {\n          messageSearchDispathcer({\n            type: messageActionTypes.CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendbirdUIKit from '../../../index';\nimport SendBird from 'sendbird';\n\ninterface MainProps {\n  currentChannel: SendbirdUIKit.GroupChannelType;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: SendbirdUIKit.MessageSearchQueryType;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispathcer }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispathcer({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        const inputSearchMessageQueryObject = {\n          ...messageSearchQuery,\n          order: 'ts' as const,\n          channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt,\n        };\n        const createdQuery = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery.next((messages, error) => {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispathcer({\n              type: messageActionTypes.GET_SEARCHED_MESSAGES,\n              payload: {\n                messages,\n                createdQuery,\n              },\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispathcer({\n              type: messageActionTypes.SET_QUERY_INVALID,\n              payload: null,\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispathcer({\n          type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery,\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendbirdUIKit from '../../../index';\n\ninterface MainProps {\n  currentMessageSearchQuery: SendBird.MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n}\ninterface ToolProps {\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\ntype CallbackReturn = (\n  callback: (\n    messages: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispathcer }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next((messages, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispathcer({\n            type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages,\n          });\n          cb(messages, null);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import format from 'date-fns/format';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\n\n// getCreatedAt\nexport default (createdAt: number): string => {\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p');\n  }\n  if (isYesterday(createdAt)) {\n    return 'Yesterday';\n  }\n  return format(createdAt, 'MMM dd');\n};\n","import React, { useContext } from 'react';\nimport './index.scss';\nimport getCreatedAt from './getCreatedAt';\n\nimport Avatar from '../Avatar';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendbirdUIKit.ClientUserMessage;\n  selected?: boolean;\n  onClick?: (message: SendbirdUIKit.ClientMessage) => void;\n}\n\nexport default function MessageSearchItem({\n  className,\n  message,\n  selected,\n  onClick,\n}: Props): JSX.Element {\n  const { createdAt } = message;\n  const messageText = message.message;\n  const sender = message.sender || message._sender;\n  const { profileUrl, nickname } = sender;\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-search-item',\n        selected ? 'sendbird-message-search-item--selected' : '',\n      ].join(' ')}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick(message);\n      }}\n    >\n      <div className=\"sendbird-message-search-item__left\">\n        <Avatar\n          className=\"sendbird-message-search-item__left__sender-avatar\"\n          src={profileUrl}\n          alt=\"profile image\"\n          width=\"56px\"\n          height=\"56px\"\n        />\n      </div>\n      <div className=\"sendbird-message-search-item__right\">\n        <Label\n          className=\"sendbird-message-search-item__right__sender-name\"\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {nickname || stringSet.NO_NAME}\n        </Label>\n        <Label\n          className=\"sendbird-message-search-item__right__message-text\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {messageText}\n        </Label>\n        <Label\n          className=\"sendbird-message-search-item__right__message-created-at\"\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {getCreatedAt(createdAt)}\n        </Label>\n      </div>\n      <div className=\"sendbird-message-search-item__right-footer\" />\n    </div>\n  );\n}\n","import format from 'date-fns/format';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\nimport { IconTypes } from '../Icon';\n\nexport function getCreatedAt(createdAt: number): string {\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p');\n  }\n  if (isYesterday(createdAt)) {\n    return 'Yesterday';\n  }\n  return format(createdAt, 'MMM dd');\n}\n\nexport function getIconOfFileType(message: SendbirdUIKit.ClientFileMessage): string {\n  const { url } = message;\n  const fileMessageUrl = url;\n  const fileExtension = (fileMessageUrl.match(/\\.([^.]*?)(?=\\?|#|$)/))[1];\n\n  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {\n    return IconTypes.PHOTO;\n  } else if (/mp4$/i.test(fileExtension)) {\n    return IconTypes.PLAY;\n  } else if (/mp3/i.test(fileExtension)) {\n    return IconTypes.FILE_AUDIO;\n  } else if (/gif/i.test(fileExtension)) {\n    return IconTypes.GIF;\n  } else {\n    return IconTypes.FILE_DOCUMENT;\n  }\n}\n\nexport function truncate(fullText: string, textLimit: number): string {\n  if (fullText.length <= textLimit) return fullText;\n  const separator = '...';\n  const sepLen = separator.length;\n  const charsToShow = textLimit - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n  return fullText.substr(0, frontChars) + separator + fullText.substr(fullText.length - backChars);\n}\n","import React, { ReactElement, useContext } from 'react';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport Icon, { IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { getCreatedAt, getIconOfFileType, truncate } from './utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendbirdUIKit.ClientFileMessage;\n  selected?: boolean;\n  onClick?: (message: SendbirdUIKit.ClientFileMessage) => void;\n}\n\nexport default function MessageSearchFileItem(props: Props): ReactElement {\n  const {\n    className,\n    message,\n    selected,\n    onClick,\n  } = props;\n  const { createdAt, url, name } = message;\n  const fileMessageUrl = url;\n  const sender = message.sender || message._sender;\n  const { profileUrl, nickname } = sender;\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-search-file-item',\n        selected ? 'sendbird-message-search-file-item--selected' : '',\n      ].join(' ')}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick(message);\n      }}\n    >\n      <div className=\"sendbird-message-search-file-item__left\">\n        <Avatar\n          className=\"sendbird-message-search-file-item__left__sender-avatar\"\n          src={profileUrl}\n          alt=\"profile image\"\n          width=\"56px\"\n          height=\"56px\"\n        />\n      </div>\n      <div className=\"sendbird-message-search-file-item__right\">\n        <Label\n          className=\"sendbird-message-search-file-item__right__sender-name\"\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {nickname || stringSet.NO_NAME}\n        </Label>\n        <div className=\"sendbird-message-search-file-item__right__content\">\n          <div className=\"sendbird-message-search-file-item__right__content__type-icon\">\n            <Icon\n              type={getIconOfFileType(message)}\n              fillColor={IconColors.PRIMARY}\n              width=\"18px\"\n              height=\"18px\"\n            />\n          </div>\n          <Label\n            className=\"sendbird-message-search-file-item__right__content__url\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {truncate(name || fileMessageUrl, 28)}\n          </Label>\n        </div>\n      </div>\n      <Label\n        className=\"sendbird-message-search-file-item__message-created-at\"\n        type={LabelTypography.CAPTION_3}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {getCreatedAt(createdAt)}\n      </Label>\n      <div className=\"sendbird-message-search-file-item__right-footer\" />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispathcer }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME)\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispathcer({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, { useReducer, useRef, useContext, useState } from 'react';\nimport './index.scss';\n\nimport widthSendbirdContext from '../../lib/SendbirdSdkContext';\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback from './hooks/useScrollCallback';\n\nimport MessageSearchItem from '../../ui/MessageSearchItem';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport MessageSearchFileItem from '../../ui/MessageSearchFileItem';\n\nimport SendbirdUIKit from '../../index';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nconst COMPONENT_CLASS_NAME = 'sendbird-message-search';\n\ninterface Props extends SendbirdUIKit.MessageSearchProps {\n  // sendbird internal props\n  stores: {\n    sdkStore?: SendbirdUIKit.SdkStore,\n    userStore?: SendbirdUIKit.UserStore,\n  };\n  config: {\n    userId: string,\n    isOnline: boolean,\n    logger?: SendbirdUIKit.Logger,\n    theme?: string,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    pubSub: any,\n    disableUserProfile?: boolean,\n    renderUserProfile?(): JSX.Element,\n    imageCompression?: {\n      compressionRate?: number,\n      resizingWidth?: number | string,\n      resizingHeight?: number | string,\n    },\n  };\n}\n\nfunction MessageSearch(props: Props): JSX.Element {\n  const {\n    // sendbird internal props\n    stores,\n    config,\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    renderSearchItem,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  // hook variables\n  const { stringSet } = useContext(LocalizationContext);\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispathcer] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const getChannelName = () => {\n    if (currentChannel && currentChannel.name && currentChannel.name !== 'Group Channel') {\n      return currentChannel.name;\n    }\n    if (currentChannel && (currentChannel.name === 'Group Channel' || !currentChannel.name)) {\n      return currentChannel.members.map((member) => member.nickname || stringSet.NO_NAME).join(', ');\n    }\n    return stringSet.NO_TITLE;\n  };\n\n  // const\n  const { sdkStore } = stores;\n  const { logger } = config;\n  const { sdk } = sdkStore;\n  const sdkInit = sdkStore.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e) => {\n    const scrollElement = e.target;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispathcer },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispathcer });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispathcer },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispathcer },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n\n  if (isInvalid && searchString && requestString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder\n          type={PlaceHolderTypes.WRONG}\n          retryToConnect={handleRetryToConnect}\n        />\n      </div>\n    );\n  }\n\n  if (loading && searchString && requestString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder type={PlaceHolderTypes.SEARCHING} />\n      </div>\n    );\n  }\n\n  if (!searchString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder\n          type={PlaceHolderTypes.SEARCH_IN}\n          searchInString={getChannelName()}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={COMPONENT_CLASS_NAME}\n      onScroll={handleOnScroll}\n      ref={scrollRef}\n    >\n      {\n        (allMessages.length > 0)\n          ? (\n            allMessages.map((message) => {\n              if (renderSearchItem) {\n                return renderSearchItem({ message, onResultClick });\n              }\n              if (message.messageType === 'file') {\n                return (\n                  <MessageSearchFileItem\n                    className={`${COMPONENT_CLASS_NAME}__message-search-item`}\n                    message={message}\n                    key={message.messageId}\n                    selected={(selectedMessageId === message.messageId)}\n                    onClick={() => {\n                      onResultClick(message);\n                      setSelectedMessageId(message.messageId);\n                    }}\n                  />\n                );\n              }\n              return (\n                <MessageSearchItem\n                  className={`${COMPONENT_CLASS_NAME}__message-search-item`}\n                  message={message}\n                  key={message.messageId}\n                  selected={(selectedMessageId === message.messageId)}\n                  onClick={() => {\n                    onResultClick(message);\n                    setSelectedMessageId(message.messageId);\n                  }}\n                />\n              );\n            })\n          )\n          : (\n            <PlaceHolder type={PlaceHolderTypes.NO_RESULTS} />\n          )\n      }\n    </div>\n  );\n}\n\nexport default widthSendbirdContext(MessageSearch);\n"]},"metadata":{},"sourceType":"module"}