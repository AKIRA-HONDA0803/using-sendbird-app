{"ast":null,"code":"import { e as _toConsumableArray, a as _objectSpread2, u as uuidv4, b as _slicedToArray, f as _defineProperty, c as LocalizationContext, h as _inherits, i as _createSuper, j as _createClass, k as _classCallCheck, l as _assertThisInitialized, w as withSendbirdContext } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useEffect, useCallback, useRef, useMemo, useContext, useState, useLayoutEffect, Component, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { g as format, i as ImageRenderer, I as Icon, c as IconTypes, d as IconColors, e as Loader, L as Label, a as LabelTypography, b as LabelColors, A as Avatar, P as PlaceHolder, j as PlaceHolderTypes, h as LabelStringSet } from './index-fe1a6d27.js';\nimport { m as getOutgoingMessageStates, n as getSendingMessageStatus, o as SEND_USER_MESSAGE, S as SEND_MESSAGE_START, p as SEND_FILE_MESSAGE, l as UPDATE_USER_MESSAGE, D as DELETE_MESSAGE, q as filterMessageListParams, E as EmojiListItems, r as isSentStatus, u as getMessageCreatedAt$1, v as isUserMessage, w as isFailedMessage, x as isPendingMessage, y as isSentMessage, z as getClassName, C as ContextMenu, I as IconButton, b as MenuItems, c as MenuItem, A as copyToClipboard, F as getEmojiListAll, G as getEmojiMapAll, H as isReactedBy, J as getEmojiTooltipString, K as isEditedMessage, N as getUIKitFileType, a as TextButton, t as truncateString, O as isVideoMessage, P as isGifMessage, Q as isUrl, R as getUIKitFileTypes, V as isThumbnailMessage, W as isVideo, X as isGif, Y as isFileMessage, Z as isSupportedFileView, _ as getUIKitMessageTypes, U as UserProfileContext, f as ConnectedUserProfile, $ as getOutgoingMessageState, a0 as getSenderName, a1 as isTextMessage, a2 as isOGMessage, a3 as getUIKitMessageType, M as Modal, d as ButtonTypes, a4 as isImageMessage, a5 as isAudioMessage, h as UserProfileProvider } from './index-cb0d7936.js';\nimport { c as compareIds, L as LinkLabel, D as DateSeparator, M as MessageInput, F as FileViewer } from './index-8312f99e.js';\nimport { i as isSameDay } from './index-0cc16758.js';\nimport { C as ChannelAvatar } from './index-db1485c0.js';\nimport 'react-dom';\nimport './utils-7b22e0fc.js';\nvar RESET_MESSAGES = 'RESET_MESSAGES';\nvar RESET_STATE = 'RESET_STATE';\nvar CLEAR_SENT_MESSAGES = 'CLEAR_SENT_MESSAGES';\nvar GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nvar GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nvar GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS';\nvar GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE';\nvar SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nvar SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nvar SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\nvar RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\nvar ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nvar UPDATE_UNREAD_COUNT = 'UPDATE_UNREAD_COUNT';\nvar ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nvar ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nvar ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nvar ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nvar MARK_AS_READ = 'MARK_AS_READ';\nvar ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nvar SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\nvar MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\ngetOutgoingMessageStates();\nvar UNDEFINED = 'undefined';\n\nvar _getSendingMessageSta$1 = getSendingMessageStatus(),\n    SUCCEEDED$1 = _getSendingMessageSta$1.SUCCEEDED;\n\n_getSendingMessageSta$1.FAILED;\nvar PENDING$1 = _getSendingMessageSta$1.PENDING;\n\nvar scrollIntoLast = function scrollIntoLast() {\n  var intialTry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var MAX_TRIES = 10;\n  var currentTry = intialTry;\n\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n\n  try {\n    var scrollDOM = document.querySelector('.sendbird-conversation__scroll-container'); // eslint-disable-next-line no-multi-assign\n\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {//\n    }\n  });\n};\n\nvar pubSubHandler = function pubSubHandler(channelUrl, pubSub, dispatcher) {\n  var subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(SEND_USER_MESSAGE, pubSub.subscribe(SEND_USER_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        message = msg.message;\n    scrollIntoLast();\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel,\n        message = msg.message;\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: SEND_MESSAGEGE_START,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(SEND_FILE_MESSAGE, pubSub.subscribe(SEND_FILE_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        message = msg.message;\n    scrollIntoLast();\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        message = msg.message,\n        fromSelector = msg.fromSelector;\n\n    if (fromSelector && channel && channelUrl === channel.url) {\n      dispatcher({\n        type: ON_MESSAGE_UPDATED,\n        payload: {\n          channel: channel,\n          message: message\n        }\n      });\n    }\n  }));\n  subscriber.set(DELETE_MESSAGE, pubSub.subscribe(DELETE_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        messageId = msg.messageId;\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: ON_MESSAGE_DELETED,\n        payload: messageId\n      });\n    }\n  }));\n  return subscriber;\n};\n\nvar isOperator = function isOperator() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var myRole = groupChannel.myRole;\n  return myRole === 'operator';\n};\n\nvar isDisabledBecauseFrozen = function isDisabledBecauseFrozen() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isFrozen = groupChannel.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nvar isDisabledBecauseMuted = function isDisabledBecauseMuted() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var myMutedState = groupChannel.myMutedState;\n  return myMutedState === 'muted';\n};\n\nvar getEmojiCategoriesFromEmojiContainer$1 = function getEmojiCategoriesFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return emojiContainer.emojiCategories ? emojiContainer.emojiCategories : [];\n};\n\nvar getAllEmojisFromEmojiContainer$1 = function getAllEmojisFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _emojiContainer$emoji = emojiContainer.emojiCategories,\n      emojiCategories = _emojiContainer$emoji === void 0 ? [] : _emojiContainer$emoji;\n  var allEmojis = [];\n\n  for (var categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    var emojis = emojiCategories[categoryIndex].emojis;\n\n    for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n\n  return allEmojis;\n};\n\nvar getEmojisFromEmojiContainer$1 = function getEmojisFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var emojiCategoryId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return emojiContainer.emojiCategories ? emojiContainer.emojiCategories.filter(function (emojiCategory) {\n    return emojiCategory.id === emojiCategoryId;\n  })[0].emojis : [];\n};\n\nvar getAllEmojisMapFromEmojiContainer = function getAllEmojisMapFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _emojiContainer$emoji2 = emojiContainer.emojiCategories,\n      emojiCategories = _emojiContainer$emoji2 === void 0 ? [] : _emojiContainer$emoji2;\n  var allEmojisMap = new Map();\n\n  for (var categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    var emojis = emojiCategories[categoryIndex].emojis;\n\n    for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      var _emojis$emojiIndex = emojis[emojiIndex],\n          key = _emojis$emojiIndex.key,\n          url = _emojis$emojiIndex.url;\n      allEmojisMap.set(key, url);\n    }\n  }\n\n  return allEmojisMap;\n};\n\nvar getNicknamesMapFromMembers = function getNicknamesMapFromMembers() {\n  var members = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var nicknamesMap = new Map();\n\n  for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    var _members$memberIndex = members[memberIndex],\n        userId = _members$memberIndex.userId,\n        nickname = _members$memberIndex.nickname;\n    nicknamesMap.set(userId, nickname);\n  }\n\n  return nicknamesMap;\n};\n\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\n\nvar isSameGroup = function isSameGroup(message, comparingMessage) {\n  if (!message || !comparingMessage || !message.sender || !comparingMessage.sender || !message.createdAt || !comparingMessage.createdAt || !message.sender.userId || !comparingMessage.sender.userId) {\n    return false;\n  }\n\n  return message.sendingStatus === comparingMessage.sendingStatus && message.sender.userId === comparingMessage.sender.userId && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage);\n};\n\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage) {\n  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || '';\n  var isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [isSameGroup(prevMessage, currMessage) && isAcceptable, isSameGroup(currMessage, nextMessage) && isAcceptable];\n};\n\nvar hasOwnProperty = function hasOwnProperty(property) {\n  return function (payload) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n      return true;\n    }\n\n    return false;\n  };\n};\n\nvar passUnsuccessfullMessages = function passUnsuccessfullMessages(allMessages, newMessage) {\n  var _newMessage$sendingSt = newMessage.sendingStatus,\n      sendingStatus = _newMessage$sendingSt === void 0 ? UNDEFINED : _newMessage$sendingSt;\n\n  if (sendingStatus === SUCCEEDED$1 || sendingStatus === PENDING$1) {\n    var lastIndexOfSucceededMessage = allMessages.map(function (message) {\n      return message.sendingStatus || (message.isAdminMessage && message.isAdminMessage() ? SUCCEEDED$1 : UNDEFINED);\n    }).lastIndexOf(SUCCEEDED$1);\n\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      var messages = _toConsumableArray(allMessages);\n\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n\n  return [].concat(_toConsumableArray(allMessages), [newMessage]);\n};\n\nvar pxToNumber = function pxToNumber(px) {\n  if (typeof px === 'number') {\n    return px;\n  }\n\n  if (typeof px === 'string') {\n    var parsed = Number.parseFloat(px);\n\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n\n  return null;\n};\n\nvar messagesInitialState = {\n  initialized: false,\n  loading: false,\n  allMessages: [],\n  currentGroupChannel: {\n    members: []\n  },\n  // for scrollup\n  hasMore: false,\n  lastMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n  hasMoreToBottom: false,\n  latestFetchedMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadCount: 0,\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null\n};\n\nvar _getSendingMessageSta = getSendingMessageStatus(),\n    SUCCEEDED = _getSendingMessageSta.SUCCEEDED,\n    FAILED = _getSendingMessageSta.FAILED,\n    PENDING = _getSendingMessageSta.PENDING;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case RESET_STATE:\n      return messagesInitialState;\n\n    case RESET_MESSAGES:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        // when user switches channel, if the previous channel `hasMore`\n        // the onScroll gets called twice, setting hasMore false prevents this\n        hasMore: false,\n        allMessages: []\n      });\n\n    case GET_PREV_MESSAGES_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n\n    case CLEAR_SENT_MESSAGES:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: _toConsumableArray(state.allMessages.filter(function (m) {\n          return m.sendingStatus !== SUCCEEDED;\n        }))\n      });\n\n    case GET_PREV_MESSAGES_SUCESS:\n      {\n        var receivedMessages = action.payload.messages || [];\n        var _action$payload$curre = action.payload.currentGroupChannel,\n            currentGroupChannel = _action$payload$curre === void 0 ? {} : _action$payload$curre;\n        var stateChannel = state.currentGroupChannel || {};\n        var stateChannelUrl = stateChannel.url;\n        var actionChannelUrl = currentGroupChannel.url;\n\n        if (actionChannelUrl !== stateChannelUrl) {\n          return state;\n        } // remove duplicate messages\n\n\n        var duplicatedMessageIds = [];\n        var updatedAllMessages = state.allMessages.map(function (msg) {\n          var duplicatedMessage = receivedMessages.find(function (_ref) {\n            var messageId = _ref.messageId;\n            return compareIds(messageId, msg.messageId);\n          });\n\n          if (!duplicatedMessage) {\n            return msg;\n          }\n\n          duplicatedMessageIds.push(duplicatedMessage.messageId);\n          return duplicatedMessage.updatedAt > msg.updatedAt ? duplicatedMessage : msg;\n        });\n        var filteredNewMessages = duplicatedMessageIds.length > 0 ? receivedMessages.filter(function (msg) {\n          return !duplicatedMessageIds.find(function (messageId) {\n            return compareIds(messageId, msg.messageId);\n          });\n        }) : receivedMessages;\n        var hasHasMoreToBottom = hasOwnProperty('hasMoreToBottom')(action.payload);\n        var hasLatestFetchedMessageTimeStamp = hasOwnProperty('latestFetchedMessageTimeStamp')(action.payload);\n        return _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, state), {}, {\n          loading: false,\n          initialized: true,\n          hasMore: action.payload.hasMore,\n          lastMessageTimeStamp: action.payload.lastMessageTimeStamp\n        }, hasHasMoreToBottom && {\n          hasMoreToBottom: action.payload.hasMoreToBottom\n        }), hasLatestFetchedMessageTimeStamp && {\n          latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp\n        }), {}, {\n          allMessages: [].concat(_toConsumableArray(filteredNewMessages), _toConsumableArray(updatedAllMessages))\n        });\n      }\n\n    case GET_NEXT_MESSAGES_SUCESS:\n      {\n        var _receivedMessages = action.payload.messages || [];\n\n        var _action$payload$curre2 = action.payload.currentGroupChannel,\n            _currentGroupChannel = _action$payload$curre2 === void 0 ? {} : _action$payload$curre2;\n\n        var _stateChannel = state.currentGroupChannel || {};\n\n        var _stateChannelUrl = _stateChannel.url;\n        var _actionChannelUrl = _currentGroupChannel.url;\n\n        if (_actionChannelUrl !== _stateChannelUrl) {\n          return state;\n        } // remove duplicate messages\n\n\n        var _duplicatedMessageIds = [];\n\n        var _updatedAllMessages = state.allMessages.map(function (msg) {\n          var duplicatedMessage = _receivedMessages.find(function (_ref2) {\n            var messageId = _ref2.messageId;\n            return compareIds(messageId, msg.messageId);\n          });\n\n          if (!duplicatedMessage) {\n            return msg;\n          }\n\n          _duplicatedMessageIds.push(duplicatedMessage.messageId);\n\n          return duplicatedMessage.updatedAt > msg.updatedAt ? duplicatedMessage : msg;\n        });\n\n        var _filteredNewMessages = _duplicatedMessageIds.length > 0 ? _receivedMessages.filter(function (msg) {\n          return !_duplicatedMessageIds.find(function (messageId) {\n            return compareIds(messageId, msg.messageId);\n          });\n        }) : _receivedMessages;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          loading: false,\n          initialized: true,\n          hasMore: action.payload.hasMore,\n          lastMessageTimeStamp: action.payload.lastMessageTimeStamp,\n          hasMoreToBottom: action.payload.hasMoreToBottom,\n          latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp,\n          allMessages: [].concat(_toConsumableArray(_updatedAllMessages), _toConsumableArray(_filteredNewMessages))\n        });\n      }\n\n    case GET_NEXT_MESSAGES_FAILURE:\n      {\n        return _objectSpread2({}, state);\n      }\n\n    case SEND_MESSAGEGE_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: [].concat(_toConsumableArray(state.allMessages), [_objectSpread2({}, action.payload)])\n      });\n\n    case SEND_MESSAGEGE_SUCESS:\n      {\n        var newMessages = state.allMessages.map(function (m) {\n          return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n        });\n\n        _toConsumableArray(newMessages).sort(function (a, b) {\n          return a.sendingStatus && b.sendingStatus && a.sendingStatus === SUCCEEDED && (b.sendingStatus === PENDING || b.sendingStatus === FAILED) ? -1 : 1;\n        });\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: newMessages\n        });\n      }\n\n    case SEND_MESSAGEGE_FAILURE:\n      {\n        // eslint-disable-next-line no-param-reassign\n        action.payload.failed = true;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n          })\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentGroupChannel: action.payload,\n          isInvalid: false\n        });\n      }\n\n    case SET_CHANNEL_INVALID:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isInvalid: true\n        });\n      }\n\n    case UPDATE_UNREAD_COUNT:\n      {\n        var channel = action.payload.channel;\n\n        var _state$currentGroupCh = state.currentGroupChannel,\n            _currentGroupChannel2 = _state$currentGroupCh === void 0 ? {} : _state$currentGroupCh,\n            unreadCount = state.unreadCount;\n\n        var currentGroupChannelUrl = _currentGroupChannel2.url;\n\n        if (!compareIds(channel.url, currentGroupChannelUrl)) {\n          return state;\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          unreadSince: unreadCount + 1\n        });\n      }\n\n    case ON_MESSAGE_RECEIVED:\n      {\n        var _action$payload = action.payload,\n            _channel = _action$payload.channel,\n            message = _action$payload.message,\n            scrollToEnd = _action$payload.scrollToEnd;\n        var _unreadCount = 0;\n\n        var _state$currentGroupCh2 = state.currentGroupChannel,\n            _currentGroupChannel3 = _state$currentGroupCh2 === void 0 ? {} : _state$currentGroupCh2,\n            unreadSince = state.unreadSince;\n\n        var _currentGroupChannelUrl = _currentGroupChannel3.url;\n\n        if (!compareIds(_channel.url, _currentGroupChannelUrl)) {\n          return state;\n        } // Excluded overlapping messages\n\n\n        if (state.allMessages.some(function (msg) {\n          return msg.messageId === message.messageId;\n        })) {\n          return state;\n        } // Filter by userFilledQuery\n\n\n        if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n          return state;\n        }\n\n        _unreadCount = state.unreadCount + 1; // reset unreadCount if have to scrollToEnd\n\n        if (scrollToEnd) {\n          _unreadCount = 0;\n        }\n\n        if (message.isAdminMessage && message.isAdminMessage()) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allMessages: passUnsuccessfullMessages(state.allMessages, message)\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          unreadCount: _unreadCount,\n          unreadSince: _unreadCount === 1 ? format(new Date(), 'p MMM dd') : unreadSince,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message)\n        });\n      }\n\n    case ON_MESSAGE_UPDATED:\n      {\n        var _action$payload2 = action.payload,\n            _channel2 = _action$payload2.channel,\n            _message = _action$payload2.message;\n\n        var _currentGroupChannelUrl2 = state.currentGroupChannel && state.currentGroupChannel.url || '';\n\n        if (!compareIds(_channel2.url, _currentGroupChannelUrl2)) {\n          return state; // Ignore event when it is not for the current channel\n        }\n\n        if (state.messageListParams && !filterMessageListParams(state.messageListParams, _message)) {\n          // Delete the message if it doesn't match to the params anymore\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allMessages: state.allMessages.filter(function (m) {\n              return !compareIds(m.messageId, _message === null || _message === void 0 ? void 0 : _message.messageId);\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.messageId, action.payload.message.messageId) ? action.payload.message : m;\n          })\n        });\n      }\n\n    case ON_MESSAGE_THREAD_INFO_UPDATED:\n      {\n        var _action$payload3 = action.payload,\n            _channel3 = _action$payload3.channel,\n            event = _action$payload3.event;\n        var channelUrl = event.channelUrl,\n            threadInfo = event.threadInfo,\n            targetMessageId = event.targetMessageId;\n\n        var _currentGroupChannelUrl3 = state.currentGroupChannel && state.currentGroupChannel.url || '';\n\n        if (!compareIds(_channel3.url, _currentGroupChannelUrl3) || !compareIds(_channel3.url, channelUrl)) {\n          return state; // Ignore event when it is not for the current channel\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            if (compareIds(m.messageId, targetMessageId)) {\n              // eslint-disable-next-line no-param-reassign\n              m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n            }\n\n            return m;\n          })\n        });\n      }\n\n    case RESEND_MESSAGEGE_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.map(function (m) {\n          return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n        })\n      });\n\n    case MARK_AS_READ:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        unreadCount: 0,\n        unreadSince: null\n      });\n\n    case ON_MESSAGE_DELETED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.filter(function (m) {\n          return !compareIds(m.messageId, action.payload);\n        })\n      });\n\n    case ON_MESSAGE_DELETED_BY_REQ_ID:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.filter(function (m) {\n          return !compareIds(m.reqId, action.payload);\n        })\n      });\n\n    case SET_EMOJI_CONTAINER:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          emojiContainer: action.payload\n        });\n      }\n\n    case ON_REACTION_UPDATED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            if (compareIds(m.messageId, action.payload.messageId)) {\n              if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n                m.applyReactionEvent(action.payload);\n              }\n\n              return m;\n            }\n\n            return m;\n          })\n        });\n      }\n\n    case MESSAGE_LIST_PARAMS_CHANGED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          messageListParams: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\n\n\nfunction useHandleChannelEvents(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      sdkInit = _ref.sdkInit,\n      hasMoreToBottom = _ref.hasMoreToBottom;\n  var messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      scrollRef = _ref2.scrollRef,\n      setQuoteMessage = _ref2.setQuoteMessage;\n  var channelUrl = currentGroupChannel && currentGroupChannel.url;\n  useEffect(function () {\n    var messageReceiverId = uuidv4();\n\n    if (channelUrl && sdk && sdk.ChannelHandler) {\n      var ChannelHandler = new sdk.ChannelHandler();\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = function (channel, message) {\n        // donot update if hasMoreToBottom\n        if (compareIds(channel.url, currentGroupChannel.url) && !hasMoreToBottom) {\n          var scrollToEnd = false;\n\n          try {\n            var current = scrollRef.current;\n            scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight;\n          } catch (error) {//\n          }\n\n          logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n          messagesDispatcher({\n            type: ON_MESSAGE_RECEIVED,\n            payload: {\n              channel: channel,\n              message: message,\n              scrollToEnd: scrollToEnd\n            }\n          });\n\n          if (scrollToEnd) {\n            try {\n              setTimeout(function () {\n                currentGroupChannel.markAsRead();\n                scrollIntoLast();\n              });\n            } catch (error) {\n              logger.warning('Channel | onMessageReceived | scroll to end failed');\n            }\n          }\n        }\n\n        if (compareIds(channel.url, currentGroupChannel.url) && hasMoreToBottom) {\n          messagesDispatcher({\n            type: UPDATE_UNREAD_COUNT,\n            payload: {\n              channel: channel\n            }\n          });\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = function (channel, message) {\n        logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      ChannelHandler.onThreadInfoUpdated = function (channel, event) {\n        logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', event);\n        messagesDispatcher({\n          type: ON_MESSAGE_THREAD_INFO_UPDATED,\n          payload: {\n            channel: channel,\n            event: event\n          }\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = function (_, messageId) {\n        logger.info('Channel | useHandleChannelEvents: onMessageDeleted', messageId);\n        setQuoteMessage(null);\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: messageId\n        });\n      };\n\n      ChannelHandler.onReactionUpdated = function (_, reactionEvent) {\n        logger.info('Channel | useHandleChannelEvents: onReactionUpdated', reactionEvent);\n        messagesDispatcher({\n          type: ON_REACTION_UPDATED,\n          payload: reactionEvent\n        });\n      };\n\n      ChannelHandler.onChannelChanged = function (groupChannel) {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelChanged', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onChannelFrozen = function (groupChannel) {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelFrozen', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onChannelUnfrozen = function (groupChannel) {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onUserMuted = function (groupChannel) {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onUserMuted', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onUserUnmuted = function (groupChannel) {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onUserUnmuted', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onUserBanned = function (groupChannel) {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onUserBanned', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onOperatorUpdated = function (groupChannel) {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      }; // Add this channel event handler to the SendBird object.\n\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return function () {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [channelUrl, sdkInit]);\n}\n\nfunction useSetChannel(_ref, _ref2) {\n  var channelUrl = _ref.channelUrl,\n      sdkInit = _ref.sdkInit;\n  var messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk,\n      logger = _ref2.logger;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && sdk.GroupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.GroupChannel.getChannel(channelUrl).then(function (groupChannel) {\n        logger.info('Channel | useSetChannel fetched channel', groupChannel);\n        messagesDispatcher({\n          type: SET_CURRENT_CHANNEL,\n          payload: groupChannel\n        });\n        logger.info('Channel: Mark as read', groupChannel); // this order is important - this mark as read should update the event handler up above\n\n        groupChannel.markAsRead();\n      }).catch(function (e) {\n        logger.warning('Channel | useSetChannel fetch channel failed', {\n          channelUrl: channelUrl,\n          e: e\n        });\n        messagesDispatcher({\n          type: SET_CHANNEL_INVALID\n        });\n      });\n      sdk.getAllEmoji(function (emojiContainer_, err) {\n        if (err) {\n          logger.error('Channel: Getting emojis failed', err);\n          return;\n        }\n\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: SET_EMOJI_CONTAINER,\n          payload: emojiContainer_\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nvar PREV_RESULT_SIZE = 30;\nvar NEXT_RESULT_SIZE = 10;\n\nvar getLatestMessageTimeStamp = function getLatestMessageTimeStamp() {\n  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var latestMessage = messages[messages.length - 1];\n  return latestMessage && latestMessage.createdAt || null;\n};\n\nfunction useInitialMessagesFetch(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n      intialTimeStamp = _ref.intialTimeStamp,\n      replyType = _ref.replyType;\n  var sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      messagesDispatcher = _ref2.messagesDispatcher;\n  var channelUrl = currentGroupChannel && currentGroupChannel.url;\n  useEffect(function () {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: RESET_MESSAGES\n    });\n\n    if (sdk && sdk.MessageListParams && currentGroupChannel && currentGroupChannel.getMessagesByTimestamp) {\n      var messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReaction = true;\n\n      if (replyType && replyType === 'QUOTE_REPLY') {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = 'only_reply_to_channel';\n      }\n\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach(function (key) {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n\n      if (replyType && replyType === 'QUOTE_REPLY' || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams\n        });\n      }\n\n      logger.info('Channel: Fetching messages', {\n        currentGroupChannel: currentGroupChannel,\n        userFilledMessageListQuery: userFilledMessageListQuery\n      });\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_START\n      });\n\n      if (intialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n        currentGroupChannel.getMessagesByTimestamp(intialTimeStamp, messageListParams).then(function (messages) {\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimeStamp = hasMore ? messages[0].createdAt : null;\n          var latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages); // to make sure there are no more messages below\n\n          var nextMessageListParams = new sdk.MessageListParams();\n          nextMessageListParams.nextResultSize = NEXT_RESULT_SIZE;\n          nextMessageListParams.isInclusive = true;\n          nextMessageListParams.includeReplies = false;\n          nextMessageListParams.includeReaction = true;\n\n          if (replyType && replyType === 'QUOTE_REPLY') {\n            nextMessageListParams.includeThreadInfo = true;\n            nextMessageListParams.includeParentMessageInfo = true;\n            nextMessageListParams.replyType = 'only_reply_to_channel';\n          }\n\n          if (userFilledMessageListQuery) {\n            Object.keys(userFilledMessageListQuery).forEach(function (key) {\n              nextMessageListParams[key] = userFilledMessageListQuery[key];\n            });\n          }\n\n          currentGroupChannel.getMessagesByTimestamp(latestFetchedMessageTimeStamp || new Date().getTime(), nextMessageListParams).then(function (nextMessages) {\n            messagesDispatcher({\n              type: GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: messages,\n                hasMore: hasMore,\n                lastMessageTimeStamp: lastMessageTimeStamp,\n                currentGroupChannel: currentGroupChannel,\n                latestFetchedMessageTimeStamp: latestFetchedMessageTimeStamp,\n                hasMoreToBottom: nextMessages && nextMessages.length > 0\n              }\n            });\n          });\n        }).catch(function (error) {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              messages: [],\n              hasMore: false,\n              lastMessageTimeStamp: 0,\n              currentGroupChannel: currentGroupChannel\n            }\n          });\n        }).finally(function () {\n          if (!intialTimeStamp) {\n            setTimeout(function () {\n              return scrollIntoLast();\n            });\n          }\n\n          currentGroupChannel.markAsRead();\n        });\n      } else {\n        currentGroupChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams).then(function (messages) {\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimeStamp = hasMore ? messages[0].createdAt : null;\n          var latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              messages: messages,\n              hasMore: hasMore,\n              lastMessageTimeStamp: lastMessageTimeStamp,\n              currentGroupChannel: currentGroupChannel,\n              latestFetchedMessageTimeStamp: latestFetchedMessageTimeStamp,\n              hasMoreToBottom: false\n            }\n          });\n        }).catch(function (error) {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              messages: [],\n              hasMore: false,\n              lastMessageTimeStamp: 0,\n              currentGroupChannel: currentGroupChannel\n            }\n          });\n        }).finally(function () {\n          if (!intialTimeStamp) {\n            setTimeout(function () {\n              return scrollIntoLast();\n            });\n          }\n\n          currentGroupChannel.markAsRead();\n        });\n      }\n    }\n  }, [channelUrl, userFilledMessageListQuery, intialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nfunction useHandleReconnect(_a, _b) {\n  var isOnline = _a.isOnline,\n      replyType = _a.replyType;\n  var logger = _b.logger,\n      sdk = _b.sdk,\n      currentGroupChannel = _b.currentGroupChannel,\n      messagesDispatcher = _b.messagesDispatcher,\n      userFilledMessageListQuery = _b.userFilledMessageListQuery;\n  useEffect(function () {\n    var wasOffline = !isOnline;\n    return function () {\n      var _a; // state changed from offline to online\n\n\n      if (wasOffline && (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url)) {\n        logger.info('Refreshing conversation state');\n        var useReaction = ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a === void 0 ? void 0 : _a.isUsingReaction) || false;\n        var messageListParams_1 = new sdk.MessageListParams();\n        messageListParams_1.prevResultSize = 30;\n        messageListParams_1.isInclusive = true;\n        messageListParams_1.includeReplies = false;\n        messageListParams_1.includeReaction = useReaction;\n\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams_1.includeThreadInfo = true;\n          messageListParams_1.includeParentMessageInfo = true;\n          messageListParams_1.replyType = 'only_reply_to_channel';\n        }\n\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach(function (key) {\n            messageListParams_1[key] = userFilledMessageListQuery[key];\n          });\n        }\n\n        logger.info('Channel: Fetching messages', {\n          currentGroupChannel: currentGroupChannel,\n          userFilledMessageListQuery: userFilledMessageListQuery\n        });\n        messagesDispatcher({\n          type: GET_PREV_MESSAGES_START,\n          payload: null\n        });\n        sdk.GroupChannel.getChannel(currentGroupChannel.url).then(function (groupChannel) {\n          var lastMessageTime = new Date().getTime();\n          groupChannel.getMessagesByTimestamp(lastMessageTime, messageListParams_1).then(function (messages) {\n            messagesDispatcher({\n              type: CLEAR_SENT_MESSAGES,\n              payload: null\n            });\n            var hasMore = (messages === null || messages === void 0 ? void 0 : messages.length) > 0;\n            var lastMessageTimeStamp = hasMore ? messages[0].createdAt : null;\n            messagesDispatcher({\n              type: GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: messages,\n                hasMore: hasMore,\n                lastMessageTimeStamp: lastMessageTimeStamp,\n                currentGroupChannel: currentGroupChannel\n              }\n            });\n            setTimeout(function () {\n              return scrollIntoLast();\n            });\n          }).catch(function (error) {\n            logger.error('Channel: Fetching messages failed', error);\n          }).finally(function () {\n            var _a;\n\n            (_a = currentGroupChannel.markAsRead) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);\n          });\n        });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nfunction useScrollCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      lastMessageTimeStamp = _ref.lastMessageTimeStamp,\n      userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n      replyType = _ref.replyType;\n  var hasMore = _ref2.hasMore,\n      logger = _ref2.logger,\n      messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk;\n  return useCallback(function (cb) {\n    if (!hasMore) {\n      return;\n    }\n\n    var _sdk$appInfo = sdk.appInfo,\n        appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n    var useReaction = appInfo.isUsingReaction || false;\n    var messageListParams = new sdk.MessageListParams();\n    messageListParams.prevResultSize = 30;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach(function (key) {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n\n    logger.info('Channel: Fetching messages', {\n      currentGroupChannel: currentGroupChannel,\n      userFilledMessageListQuery: userFilledMessageListQuery\n    });\n    currentGroupChannel.getMessagesByTimestamp(lastMessageTimeStamp || new Date().getTime(), messageListParams).then(function (messages) {\n      var hasMoreMessages = messages && messages.length > 0;\n      var lastMessageTs = hasMoreMessages ? messages[0].createdAt : null;\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_SUCESS,\n        payload: {\n          messages: messages,\n          hasMore: hasMoreMessages,\n          lastMessageTimeStamp: lastMessageTs,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([messages, null]);\n    }).catch(function (error) {\n      logger.error('Channel: Fetching messages failed', error);\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_SUCESS,\n        payload: {\n          messages: [],\n          hasMore: false,\n          lastMessageTimeStamp: 0,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([null, error]);\n    }).finally(function () {\n      currentGroupChannel.markAsRead();\n    });\n  }, [currentGroupChannel, lastMessageTimeStamp, replyType]);\n}\n\nvar RESULT_SIZE = 30;\n\nfunction useScrollDownCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      latestFetchedMessageTimeStamp = _ref.latestFetchedMessageTimeStamp,\n      userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n      hasMoreToBottom = _ref.hasMoreToBottom,\n      replyType = _ref.replyType;\n  var logger = _ref2.logger,\n      messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk;\n  return useCallback(function (cb) {\n    if (!hasMoreToBottom) {\n      return;\n    }\n\n    var _sdk$appInfo = sdk.appInfo,\n        appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n    var useReaction = appInfo.isUsingReaction || false;\n    var messageListParams = new sdk.MessageListParams();\n    messageListParams.nextResultSize = RESULT_SIZE;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach(function (key) {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n\n    logger.info('Channel: Fetching later messages', {\n      currentGroupChannel: currentGroupChannel,\n      userFilledMessageListQuery: userFilledMessageListQuery\n    });\n    currentGroupChannel.getMessagesByTimestamp(latestFetchedMessageTimeStamp || new Date().getTime(), messageListParams).then(function (messages) {\n      var messagesLength = messages && messages.length || 0;\n      var hasMoreMessages = messagesLength > 0 && messageListParams.nextResultSize === messagesLength;\n      var lastMessageTs = hasMoreMessages ? messages[messages.length - 1].createdAt : null;\n      messagesDispatcher({\n        type: GET_NEXT_MESSAGES_SUCESS,\n        payload: {\n          messages: messages,\n          hasMoreToBottom: hasMoreMessages,\n          latestFetchedMessageTimeStamp: lastMessageTs,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([messages, null]);\n    }).catch(function (error) {\n      logger.error('Channel: Fetching later messages failed', error);\n      messagesDispatcher({\n        type: GET_NEXT_MESSAGES_FAILURE,\n        payload: {\n          messages: [],\n          hasMoreToBottom: false,\n          latestFetchedMessageTimeStamp: 0,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([null, error]);\n    }).finally(function () {\n      currentGroupChannel.markAsRead();\n    });\n  }, [currentGroupChannel, latestFetchedMessageTimeStamp, hasMoreToBottom, replyType]);\n}\n\nfunction useDeleteMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      messagesDispatcher = _ref.messagesDispatcher;\n  var logger = _ref2.logger;\n  return useCallback(function (message, cb) {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    var requestState = message.requestState;\n    logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState); // Message is only on local\n\n    if (requestState === 'failed' || requestState === 'pending') {\n      logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n      messagesDispatcher({\n        type: ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId\n      });\n\n      if (cb) {\n        cb();\n      }\n\n      return;\n    } // Message is on server\n\n\n    currentGroupChannel.deleteMessage(message, function (err) {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n\n      if (cb) {\n        cb(err);\n      }\n\n      if (!err) {\n        logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: message.messageId\n        });\n      } else {\n        logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n      }\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nfunction useUpdateMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      messagesDispatcher = _ref.messagesDispatcher,\n      onBeforeUpdateUserMessage = _ref.onBeforeUpdateUserMessage;\n  var logger = _ref2.logger,\n      pubSub = _ref2.pubSub,\n      sdk = _ref2.sdk;\n  return useCallback(function (messageId, text, cb) {\n    var createParamsDefault = function createParamsDefault(txt) {\n      var params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    var createCustomPrams = onBeforeUpdateUserMessage && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    var params = onBeforeUpdateUserMessage ? onBeforeUpdateUserMessage(text) : createParamsDefault(text);\n    currentGroupChannel.updateUserMessage(messageId, params, function (r, e) {\n      logger.info('Channel: Updating message!', params);\n      var swapParams = sdk.getErrorFirstCallback();\n      var message = r;\n      var err = e;\n\n      if (swapParams) {\n        message = e;\n        err = r;\n      }\n\n      if (cb) {\n        cb(err, message);\n      }\n\n      if (!err) {\n        logger.info('Channel: Updating message success!', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentGroupChannel,\n            message: message\n          }\n        });\n        pubSub.publish(UPDATE_USER_MESSAGE, {\n          message: message,\n          channel: currentGroupChannel\n        });\n      } else {\n        logger.warning('Channel: Updating message failed!', err);\n      }\n    });\n  }, [currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nfunction useResendMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      messagesDispatcher = _ref.messagesDispatcher;\n  var logger = _ref2.logger;\n  return useCallback(function (failedMessage) {\n    logger.info('Channel: Resending message has started', failedMessage);\n    var messageType = failedMessage.messageType,\n        file = failedMessage.file;\n\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: RESEND_MESSAGEGE_START,\n        payload: failedMessage\n      }); // userMessage\n\n      if (messageType === 'user') {\n        currentGroupChannel.resendUserMessage(failedMessage).then(function (message) {\n          logger.info('Channel: Resending message success!', {\n            message: message\n          });\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_SUCESS,\n            payload: message\n          });\n        }).catch(function (e) {\n          logger.warning('Channel: Resending message failed!', {\n            e: e\n          }); // eslint-disable-next-line no-param-reassign\n\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: failedMessage\n          });\n        }); // eslint-disable-next-line no-param-reassign\n\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: RESEND_MESSAGEGE_START,\n          payload: failedMessage\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel.resendFileMessage(failedMessage, file).then(function (message) {\n          logger.info('Channel: Resending file message success!', {\n            message: message\n          });\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_SUCESS,\n            payload: message\n          });\n        }).catch(function (e) {\n          logger.warning('Channel: Resending file message failed!', {\n            e: e\n          }); // eslint-disable-next-line no-param-reassign\n\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: failedMessage\n          });\n        }); // eslint-disable-next-line no-param-reassign\n\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: RESEND_MESSAGEGE_START,\n          payload: failedMessage\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nfunction useSendMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      onBeforeSendUserMessage = _ref.onBeforeSendUserMessage;\n  var sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      pubSub = _ref2.pubSub,\n      messagesDispatcher = _ref2.messagesDispatcher;\n  var messageInputRef = useRef(null);\n  var sendMessage = useCallback(function () {\n    var quoteMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var text = messageInputRef.current.value;\n\n    var createParamsDefault = function createParamsDefault(txt) {\n      var message = typeof txt === 'string' ? txt.trim() : txt;\n      var params = new sdk.UserMessageParams();\n      params.message = message;\n\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n\n      return params;\n    };\n\n    var createCustomPrams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n    }\n\n    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text, quoteMessage) : createParamsDefault(text);\n    logger.info('Channel: Sending message has started', params);\n    var pendingMsg = currentGroupChannel.sendUserMessage(params, function (res, err) {\n      var swapParams = sdk.getErrorFirstCallback();\n      var message = res;\n      var error = err;\n\n      if (swapParams) {\n        message = err;\n        error = res;\n      } // sending params instead of pending message\n      // to make sure that we can resend the message once it fails\n\n\n      if (error) {\n        logger.warning('Channel: Sending message failed!', {\n          message: message\n        });\n        messagesDispatcher({\n          type: SEND_MESSAGEGE_FAILURE,\n          payload: message\n        });\n        return;\n      }\n\n      logger.info('Channel: Sending message success!', message);\n      messagesDispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    });\n    pubSub.publish(SEND_MESSAGE_START, {\n      /* pubSub is used instead of messagesDispatcher\n        to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n      message: pendingMsg,\n      channel: currentGroupChannel\n    });\n    setTimeout(function () {\n      return scrollIntoLast();\n    });\n  }, [currentGroupChannel, onBeforeSendUserMessage]);\n  return [messageInputRef, sendMessage];\n}\n\nfunction useSendFileMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      onBeforeSendFileMessage = _ref.onBeforeSendFileMessage,\n      _ref$imageCompression = _ref.imageCompression,\n      imageCompression = _ref$imageCompression === void 0 ? {} : _ref$imageCompression;\n  var sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      pubSub = _ref2.pubSub,\n      messagesDispatcher = _ref2.messagesDispatcher;\n  var sendMessage = useCallback(function (file) {\n    var quoteMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var compressionRate = imageCompression.compressionRate,\n        resizingWidth = imageCompression.resizingWidth,\n        resizingHeight = imageCompression.resizingHeight;\n    var createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n    var compressibleFileType = file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg';\n    var compressibleRatio = compressionRate > 0 && compressionRate < 1; // pxToNumber returns null if values are invalid\n\n    var compressibleDiamensions = pxToNumber(resizingWidth) || pxToNumber(resizingHeight);\n    var canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    var createParamsDefault = function createParamsDefault(file_) {\n      var params = new sdk.FileMessageParams();\n      params.file = file_;\n\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n\n      return params;\n    };\n\n    if (canCompressImage) {\n      // Using image compression\n      try {\n        var image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n\n        image.onload = function () {\n          URL.revokeObjectURL(image.src);\n          var canvas = document.createElement('canvas');\n          var imageWdith = image.naturalWidth || image.width;\n          var imageHeight = image.naturalHeight || image.height;\n          var targetWidth = pxToNumber(resizingWidth) || imageWdith;\n          var targetHeight = pxToNumber(resizingHeight) || imageHeight; // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          var context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(function (newImageBlob) {\n            var compressedFile = new File([newImageBlob], file.name, {\n              type: file.type\n            });\n\n            if (createCustomParams) {\n              logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n            }\n\n            var params = createCustomParams ? onBeforeSendFileMessage(compressedFile, quoteMessage) : createParamsDefault(compressedFile);\n            logger.info('Channel: Uploading file message start!', params);\n            var pendingMessage = currentGroupChannel.sendFileMessage(params, function (response, err) {\n              var swapParams = sdk.getErrorFirstCallback();\n\n              var _ref3 = swapParams ? [err, response] : [response, err],\n                  _ref4 = _slicedToArray(_ref3, 2),\n                  message = _ref4[0],\n                  error = _ref4[1];\n\n              if (error) {\n                // sending params instead of pending message\n                // to make sure that we can resend the message once it fails\n                logger.error('Channel: Sending file message failed!', {\n                  message: message,\n                  error: error\n                });\n                message.localUrl = URL.createObjectURL(compressedFile);\n                message.file = compressedFile;\n                messagesDispatcher({\n                  type: SEND_MESSAGEGE_FAILURE,\n                  payload: message\n                });\n                return;\n              }\n\n              logger.info('Channel: Sending file message success!', message);\n              messagesDispatcher({\n                type: SEND_MESSAGEGE_SUCESS,\n                payload: message\n              });\n            });\n            pubSub.publish(SEND_MESSAGE_START, {\n              /* pubSub is used instead of messagesDispatcher\n                to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n              message: _objectSpread2(_objectSpread2({}, pendingMessage), {}, {\n                url: URL.createObjectURL(compressedFile),\n                // pending thumbnail message seems to be failed\n                requestState: 'pending'\n              }),\n              channel: currentGroupChannel\n            });\n            setTimeout(function () {\n              return scrollIntoLast();\n            }, 1000);\n          }, file.type, compressionRate);\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else {\n      // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n\n      var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n      var pendingMsg = currentGroupChannel.sendFileMessage(params, function (response, err) {\n        var swapParams = sdk.getErrorFirstCallback();\n\n        var _ref5 = swapParams ? [err, response] : [response, err],\n            _ref6 = _slicedToArray(_ref5, 2),\n            message = _ref6[0],\n            error = _ref6[1];\n\n        if (error) {\n          // sending params instead of pending message\n          // to make sure that we can resend the message once it fails\n          logger.error('Channel: Sending file message failed!', {\n            message: message,\n            error: error\n          });\n          message.localUrl = URL.createObjectURL(file);\n          message.file = file;\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: message\n          });\n          return;\n        }\n\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: SEND_MESSAGEGE_SUCESS,\n          payload: message\n        });\n      });\n      pubSub.publish(SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: _objectSpread2(_objectSpread2({}, pendingMsg), {}, {\n          url: URL.createObjectURL(file),\n          // pending thumbnail message seems to be failed\n          requestState: 'pending'\n        }),\n        channel: currentGroupChannel\n      });\n      setTimeout(function () {\n        return scrollIntoLast();\n      }, 1000);\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n\nvar ReactionButton = /*#__PURE__*/React__default.forwardRef(function (props, ref) {\n  var className = props.className,\n      width = props.width,\n      height = props.height,\n      selected = props.selected,\n      _onClick = props.onClick,\n      children = props.children;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), [\"sendbird-reaction-button\".concat(selected ? '--selected' : '')]).join(' '),\n    ref: ref,\n    role: \"button\",\n    style: {\n      width: typeof width === 'string' ? \"\".concat(width.slice(0, -2) - 2, \"px\") : \"\".concat(width - 2, \"px\"),\n      height: typeof height === 'string' ? \"\".concat(height.slice(0, -2) - 2, \"px\") : \"\".concat(height - 2, \"px\")\n    },\n    onClick: function onClick(e) {\n      return _onClick(e);\n    },\n    onKeyDown: function onKeyDown(e) {\n      return _onClick(e);\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-reaction-button__inner\"\n  }, children));\n});\nReactionButton.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.element.isRequired\n};\nReactionButton.defaultProps = {\n  className: '',\n  width: '36px',\n  height: '36px',\n  selected: false,\n  onClick: function onClick() {}\n};\n\nfunction useMemoizedEmojiListItems(_ref, _ref2) {\n  var emojiContainer = _ref.emojiContainer,\n      toggleReaction = _ref.toggleReaction;\n  var useReaction = _ref2.useReaction,\n      logger = _ref2.logger,\n      userId = _ref2.userId,\n      emojiAllList = _ref2.emojiAllList;\n  /* eslint-disable react/prop-types */\n\n  return useMemo(function () {\n    return function (_ref3) {\n      var parentRef = _ref3.parentRef,\n          parentContainRef = _ref3.parentContainRef,\n          message = _ref3.message,\n          closeDropdown = _ref3.closeDropdown,\n          _ref3$spaceFromTrigge = _ref3.spaceFromTrigger,\n          spaceFromTrigger = _ref3$spaceFromTrigge === void 0 ? {} : _ref3$spaceFromTrigge;\n\n      if (!useReaction || !(parentRef || parentContainRef || message || closeDropdown)) {\n        logger.warning('Channel: Invalid Params in memoizedEmojiListItems');\n        return null;\n      }\n\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: parentRef,\n        parentContainRef: parentContainRef,\n        closeDropdown: closeDropdown,\n        spaceFromTrigger: spaceFromTrigger\n      }, emojiAllList.map(function (emoji) {\n        var reactedReaction = message.reactions.filter(function (reaction) {\n          return reaction.key === emoji.key;\n        })[0];\n        var isReacted = reactedReaction ? !(reactedReaction.userIds.indexOf(userId) < 0) : false;\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function onClick() {\n            closeDropdown();\n            toggleReaction(message, emoji.key, isReacted);\n          }\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: emoji.url,\n          width: \"28px\",\n          height: \"28px\",\n          defaultComponent: /*#__PURE__*/React__default.createElement(Icon, {\n            width: \"28px\",\n            height: \"28px\",\n            type: IconTypes.QUESTION\n          })\n        }));\n      }));\n    };\n  }, [emojiContainer, toggleReaction]);\n}\n\nfunction useToggleReactionCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel;\n  var logger = _ref2.logger;\n  return useCallback(function (message, key, isReacted) {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key).then(function (res) {\n        logger.info('Delete reaction success', res);\n      }).catch(function (err) {\n        logger.warning('Delete reaction failed', err);\n      });\n      return;\n    }\n\n    currentGroupChannel.addReaction(message, key).then(function (res) {\n      logger.info('Add reaction success', res);\n    }).catch(function (err) {\n      logger.warning('Add reaction failed', err);\n    });\n  }, [currentGroupChannel]);\n}\n\nfunction useScrollToMessage(_a, _b) {\n  var setIntialTimeStamp = _a.setIntialTimeStamp,\n      setAnimatedMessageId = _a.setAnimatedMessageId,\n      allMessages = _a.allMessages;\n  var logger = _b.logger;\n  return useCallback(function (createdAt, messageId) {\n    var isPresent = allMessages.find(function (m) {\n      return m.messageId === messageId;\n    });\n    setAnimatedMessageId(null);\n    setTimeout(function () {\n      if (isPresent) {\n        logger.info('Channel: scroll to message - message is present');\n        setAnimatedMessageId(messageId);\n      } else {\n        logger.info('Channel: scroll to message - fetching older messages');\n        setIntialTimeStamp(null);\n        setIntialTimeStamp(createdAt);\n        setAnimatedMessageId(messageId);\n      }\n    });\n  }, [setIntialTimeStamp, setAnimatedMessageId, allMessages]);\n}\n\nvar MessageStatusTypes = getOutgoingMessageStates();\n\nfunction MessageStatus(_ref) {\n  var _iconType, _iconColor;\n\n  var className = _ref.className,\n      message = _ref.message,\n      channel = _ref.channel,\n      status = _ref.status;\n  var showMessageStatusIcon = (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel !== null && channel !== void 0 && channel.isSuper) && !(channel !== null && channel !== void 0 && channel.isPublic) && !(channel !== null && channel !== void 0 && channel.isBroadcast);\n  var iconType = (_iconType = {}, _defineProperty(_iconType, MessageStatusTypes.SENT, IconTypes.DONE), _defineProperty(_iconType, MessageStatusTypes.DELIVERED, IconTypes.DONE_ALL), _defineProperty(_iconType, MessageStatusTypes.READ, IconTypes.DONE_ALL), _defineProperty(_iconType, MessageStatusTypes.FAILED, IconTypes.ERROR), _iconType);\n  var iconColor = (_iconColor = {}, _defineProperty(_iconColor, MessageStatusTypes.SENT, IconColors.SENT), _defineProperty(_iconColor, MessageStatusTypes.DELIVERED, IconColors.SENT), _defineProperty(_iconColor, MessageStatusTypes.READ, IconColors.READ), _defineProperty(_iconColor, MessageStatusTypes.FAILED, IconColors.ERROR), _iconColor);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-message-status']).join(' ')\n  }, showMessageStatusIcon && /*#__PURE__*/React__default.createElement(\"div\", null, status === MessageStatusTypes.PENDING ? /*#__PURE__*/React__default.createElement(Loader, {\n    className: \"sendbird-message-status__icon\",\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-message-status__icon\",\n    type: iconType[status] || IconTypes.ERROR,\n    fillColor: iconColor[status],\n    width: \"16px\",\n    height: \"16px\"\n  })), isSentStatus(status) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-status__text\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getMessageCreatedAt$1(message)));\n}\n\nMessageStatus.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  message: PropTypes.shape({\n    createdAt: PropTypes.number,\n    sender: PropTypes.shape({\n      friendName: PropTypes.string,\n      nickname: PropTypes.string,\n      userId: PropTypes.string,\n      profileUrl: PropTypes.string\n    }),\n    sendingStatus: PropTypes.string\n  }),\n  channel: PropTypes.shape({\n    isGroupChannel: PropTypes.func,\n    isSuper: PropTypes.bool,\n    isBroadcast: PropTypes.bool,\n    isPublic: PropTypes.bool\n  }),\n  status: PropTypes.string\n};\nMessageStatus.defaultProps = {\n  className: '',\n  message: null,\n  channel: null,\n  status: ''\n};\n\nfunction MessageItemMenu(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      channel = _a.channel,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      replyType = _a.replyType,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage,\n      setQuoteMessage = _a.setQuoteMessage,\n      setSupposedHover = _a.setSupposedHover;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var triggerRef = useRef(null);\n  var containerRef = useRef(null);\n  var showMenuItemCopy = isUserMessage(message);\n  var showMenuItemReply = replyType === 'QUOTE_REPLY' && !isFailedMessage(channel, message) && !isPendingMessage(channel, message);\n  var showMenuItemEdit = isUserMessage(message) && isSentMessage(channel, message) && isByMe;\n  var showMenuItemResend = isFailedMessage(channel, message) && ((_b = message === null || message === void 0 ? void 0 : message.isResendable) === null || _b === void 0 ? void 0 : _b.call(message)) && isByMe;\n  var showMenuItemDelete = !isPendingMessage(channel, message) && isByMe;\n\n  if (!(showMenuItemCopy || showMenuItemReply || showMenuItemEdit || showMenuItemResend || showMenuItemDelete)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-item-menu']),\n    ref: containerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-message-item-menu__trigger\",\n        ref: triggerRef,\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n          setSupposedHover(true);\n        },\n        onBlur: function onBlur() {\n          setSupposedHover(false);\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        className: \"sendbird-message-item-menu__trigger__icon\",\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(close) {\n      var _a;\n\n      var closeDropdown = function closeDropdown() {\n        close();\n        setSupposedHover(false);\n      };\n\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        className: \"sendbird-message-item-menu__list\",\n        parentRef: triggerRef,\n        parentContainRef: containerRef,\n        closeDropdown: closeDropdown,\n        openLeft: isByMe\n      }, showMenuItemCopy && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-copy\",\n        onClick: function onClick() {\n          var _a;\n\n          copyToClipboard((_a = message) === null || _a === void 0 ? void 0 : _a.message);\n          closeDropdown();\n        }\n      }, stringSet.MESSAGE_MENU__COPY), showMenuItemReply && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-reply\",\n        onClick: function onClick() {\n          setQuoteMessage(message);\n          closeDropdown();\n        },\n        disable: (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0\n      }, stringSet.MESSAGE_MENU__REPLY), showMenuItemEdit && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-edit\",\n        onClick: function onClick() {\n          if (!disabled) {\n            showEdit(true);\n            closeDropdown();\n          }\n        }\n      }, stringSet.MESSAGE_MENU__EDIT), showMenuItemResend && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-resend\",\n        onClick: function onClick() {\n          if (!disabled) {\n            resendMessage(message);\n            closeDropdown();\n          }\n        }\n      }, stringSet.MESSAGE_MENU__RESEND), showMenuItemDelete && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-delete\",\n        onClick: function onClick() {\n          if (!disabled) {\n            showRemove(true);\n            closeDropdown();\n          }\n        },\n        disable: ((_a = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) > 0\n      }, stringSet.MESSAGE_MENU__DELETE));\n    }\n  }));\n}\n\nfunction MessageItemReactionMenu(_a) {\n  var className = _a.className,\n      message = _a.message,\n      channel = _a.channel,\n      userId = _a.userId,\n      _b = _a.spaceFromTrigger,\n      spaceFromTrigger = _b === void 0 ? {} : _b,\n      emojiContainer = _a.emojiContainer,\n      toggleReaction = _a.toggleReaction,\n      setSupposedHover = _a.setSupposedHover;\n  var triggerRef = useRef(null);\n  var containerRef = useRef(null);\n\n  if (isPendingMessage(channel, message) || isFailedMessage(channel, message)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-item-reaction-menu']),\n    ref: containerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-message-item-reaction-menu__trigger\",\n        ref: triggerRef,\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n          setSupposedHover(true);\n        },\n        onBlur: function onBlur() {\n          setSupposedHover(false);\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        className: \"sendbird-message-item-reaction-menu__trigger__icon\",\n        type: IconTypes.EMOJI_MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(close) {\n      var closeDropdown = function closeDropdown() {\n        close();\n        setSupposedHover(false);\n      };\n\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: triggerRef,\n        parentContainRef: containerRef,\n        closeDropdown: closeDropdown,\n        spaceFromTrigger: spaceFromTrigger\n      }, getEmojiListAll(emojiContainer).map(function (emoji) {\n        var _a, _b, _c;\n\n        var isReacted = (_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.filter(function (reaction) {\n          return reaction.key === emoji.key;\n        })[0]) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) {\n          return reactorId === userId;\n        });\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function onClick() {\n            closeDropdown();\n            toggleReaction(message, emoji.key, isReacted);\n          }\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: emoji.url,\n          width: \"28px\",\n          height: \"28px\",\n          placeHolder: function placeHolder(style) {\n            return /*#__PURE__*/React__default.createElement(\"div\", {\n              style: style\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              type: IconTypes.QUESTION,\n              fillColor: IconColors.ON_BACKGROUND_3,\n              width: \"28px\",\n              height: \"28px\"\n            }));\n          }\n        }));\n      }));\n    }\n  }));\n}\n\nfunction Tooltip(_ref) {\n  var className = _ref.className,\n      children = _ref.children;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-tooltip']).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-tooltip__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONCONTENT_1\n  }, children));\n}\n\nTooltip.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.string), PropTypes.string])\n};\nTooltip.defaultProps = {\n  className: '',\n  children: ''\n};\nvar SPACE_FROM_TRIGGER = 8;\n\nfunction TooltipWrapper(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      hoverTooltip = _ref.hoverTooltip;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showHoverTooltip = _useState2[0],\n      setShowHoverTooltip = _useState2[1];\n\n  var childrenRef = useRef(null);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-tooltip-wrapper']).join(' '),\n    onMouseOver: function onMouseOver() {\n      setShowHoverTooltip(true);\n    },\n    onFocus: function onFocus() {\n      setShowHoverTooltip(true);\n    },\n    onMouseOut: function onMouseOut() {\n      setShowHoverTooltip(false);\n    },\n    onBlur: function onBlur() {\n      setShowHoverTooltip(false);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__children\",\n    ref: childrenRef\n  }, children), showHoverTooltip && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__hover-tooltip\",\n    style: {\n      bottom: \"calc(100% + \".concat(SPACE_FROM_TRIGGER, \"px)\")\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__hover-tooltip__inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container\",\n    style: {\n      left: childrenRef.current && \"calc(\".concat(childrenRef.current.offsetWidth / 2, \"px - 50%)\")\n    }\n  }, hoverTooltip))));\n}\n\nTooltipWrapper.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  children: PropTypes.element.isRequired,\n  hoverTooltip: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\nTooltipWrapper.defaultProps = {\n  className: ''\n};\nvar ReactionBadge = /*#__PURE__*/React__default.forwardRef(function (props, ref) {\n  var className = props.className,\n      children = props.children,\n      count = props.count,\n      selected = props.selected,\n      isAdd = props.isAdd,\n      onClick = props.onClick;\n\n  var getClassNameTail = function getClassNameTail() {\n    if (selected && !isAdd) {\n      return '--selected';\n    }\n\n    if (isAdd) {\n      return '--is-add';\n    }\n\n    return '';\n  };\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), [\"sendbird-reaction-badge\".concat(getClassNameTail())]).join(' '),\n    role: \"button\",\n    ref: ref,\n    onClick: onClick,\n    onKeyDown: onClick,\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-reaction-badge__inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-reaction-badge__inner__icon\"\n  }, children), /*#__PURE__*/React__default.createElement(Label, {\n    className: children && count && 'sendbird-reaction-badge__inner__count',\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_1\n  }, count)));\n});\nReactionBadge.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  children: PropTypes.element.isRequired,\n  count: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n  isAdd: PropTypes.bool,\n  onClick: PropTypes.func\n};\nReactionBadge.defaultProps = {\n  className: '',\n  count: '',\n  selected: false,\n  isAdd: false,\n  onClick: function onClick() {}\n};\n\nfunction EmojiReactions2(_a) {\n  var _b, _c;\n\n  var className = _a.className,\n      userId = _a.userId,\n      message = _a.message,\n      emojiContainer = _a.emojiContainer,\n      memberNicknamesMap = _a.memberNicknamesMap,\n      _d = _a.spaceFromTrigger,\n      spaceFromTrigger = _d === void 0 ? {} : _d,\n      _e = _a.isByMe,\n      isByMe = _e === void 0 ? false : _e,\n      toggleReaction = _a.toggleReaction;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var emojisMap = getEmojiMapAll(emojiContainer);\n  var addReactionRef = useRef(null);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-emoji-reactions', isByMe ? 'outgoing' : 'incoming'])\n  }, ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 && message.reactions.map(function (reaction) {\n    var _a, _b;\n\n    var reactedByMe = isReactedBy(userId, reaction);\n    return /*#__PURE__*/React__default.createElement(TooltipWrapper, {\n      className: \"sendbird-emoji-reactions__reaction-badge\",\n      key: reaction === null || reaction === void 0 ? void 0 : reaction.key,\n      hoverTooltip: ((_a = reaction === null || reaction === void 0 ? void 0 : reaction.userIds) === null || _a === void 0 ? void 0 : _a.length) > 0 && /*#__PURE__*/React__default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet))\n    }, /*#__PURE__*/React__default.createElement(ReactionBadge, {\n      count: reaction.userIds.length,\n      selected: reactedByMe,\n      onClick: function onClick() {\n        return toggleReaction(message, reaction.key, reactedByMe);\n      }\n    }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n      circle: true,\n      url: ((_b = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _b === void 0 ? void 0 : _b.url) || '',\n      width: \"20px\",\n      height: \"20px\",\n      defaultComponent: /*#__PURE__*/React__default.createElement(Icon, {\n        width: \"20px\",\n        height: \"20px\",\n        type: IconTypes.QUESTION\n      })\n    })));\n  }), ((_c = message === null || message === void 0 ? void 0 : message.reactions) === null || _c === void 0 ? void 0 : _c.length) < emojisMap.size && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(ReactionBadge, {\n        className: \"sendbird-emoji-reactions__add-reaction-badge\",\n        ref: addReactionRef,\n        isAdd: true,\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.EMOJI_MORE,\n        fillColor: IconColors.ON_BACKGROUND_3,\n        width: \"20px\",\n        height: \"20px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: addReactionRef,\n        parentContainRef: addReactionRef,\n        closeDropdown: closeDropdown,\n        spacefromTrigger: spaceFromTrigger\n      }, getEmojiListAll(emojiContainer).map(function (emoji) {\n        var _a, _b, _c;\n\n        var isReacted = (_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.filter(function (reaction) {\n          return reaction.key === emoji.key;\n        })[0]) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) {\n          return reactorId === userId;\n        });\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function onClick() {\n            closeDropdown();\n            toggleReaction(message, emoji.key, isReacted);\n          }\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || '',\n          width: \"28px\",\n          height: \"28px\",\n          placeHolder: function placeHolder(style) {\n            return /*#__PURE__*/React__default.createElement(\"div\", {\n              style: style\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              type: IconTypes.QUESTION,\n              fillColor: IconColors.ON_BACKGROUND_3,\n              width: \"28px\",\n              height: \"28px\"\n            }));\n          }\n        }));\n      }));\n    }\n  }));\n}\n\nfunction AdminMessage(_ref) {\n  var className = _ref.className,\n      message = _ref.message;\n\n  if (!(message.isAdminMessage || message.messageType) || !message.isAdminMessage() || message.messageType !== 'admin') {\n    return null;\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-admin-message']).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-admin-message__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.message));\n}\n\nAdminMessage.propTypes = {\n  message: PropTypes.shape({\n    message: PropTypes.string,\n    messageType: PropTypes.string,\n    isAdminMessage: PropTypes.func\n  }),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n};\nAdminMessage.defaultProps = {\n  message: {},\n  className: ''\n};\n\nfunction TextMessageItemBody(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.mouseHover,\n      mouseHover = _d === void 0 ? false : _d;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-text-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, message === null || message === void 0 ? void 0 : message.message.split(/\\r/).map(function (word) {\n    return word === '' ? /*#__PURE__*/React__default.createElement(\"br\", {\n      key: word\n    }) : /*#__PURE__*/React__default.createElement(Label, {\n      key: word,\n      className: \"sendbird-text-message-item-body__message\",\n      type: LabelTypography.BODY_1,\n      color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n    }, word);\n  }), isEditedMessage(message) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-text-message-item-body__message edited\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, \" \" + stringSet.MESSAGE_EDITED + \" \"));\n}\n\nfunction FileMessageItemBody(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.mouseHover,\n      mouseHover = _d === void 0 ? false : _d;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-file-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-file-message-item-body__file-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: 'sendbird-file-message-item-body__file-icon__icon',\n    type: {\n      IMAGE: IconTypes.PHOTO,\n      VIDEO: IconTypes.PLAY,\n      AUDIO: IconTypes.FILE_AUDIO,\n      GIF: IconTypes.GIF,\n      OTHERS: IconTypes.FILE_DOCUMENT\n    }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)],\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-file-message-item-body__file-name\",\n    onClick: function onClick() {\n      window.open(message === null || message === void 0 ? void 0 : message.url);\n    },\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-file-message-item-body__file-name__text\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url)))));\n}\n\nfunction ThumbnailMessageItemBody(_a) {\n  var _b, _c;\n\n  var className = _a.className,\n      message = _a.message,\n      _d = _a.isByMe,\n      isByMe = _d === void 0 ? false : _d,\n      _e = _a.mouseHover,\n      mouseHover = _e === void 0 ? false : _e,\n      showFileViewer = _a.showFileViewer;\n  var _f = message.thumbnails,\n      thumbnails = _f === void 0 ? [] : _f;\n  var thumbnailUrl = thumbnails.length > 0 ? (_b = thumbnails[0]) === null || _b === void 0 ? void 0 : _b.url : '';\n\n  var _g = useState(false),\n      imageRendered = _g[0],\n      setImageRendered = _g[1];\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-thumbnail-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_c = message === null || message === void 0 ? void 0 : message.reactions) === null || _c === void 0 ? void 0 : _c.length) > 0 ? 'reactions' : '']),\n    onClick: function onClick() {\n      return showFileViewer(true);\n    }\n  }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-thumbnail-message-item-body__thumbnail\",\n    url: thumbnailUrl || (message === null || message === void 0 ? void 0 : message.url),\n    alt: message === null || message === void 0 ? void 0 : message.type,\n    width: \"360px\",\n    height: \"270px\",\n    onLoad: function onLoad() {\n      setImageRendered(true);\n    },\n    placeHolder: function placeHolder(style) {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-thumbnail-message-item-body__placeholder\",\n        style: style\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-thumbnail-message-item-body__placeholder__icon\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.PHOTO,\n        fillColor: IconColors.ON_BACKGROUND_2,\n        width: \"34px\",\n        height: \"34px\"\n      })));\n    }\n  }), isVideoMessage(message) && !thumbnailUrl && !imageRendered && /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-thumbnail-message-item-body__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: message === null || message === void 0 ? void 0 : message.url,\n    type: message === null || message === void 0 ? void 0 : message.type\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-thumbnail-message-item-body__image-cover\"\n  }), (isVideoMessage(message) || isGifMessage(message)) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-thumbnail-message-item-body__icon-wrapper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-thumbnail-message-item-body__icon-wrapper__icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF,\n    fillColor: IconColors.GRAY,\n    width: \"34px\",\n    height: \"34px\"\n  }))));\n}\n\nfunction OGMessageItemBody(_a) {\n  var _b, _c, _d, _e, _f, _g, _h, _j;\n\n  var className = _a.className,\n      message = _a.message,\n      _k = _a.isByMe,\n      isByMe = _k === void 0 ? false : _k,\n      _l = _a.mouseHover,\n      mouseHover = _l === void 0 ? false : _l;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var openOGUrl = function openOGUrl() {\n    var _a, _b;\n\n    if ((_a = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _a === void 0 ? void 0 : _a.url) window.open((_b = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _b === void 0 ? void 0 : _b.url);\n  };\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-og-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-og-message-item-body__text-bubble\"\n  }, message === null || message === void 0 ? void 0 : message.message.split(' ').map(function (word) {\n    return isUrl(word) ? /*#__PURE__*/React__default.createElement(LinkLabel, {\n      className: \"sendbird-og-message-item-body__text-bubble__message\",\n      key: uuidv4(),\n      src: word,\n      type: LabelTypography.BODY_1,\n      color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n    }, word) : /*#__PURE__*/React__default.createElement(Label, {\n      className: \"sendbird-og-message-item-body__text-bubble__message\",\n      key: uuidv4(),\n      type: LabelTypography.BODY_1,\n      color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n    }, word);\n  }), isEditedMessage(message) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__text-bubble__message\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, \" \" + stringSet.MESSAGE_EDITED + \" \")), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-og-message-item-body__og-thumbnail\",\n    onClick: openOGUrl\n  }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-og-message-item-body__og-thumbnail__image\",\n    url: ((_d = (_c = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _c === void 0 ? void 0 : _c.defaultImage) === null || _d === void 0 ? void 0 : _d.url) || '',\n    alt: (_f = (_e = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _e === void 0 ? void 0 : _e.defaultImage) === null || _f === void 0 ? void 0 : _f.alt // TODO: Change fixing width and height lengths\n    ,\n    width: \"320px\",\n    height: \"180px\",\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-og-message-item-body__og-thumbnail__place-holder\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"sendbird-og-message-item-body__og-thumbnail__place-holder__icon\",\n      type: IconTypes.THUMBNAIL_NONE,\n      width: \"56px\",\n      height: \"56px\"\n    }))\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-og-message-item-body__description\",\n    onClick: openOGUrl\n  }, ((_g = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _g === void 0 ? void 0 : _g.title) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__description__title\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, message.ogMetaData.title), ((_h = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _h === void 0 ? void 0 : _h.description) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__description__description\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, message.ogMetaData.description), ((_j = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _j === void 0 ? void 0 : _j.url) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__description__url\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.ogMetaData.url)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-og-message-item-body__cover\"\n  }));\n}\n\nfunction UnknownMessageItemBody(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.mouseHover,\n      mouseHover = _d === void 0 ? false : _d;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-unknown-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-unknown-message-item-body__header\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-unknown-message-item-body__description\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE));\n}\n\nfunction QuoteMessage(_a) {\n  var _b;\n\n  var _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n  var message = _a.message,\n      _p = _a.userId,\n      userId = _p === void 0 ? '' : _p,\n      _q = _a.isByMe,\n      isByMe = _q === void 0 ? false : _q,\n      className = _a.className,\n      _onClick = _a.onClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var parentMessage = message.parentMessage;\n  var parentMessageSender = (_c = parentMessage) === null || _c === void 0 ? void 0 : _c.sender;\n  var parentMessageSenderNickname = userId === (parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.nickname;\n  var parentMessageUrl = ((_d = parentMessage) === null || _d === void 0 ? void 0 : _d.url) || '';\n  var parentMessageType = (_e = parentMessage) === null || _e === void 0 ? void 0 : _e.type;\n  var currentMessageSenderNickname = userId === ((_f = message === null || message === void 0 ? void 0 : message.sender) === null || _f === void 0 ? void 0 : _f.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : (_g = message === null || message === void 0 ? void 0 : message.sender) === null || _g === void 0 ? void 0 : _g.nickname;\n\n  var _r = useState(false),\n      isThumbnailLoaded = _r[0],\n      setThumbnailLoaded = _r[1];\n\n  var uikitFileTypes = getUIKitFileTypes();\n  var splitFileName = ((_h = parentMessage) === null || _h === void 0 ? void 0 : _h.name) ? parentMessage.name.split('/') : parentMessageUrl.split('/');\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-quote-message', isByMe ? 'outgoing' : 'incoming']),\n    key: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId,\n    onClick: function onClick() {\n      if (_onClick) _onClick();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-to\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-quote-message__replied-to__icon\",\n    type: IconTypes.REPLY,\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"12px\",\n    height: \"12px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote-message__replied-to__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, currentMessageSenderNickname + \" \" + stringSet.QUOTED_MESSAGE__REPLIED_TO + \" \" + parentMessageSenderNickname)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message\"\n  }, isUserMessage(parentMessage) && ((_k = (_j = parentMessage) === null || _j === void 0 ? void 0 : _j.message) === null || _k === void 0 ? void 0 : _k.length) > 0 && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__text-message\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote-message__replied-message__text-message__word\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, (_l = parentMessage) === null || _l === void 0 ? void 0 : _l.message)), isThumbnailMessage(parentMessage) && parentMessageUrl && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message\"\n  }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__image\",\n    url: parentMessageUrl,\n    alt: parentMessageType,\n    width: \"144px\",\n    height: \"108px\",\n    onLoad: function onLoad() {\n      return setThumbnailLoaded(true);\n    },\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-quote-message__replied-message__thumbnail-message__placeholder\"\n    }, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO,\n      fillColor: IconColors.ON_BACKGROUND_2,\n      width: \"22px\",\n      height: \"22px\"\n    })))\n  }), isVideo(parentMessageType) && !(((_o = (_m = parentMessage) === null || _m === void 0 ? void 0 : _m.thumbnails) === null || _o === void 0 ? void 0 : _o.length) > 0) && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: parentMessageUrl,\n    type: parentMessageType\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.PLAY,\n    fillColor: IconColors.GRAY,\n    width: \"14px\",\n    height: \"14px\"\n  })))), isThumbnailLoaded && isGif(parentMessageType) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.GIF,\n    fillColor: IconColors.GRAY,\n    width: \"14px\",\n    height: \"14px\"\n  })))), isFileMessage(parentMessage) && !isSupportedFileView(parentMessage.type) && parentMessageUrl && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__file-message\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-quote-message__replied-message__file-message__type-icon\",\n    type: (_b = {}, _b[uikitFileTypes.IMAGE] = IconTypes.PHOTO, _b[uikitFileTypes.VIDEO] = IconTypes.PLAY, _b[uikitFileTypes.AUDIO] = IconTypes.FILE_AUDIO, _b[uikitFileTypes.GIF] = IconTypes.GIF, _b[uikitFileTypes.OTHERS] = IconTypes.FILE_DOCUMENT, _b)[getUIKitFileType(parentMessageType)],\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"16px\",\n    height: \"16px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote-message__replied-message__file-message__file-name\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, truncateString(splitFileName[splitFileName.length - 1])))));\n}\n\nfunction MessageContent(_a) {\n  var _b, _c, _d, _e;\n\n  var className = _a.className,\n      userId = _a.userId,\n      channel = _a.channel,\n      message = _a.message,\n      _f = _a.disabled,\n      disabled = _f === void 0 ? false : _f,\n      _g = _a.chainTop,\n      chainTop = _g === void 0 ? false : _g,\n      _h = _a.chainBottom,\n      chainBottom = _h === void 0 ? false : _h,\n      _j = _a.useReaction,\n      useReaction = _j === void 0 ? false : _j,\n      replyType = _a.replyType,\n      nicknamesMap = _a.nicknamesMap,\n      emojiContainer = _a.emojiContainer,\n      scrollToMessage = _a.scrollToMessage,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      showFileViewer = _a.showFileViewer,\n      resendMessage = _a.resendMessage,\n      toggleReaction = _a.toggleReaction,\n      setQuoteMessage = _a.setQuoteMessage;\n  var messageTypes = getUIKitMessageTypes();\n\n  var _k = useContext(UserProfileContext),\n      disableUserProfile = _k.disableUserProfile,\n      renderUserProfile = _k.renderUserProfile;\n\n  var avatarRef = useRef(null);\n\n  var _l = useState(false),\n      mouseHover = _l[0],\n      setMouseHover = _l[1];\n\n  var _m = useState(false),\n      supposedHover = _m[0],\n      setSupposedHover = _m[1];\n\n  var isByMe = userId === ((_c = (_b = message) === null || _b === void 0 ? void 0 : _b.sender) === null || _c === void 0 ? void 0 : _c.userId) || message.sendingStatus === 'pending' || message.sendingStatus === 'failed';\n  var isByMeClassName = isByMe ? 'outgoing' : 'incoming';\n  var chainTopClassName = chainTop ? 'chain-top' : '';\n  var useReactionClassName = useReaction ? 'use-reactions' : '';\n  var supposedHoverClassName = supposedHover ? 'supposed-hover' : '';\n  var useReplying = !!(replyType === 'QUOTE_REPLY' && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage));\n  var useReplyingClassName = useReplying ? 'use-quote' : '';\n\n  if (((_d = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _d === void 0 ? void 0 : _d.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) === 'admin') {\n    return /*#__PURE__*/React__default.createElement(AdminMessage, {\n      message: message\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-content', isByMeClassName]),\n    onMouseOver: function onMouseOver() {\n      return setMouseHover(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setMouseHover(false);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__left', useReactionClassName, isByMeClassName, useReplyingClassName])\n  }, !isByMe && !chainBottom &&\n  /*#__PURE__*/\n\n  /** user profile */\n  React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      var _a;\n\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-message-content__left__avatar\",\n        src: ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.profileUrl) || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) toggleDropdown();\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems\n      /**\n      * parentRef: For catching location(x, y) of MenuItems\n      * parentContainRef: For toggling more options(menus & reactions)\n      */\n      , {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: message === null || message === void 0 ? void 0 : message.sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: message.sender,\n        onSuccess: closeDropdown\n      }));\n    }\n  }), isByMe && !chainBottom && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__left__created-at', supposedHoverClassName])\n  }, /*#__PURE__*/React__default.createElement(MessageStatus, {\n    message: message,\n    channel: channel,\n    status: getOutgoingMessageState(channel, message)\n  })), isByMe && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-menu', useReactionClassName, supposedHoverClassName, isByMeClassName])\n  }, /*#__PURE__*/React__default.createElement(MessageItemMenu, {\n    className: \"sendbird-message-content-menu__normal-menu\",\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    disabled: disabled,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    setQuoteMessage: setQuoteMessage,\n    setSupposedHover: setSupposedHover\n  }), useReaction && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {\n    className: \"sendbird-message-content-menu__reaction-menu\",\n    message: message,\n    channel: channel,\n    userId: userId,\n    spaceFromTrigger: {},\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction,\n    setSupposedHover: setSupposedHover\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-content__middle\"\n  }, !isByMe && !chainTop && !useReplying && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-content__middle__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getSenderName(message)), useReplying ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])\n  }, /*#__PURE__*/React__default.createElement(QuoteMessage, {\n    message: message,\n    userId: userId,\n    isByMe: isByMe,\n    onClick: function onClick() {\n      var _a;\n\n      if (((_a = message === null || message === void 0 ? void 0 : message.parentMessage) === null || _a === void 0 ? void 0 : _a.createdAt) && (message === null || message === void 0 ? void 0 : message.parentMessageId)) {\n        scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n      }\n    }\n  })) : null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__body-container'])\n  }, isTextMessage(message) && /*#__PURE__*/React__default.createElement(TextMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), isOGMessage(message) && /*#__PURE__*/React__default.createElement(OGMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), getUIKitMessageType(message) === messageTypes.FILE && /*#__PURE__*/React__default.createElement(FileMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), isThumbnailMessage(message) && /*#__PURE__*/React__default.createElement(ThumbnailMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover,\n    showFileViewer: showFileViewer\n  }), getUIKitMessageType(message) === messageTypes.UNKNOWN && /*#__PURE__*/React__default.createElement(UnknownMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), useReaction && ((_e = message === null || message === void 0 ? void 0 : message.reactions) === null || _e === void 0 ? void 0 : _e.length) > 0 && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-reactions', !isByMe || isThumbnailMessage(message) || isOGMessage(message) ? '' : 'primary', mouseHover ? 'mouse-hover' : ''])\n  }, /*#__PURE__*/React__default.createElement(EmojiReactions2, {\n    userId: userId,\n    message: message,\n    isByMe: isByMe,\n    emojiContainer: emojiContainer,\n    memberNicknamesMap: nicknamesMap,\n    toggleReaction: toggleReaction\n  })))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__right', chainTopClassName, useReactionClassName, useReplyingClassName])\n  }, !isByMe && !chainBottom && /*#__PURE__*/React__default.createElement(Label, {\n    className: getClassName(['sendbird-message-content__right__created-at', supposedHoverClassName]),\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getMessageCreatedAt$1(message)), !isByMe && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])\n  }, useReaction && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {\n    className: \"sendbird-message-content-menu__reaction-menu\",\n    message: message,\n    channel: channel,\n    userId: userId,\n    spaceFromTrigger: {},\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction,\n    setSupposedHover: setSupposedHover\n  }), /*#__PURE__*/React__default.createElement(MessageItemMenu, {\n    className: \"sendbird-message-content-menu__normal-menu\",\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    disabled: disabled,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    setQuoteMessage: setQuoteMessage,\n    setSupposedHover: setSupposedHover\n  }))));\n}\n\nvar RemoveMessage = function RemoveMessage(props) {\n  var _message$threadInfo;\n\n  var onCloseModal = props.onCloseModal,\n      onDeleteMessage = props.onDeleteMessage,\n      message = props.message;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    type: ButtonTypes.DANGER,\n    disabled: (message === null || message === void 0 ? void 0 : (_message$threadInfo = message.threadInfo) === null || _message$threadInfo === void 0 ? void 0 : _message$threadInfo.replyCount) > 0,\n    onCancel: onCloseModal,\n    onSubmit: onDeleteMessage,\n    submitText: \"Delete\",\n    titleText: stringSet.MODAL__DELETE_MESSAGE__TITLE\n  });\n};\n\nRemoveMessage.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  onDeleteMessage: PropTypes.func.isRequired,\n  message: PropTypes.shape({\n    threadInfo: PropTypes.shape({\n      replyCount: PropTypes.number\n    })\n  }).isRequired\n};\n\nfunction MessageHoc(_ref) {\n  var message = _ref.message,\n      userId = _ref.userId,\n      disabled = _ref.disabled,\n      editDisabled = _ref.editDisabled,\n      hasSeparator = _ref.hasSeparator,\n      deleteMessage = _ref.deleteMessage,\n      updateMessage = _ref.updateMessage,\n      scrollToMessage = _ref.scrollToMessage,\n      resendMessage = _ref.resendMessage,\n      useReaction = _ref.useReaction,\n      replyType = _ref.replyType,\n      chainTop = _ref.chainTop,\n      chainBottom = _ref.chainBottom,\n      membersMap = _ref.membersMap,\n      emojiContainer = _ref.emojiContainer,\n      animatedMessageId = _ref.animatedMessageId,\n      highLightedMessageId = _ref.highLightedMessageId,\n      toggleReaction = _ref.toggleReaction,\n      quoteMessage = _ref.quoteMessage,\n      setQuoteMessage = _ref.setQuoteMessage,\n      renderCustomMessage = _ref.renderCustomMessage,\n      currentGroupChannel = _ref.currentGroupChannel;\n  var _message$sender = message.sender,\n      sender = _message$sender === void 0 ? {} : _message$sender;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showEdit = _useState2[0],\n      setShowEdit = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showRemove = _useState4[0],\n      setShowRemove = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showFileViewer = _useState6[0],\n      setShowFileViewer = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isAnimated = _useState8[0],\n      setIsAnimated = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isHighlighted = _useState10[0],\n      setIsHighlighted = _useState10[1];\n\n  var editMessageInputRef = useRef(null);\n  var useMessageScrollRef = useRef(null);\n  useLayoutEffect(function () {\n    if (highLightedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center'\n        });\n        setIsAnimated(false);\n        setTimeout(function () {\n          setIsHighlighted(true);\n        }, 500);\n      }\n    } else {\n      setIsHighlighted(false);\n    }\n  }, [highLightedMessageId, useMessageScrollRef.current, message.messageId]);\n  useLayoutEffect(function () {\n    if (animatedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center'\n        });\n        setIsHighlighted(false);\n        setTimeout(function () {\n          setIsAnimated(true);\n        }, 500);\n      }\n    } else {\n      setIsAnimated(false);\n    }\n  }, [animatedMessageId, useMessageScrollRef.current, message.messageId]);\n  var RenderedMessage = useMemo(function () {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, currentGroupChannel, chainTop, chainBottom); // TODO: Let's change this to object type on next major version up\n      // and add params 'hasSeparator' and 'menuDisabled', scrollToMessage\n    }\n\n    return null;\n  }, [message, message.message, renderCustomMessage]);\n  var isByMe = userId === sender.userId || message.requestState === 'pending' || message.requestState === 'failed';\n\n  if (RenderedMessage) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      ref: useMessageScrollRef,\n      className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : ''])\n    }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n      type: LabelTypography.CAPTION_2,\n      color: LabelColors.ONBACKGROUND_2\n    }, format(message.createdAt, 'MMMM dd, yyyy'))), /*#__PURE__*/React__default.createElement(RenderedMessage, {\n      message: message\n    }));\n  }\n\n  if (showEdit) {\n    return /*#__PURE__*/React__default.createElement(MessageInput, {\n      isEdit: true,\n      disabled: editDisabled,\n      ref: editMessageInputRef,\n      name: message.messageId,\n      onSendMessage: updateMessage,\n      onCancelEdit: function onCancelEdit() {\n        setShowEdit(false);\n      },\n      value: message.message\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: useMessageScrollRef,\n    className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : '']),\n    style: {\n      marginBottom: '2px'\n    }\n  }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, 'MMMM dd, yyyy'))), /*#__PURE__*/React__default.createElement(MessageContent, {\n    className: \"sendbird-message-hoc__message-content\",\n    userId: userId,\n    scrollToMessage: scrollToMessage,\n    channel: currentGroupChannel,\n    message: message,\n    disabled: disabled,\n    chainTop: chainTop,\n    chainBottom: chainBottom,\n    useReaction: useReaction,\n    replyType: replyType,\n    nicknamesMap: membersMap,\n    emojiContainer: emojiContainer,\n    showEdit: setShowEdit,\n    showRemove: setShowRemove,\n    showFileViewer: setShowFileViewer,\n    resendMessage: resendMessage,\n    toggleReaction: toggleReaction,\n    quoteMessage: quoteMessage,\n    setQuoteMessage: setQuoteMessage\n  }), showRemove && /*#__PURE__*/React__default.createElement(RemoveMessage, {\n    message: message,\n    onCloseModal: function onCloseModal() {\n      return setShowRemove(false);\n    },\n    onDeleteMessage: function onDeleteMessage() {\n      deleteMessage(message);\n\n      if ((message === null || message === void 0 ? void 0 : message.messageId) === (quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId)) {\n        setQuoteMessage(null);\n      }\n    }\n  }), showFileViewer && /*#__PURE__*/React__default.createElement(FileViewer, {\n    onClose: function onClose() {\n      return setShowFileViewer(false);\n    },\n    message: message,\n    onDelete: function onDelete() {\n      deleteMessage(message, function () {\n        setShowFileViewer(false);\n      });\n    },\n    isByMe: isByMe\n  }));\n}\n\nMessageHoc.propTypes = {\n  userId: PropTypes.string,\n  message: PropTypes.shape({\n    isFileMessage: PropTypes.func,\n    isAdminMessage: PropTypes.func,\n    isUserMessage: PropTypes.func,\n    isDateseparator: PropTypes.func,\n    // should be a number, but there's a bug in SDK shich returns string\n    messageId: PropTypes.number,\n    type: PropTypes.string,\n    createdAt: PropTypes.number,\n    message: PropTypes.string,\n    requestState: PropTypes.string,\n    messageType: PropTypes.string,\n    sender: PropTypes.shape({\n      userId: PropTypes.string\n    }),\n    ogMetaData: PropTypes.shape({}),\n    parentMessageId: PropTypes.number\n  }),\n  animatedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  highLightedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  renderCustomMessage: PropTypes.func,\n  currentGroupChannel: PropTypes.shape({}),\n  hasSeparator: PropTypes.bool,\n  disabled: PropTypes.bool,\n  editDisabled: PropTypes.bool,\n  deleteMessage: PropTypes.func.isRequired,\n  scrollToMessage: PropTypes.func,\n  updateMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  useReaction: PropTypes.bool.isRequired,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']).isRequired,\n  chainTop: PropTypes.bool.isRequired,\n  chainBottom: PropTypes.bool.isRequired,\n  membersMap: PropTypes.instanceOf(Map).isRequired,\n  emojiContainer: PropTypes.shape({\n    emojiCategories: PropTypes.arrayOf(PropTypes.shape({\n      emojis: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        url: PropTypes.string\n      }))\n    }))\n  }),\n  toggleReaction: PropTypes.func,\n  quoteMessage: PropTypes.shape({\n    messageId: PropTypes.string\n  }),\n  setQuoteMessage: PropTypes.func.isRequired\n};\nMessageHoc.defaultProps = {\n  userId: '',\n  editDisabled: false,\n  renderCustomMessage: null,\n  currentGroupChannel: {},\n  message: {},\n  hasSeparator: false,\n  disabled: false,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  toggleReaction: function toggleReaction() {},\n  scrollToMessage: function scrollToMessage() {},\n  emojiContainer: {},\n  quoteMessage: null\n};\n\nvar ConversationScroll = /*#__PURE__*/function (_Component) {\n  _inherits(ConversationScroll, _Component);\n\n  var _super = _createSuper(ConversationScroll);\n\n  function ConversationScroll() {\n    var _this;\n\n    _classCallCheck(this, ConversationScroll);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onScroll\", function (e) {\n      var _this$props = _this.props,\n          scrollRef = _this$props.scrollRef,\n          hasMore = _this$props.hasMore,\n          messagesDispatcher = _this$props.messagesDispatcher,\n          onScroll = _this$props.onScroll,\n          onScrollDown = _this$props.onScrollDown,\n          currentGroupChannel = _this$props.currentGroupChannel;\n      var element = e.target;\n      var scrollTop = element.scrollTop,\n          clientHeight = element.clientHeight,\n          scrollHeight = element.scrollHeight;\n\n      if (scrollTop === 0) {\n        if (!hasMore) {\n          return;\n        }\n\n        var nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n        var first = nodes && nodes[0];\n        onScroll(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              messages = _ref2[0];\n\n          if (messages) {\n            // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n            try {\n              first.scrollIntoView();\n            } catch (error) {//\n            }\n          }\n        });\n      }\n\n      if (clientHeight + scrollTop === scrollHeight) {\n        var _nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n\n        var last = _nodes && _nodes[_nodes.length - 1];\n        onScrollDown(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              messages = _ref4[0];\n\n          if (messages) {\n            // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n            try {\n              last.scrollIntoView();\n            } catch (error) {//\n            }\n          }\n        });\n      } // do this later\n\n\n      setTimeout(function () {\n        // mark as read if scroll is at end\n        if (clientHeight + scrollTop === scrollHeight) {\n          messagesDispatcher({\n            type: MARK_AS_READ\n          });\n          currentGroupChannel.markAsRead();\n        }\n      }, 500);\n    });\n\n    return _this;\n  }\n\n  _createClass(ConversationScroll, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          userId = _this$props2.userId,\n          disabled = _this$props2.disabled,\n          scrollRef = _this$props2.scrollRef,\n          membersMap = _this$props2.membersMap,\n          allMessages = _this$props2.allMessages,\n          scrollToMessage = _this$props2.scrollToMessage,\n          useReaction = _this$props2.useReaction,\n          replyType = _this$props2.replyType,\n          emojiAllMap = _this$props2.emojiAllMap,\n          editDisabled = _this$props2.editDisabled,\n          deleteMessage = _this$props2.deleteMessage,\n          updateMessage = _this$props2.updateMessage,\n          resendMessage = _this$props2.resendMessage,\n          renderCustomMessage = _this$props2.renderCustomMessage,\n          renderChatItem = _this$props2.renderChatItem,\n          animatedMessageId = _this$props2.animatedMessageId,\n          highLightedMessageId = _this$props2.highLightedMessageId,\n          emojiContainer = _this$props2.emojiContainer,\n          toggleReaction = _this$props2.toggleReaction,\n          useMessageGrouping = _this$props2.useMessageGrouping,\n          currentGroupChannel = _this$props2.currentGroupChannel,\n          memoizedEmojiListItems = _this$props2.memoizedEmojiListItems,\n          showScrollBot = _this$props2.showScrollBot,\n          onClickScrollBot = _this$props2.onClickScrollBot,\n          quoteMessage = _this$props2.quoteMessage,\n          setQuoteMessage = _this$props2.setQuoteMessage;\n\n      if (allMessages.length < 1) {\n        return /*#__PURE__*/React__default.createElement(PlaceHolder, {\n          className: \"sendbird-conversation__no-messages\",\n          type: PlaceHolderTypes.NO_MESSAGES\n        });\n      }\n\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__messages\"\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        ref: scrollRef,\n        className: \"sendbird-conversation__scroll-container\",\n        onScroll: this.onScroll\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__padding\"\n      }), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__messages-padding\"\n      }, allMessages.map(function (m, idx) {\n        var previousMessage = allMessages[idx - 1];\n        var nextMessage = allMessages[idx + 1];\n\n        var _ref5 = useMessageGrouping ? compareMessagesForGrouping(previousMessage, m, nextMessage) : [false, false],\n            _ref6 = _slicedToArray(_ref5, 2),\n            chainTop = _ref6[0],\n            chainBottom = _ref6[1];\n\n        var previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n        var currentCreatedAt = m.createdAt; // https://stackoverflow.com/a/41855608\n\n        var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));\n\n        if (renderChatItem) {\n          return /*#__PURE__*/React__default.createElement(\"div\", {\n            key: m.messageId || m.reqId,\n            className: \"sendbird-msg--scroll-ref\"\n          }, renderChatItem({\n            message: m,\n            animatedMessageId: animatedMessageId,\n            highLightedMessageId: highLightedMessageId,\n            channel: currentGroupChannel,\n            onDeleteMessage: deleteMessage,\n            onUpdateMessage: updateMessage,\n            onResendMessage: resendMessage,\n            onScrollToMessage: scrollToMessage,\n            onReplyMessage: setQuoteMessage,\n            emojiContainer: emojiContainer,\n            chainTop: chainTop,\n            chainBottom: chainBottom,\n            hasSeparator: hasSeparator,\n            menuDisabled: disabled\n          }));\n        }\n\n        return /*#__PURE__*/React__default.createElement(MessageHoc, {\n          animatedMessageId: animatedMessageId,\n          highLightedMessageId: highLightedMessageId,\n          renderCustomMessage: renderCustomMessage,\n          key: m.messageId || m.reqId,\n          userId: userId // show status for pending/failed messages\n          ,\n          message: m,\n          quoteMessage: quoteMessage,\n          scrollToMessage: scrollToMessage,\n          currentGroupChannel: currentGroupChannel,\n          disabled: disabled,\n          membersMap: membersMap,\n          chainTop: chainTop,\n          useReaction: useReaction,\n          replyType: replyType,\n          emojiAllMap: emojiAllMap,\n          emojiContainer: emojiContainer,\n          editDisabled: editDisabled,\n          hasSeparator: hasSeparator,\n          chainBottom: chainBottom,\n          updateMessage: updateMessage,\n          deleteMessage: deleteMessage,\n          resendMessage: resendMessage,\n          toggleReaction: toggleReaction,\n          setQuoteMessage: setQuoteMessage,\n          memoizedEmojiListItems: memoizedEmojiListItems\n        });\n      }))), showScrollBot && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__scroll-bottom-button\",\n        onClick: onClickScrollBot,\n        onKeyDown: onClickScrollBot,\n        tabIndex: 0,\n        role: \"button\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        width: \"24px\",\n        height: \"24px\",\n        type: IconTypes.CHEVRON_DOWN,\n        fillColor: IconColors.PRIMARY\n      })));\n    }\n  }]);\n\n  return ConversationScroll;\n}(Component);\n\nConversationScroll.propTypes = {\n  // https://stackoverflow.com/a/52646941\n  scrollRef: PropTypes.shape({\n    current: PropTypes.oneOfType([PropTypes.element, PropTypes.shape({})])\n  }).isRequired,\n  hasMore: PropTypes.bool,\n  messagesDispatcher: PropTypes.func.isRequired,\n  onScroll: PropTypes.func,\n  onScrollDown: PropTypes.func,\n  editDisabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  userId: PropTypes.string,\n  allMessages: PropTypes.arrayOf(PropTypes.shape({\n    createdAt: PropTypes.number\n  })).isRequired,\n  deleteMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  updateMessage: PropTypes.func.isRequired,\n  currentGroupChannel: PropTypes.shape({\n    markAsRead: PropTypes.func,\n    members: PropTypes.arrayOf(PropTypes.shape({}))\n  }).isRequired,\n  animatedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  highLightedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  renderChatItem: PropTypes.element,\n  renderCustomMessage: PropTypes.func,\n  scrollToMessage: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  showScrollBot: PropTypes.bool,\n  onClickScrollBot: PropTypes.func,\n  emojiContainer: PropTypes.shape({}),\n  emojiAllMap: PropTypes.instanceOf(Map),\n  membersMap: PropTypes.instanceOf(Map),\n  useMessageGrouping: PropTypes.bool,\n  toggleReaction: PropTypes.func,\n  memoizedEmojiListItems: PropTypes.func,\n  quoteMessage: PropTypes.shape({}),\n  setQuoteMessage: PropTypes.func.isRequired\n};\nConversationScroll.defaultProps = {\n  hasMore: false,\n  editDisabled: false,\n  disabled: false,\n  userId: '',\n  renderCustomMessage: null,\n  renderChatItem: null,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  onScroll: null,\n  onScrollDown: null,\n  useReaction: true,\n  replyType: 'NONE',\n  emojiContainer: {},\n  showScrollBot: false,\n  onClickScrollBot: function onClickScrollBot() {},\n  scrollToMessage: function scrollToMessage() {},\n  emojiAllMap: new Map(),\n  membersMap: new Map(),\n  useMessageGrouping: true,\n  toggleReaction: function toggleReaction() {},\n  memoizedEmojiListItems: function memoizedEmojiListItems() {\n    return '';\n  },\n  quoteMessage: null\n};\n\nfunction Notification(_ref) {\n  var count = _ref.count,\n      time = _ref.time,\n      onClick = _ref.onClick;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var timeArray = time.split(' ');\n  timeArray.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      className: \"sendbird-notification\",\n      onClick: onClick\n    }, /*#__PURE__*/React__default.createElement(Label, {\n      className: \"sendbird-notification__text\",\n      color: LabelColors.ONCONTENT_1,\n      type: LabelTypography.CAPTION_2\n    }, \"\".concat(count, \" \"), stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE, \" \".concat(timeArray.join(' '))), /*#__PURE__*/React__default.createElement(Icon, {\n      width: \"24px\",\n      height: \"24px\",\n      type: IconTypes.CHEVRON_DOWN,\n      fillColor: IconColors.CONTENT\n    }))\n  );\n}\n\nNotification.propTypes = {\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  time: PropTypes.string,\n  onClick: PropTypes.func.isRequired\n};\nNotification.defaultProps = {\n  count: 0,\n  time: ''\n};\n\nvar FrozenNotification = function FrozenNotification() {\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-notification sendbird-notification--frozen\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-notification__text\",\n    type: LabelTypography.CAPTION_2\n  }, stringSet.CHANNEL_FROZEN));\n};\n\nvar TypingIndicatorText = function TypingIndicatorText(_ref) {\n  var members = _ref.members;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  if (!members || members.length === 0) {\n    return '';\n  }\n\n  if (members && members.length === 1) {\n    return \"\".concat(members[0].nickname, \" \").concat(stringSet.TYPING_INDICATOR__IS_TYPING);\n  }\n\n  if (members && members.length === 2) {\n    return \"\".concat(members[0].nickname, \" \").concat(stringSet.TYPING_INDICATOR__AND, \" \").concat(members[1].nickname, \" \").concat(stringSet.TYPING_INDICATOR__ARE_TYPING);\n  }\n\n  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;\n};\n\nfunction TypingIndicator(props) {\n  var className = props.className,\n      channelUrl = props.channelUrl,\n      sb = props.sb,\n      logger = props.logger;\n\n  var _useState = useState(uuidv4()),\n      _useState2 = _slicedToArray(_useState, 2),\n      handlerId = _useState2[0],\n      setHandlerId = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      typingMembers = _useState4[0],\n      setTypingMembers = _useState4[1];\n\n  useEffect(function () {\n    if (sb && sb.ChannelHandler) {\n      sb.removeChannelHandler(handlerId);\n      var newHandlerId = uuidv4();\n      var handler = new sb.ChannelHandler(); // there is a possible warning in here - setState called after unmount\n\n      handler.onTypingStatusUpdated = function (groupChannel) {\n        logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);\n        var members = groupChannel.getTypingMembers();\n\n        if (groupChannel.url === channelUrl) {\n          setTypingMembers(members);\n        }\n      };\n\n      sb.addChannelHandler(newHandlerId, handler);\n      setHandlerId(newHandlerId);\n    }\n\n    return function () {\n      setTypingMembers([]);\n\n      if (sb && sb.removeChannelHandler) {\n        sb.removeChannelHandler(handlerId);\n      }\n    };\n  }, [channelUrl]);\n  return /*#__PURE__*/React__default.createElement(Label, {\n    className: className,\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, /*#__PURE__*/React__default.createElement(TypingIndicatorText, {\n    members: typingMembers\n  }));\n}\n\nTypingIndicator.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  channelUrl: PropTypes.string.isRequired,\n  sb: PropTypes.shape({\n    ChannelHandler: PropTypes.func,\n    removeChannelHandler: PropTypes.func,\n    addChannelHandler: PropTypes.func\n  }).isRequired,\n  logger: PropTypes.shape({\n    info: PropTypes.func\n  }).isRequired\n};\nTypingIndicator.defaultProps = {\n  className: ''\n};\nvar componentClassname = 'sendbird-quote_message_input__avatar';\n\nfunction QuoteMessageThumbnail(_a) {\n  var message = _a.message;\n\n  if (!isFileMessage(message)) {\n    return null;\n  }\n\n  var thumbnailUrl = message.thumbnails && message.thumbnails.length > 0 && message.thumbnails[0].url || isImageMessage(message) && message.url;\n\n  if (isThumbnailMessage(message) && thumbnailUrl) {\n    return /*#__PURE__*/React__default.createElement(ImageRenderer, {\n      className: componentClassname,\n      url: thumbnailUrl,\n      alt: message.type,\n      width: \"44px\",\n      height: \"44px\",\n      fixedSize: true\n    });\n  } else if (isAudioMessage(message)) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: componentClassname\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.FILE_AUDIO,\n      fillColor: IconColors.ON_BACKGROUND_2,\n      width: \"24px\",\n      height: \"24px\"\n    }));\n  } else {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: componentClassname\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.FILE_DOCUMENT,\n      fillColor: IconColors.ON_BACKGROUND_2,\n      width: \"24px\",\n      height: \"24px\"\n    }));\n  }\n}\n\nfunction QuoteMessageInput(_a) {\n  var _b;\n\n  var className = _a.className,\n      replyingMessage = _a.replyingMessage,\n      onClose = _a.onClose;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var fileMessage = replyingMessage;\n  var sender = (_b = replyingMessage) === null || _b === void 0 ? void 0 : _b.sender;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-quote_message_input', className])\n  }, /*#__PURE__*/React__default.createElement(QuoteMessageThumbnail, {\n    message: fileMessage\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote_message_input__body\",\n    style: {\n      width: \"calc(100% - \" + (fileMessage.isFileMessage() ? '164px' : '120px') + \")\",\n      left: fileMessage.isFileMessage() ? '92px' : '40px'\n    }\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote_message_input__body__sender-name\",\n    type: LabelTypography.CAPTION_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO + \" \" + (sender && sender.nickname ? sender.nickname : stringSet.NO_NAME)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote_message_input__body__message-content\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE, isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO, isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF, isUserMessage(replyingMessage) && replyingMessage.message, isFileMessage(fileMessage) && !isThumbnailMessage(fileMessage) && fileMessage.name)), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-quote_message_input__close-button\",\n    type: IconTypes.CLOSE,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"24px\",\n    height: \"24px\",\n    onClick: function onClick() {\n      return onClose(replyingMessage);\n    }\n  }));\n} // Logic required to handle message input rendering\n\n\nvar MessageInputWrapper = function MessageInputWrapper(_a, ref) {\n  var channel = _a.channel,\n      user = _a.user,\n      isOnline = _a.isOnline,\n      initialized = _a.initialized,\n      quoteMessage = _a.quoteMessage,\n      _onSendMessage = _a.onSendMessage,\n      _onFileUpload = _a.onFileUpload,\n      setQuoteMessage = _a.setQuoteMessage,\n      renderMessageInput = _a.renderMessageInput;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var disabled = !initialized || isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel) || !isOnline;\n  var isOperator$1 = isOperator(channel);\n  var isBroadcast = channel.isBroadcast; // custom message\n\n  if (renderMessageInput) {\n    return renderMessageInput({\n      channel: channel,\n      user: user,\n      disabled: disabled,\n      quoteMessage: quoteMessage\n    });\n  } // broadcast channel + not operator\n\n\n  if (isBroadcast && !isOperator$1) {\n    return null;\n  } // other conditions\n\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-input-wrapper\"\n  }, quoteMessage && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-input-wrapper__quote-message-input\"\n  }, /*#__PURE__*/React__default.createElement(QuoteMessageInput, {\n    replyingMessage: quoteMessage,\n    onClose: function onClose() {\n      return setQuoteMessage(null);\n    }\n  })), /*#__PURE__*/React__default.createElement(MessageInput, {\n    className: \"sendbird-message-input-wrapper__message-input\",\n    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,\n    placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || isDisabledBecauseMuted(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED,\n    ref: ref,\n    disabled: disabled,\n    onStartTyping: function onStartTyping() {\n      channel.startTyping();\n    },\n    onSendMessage: function onSendMessage() {\n      _onSendMessage(quoteMessage);\n\n      setQuoteMessage(null);\n    },\n    onFileUpload: function onFileUpload(file) {\n      _onFileUpload(file, quoteMessage);\n\n      setQuoteMessage(null);\n    }\n  }));\n};\n\nvar MessageInputWrapper$1 = /*#__PURE__*/React__default.forwardRef(MessageInputWrapper);\n\nfunction ConnectionStatus() {\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-connection-status\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.TRYING_TO_CONNECT), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.DISCONNECTED,\n    fillColor: IconColors.SENT,\n    width: \"14px\",\n    height: \"14px\"\n  }));\n}\n\nvar getChannelTitle = function getChannelTitle() {\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n\n  if (!channel || !channel.name && !channel.members) {\n    return stringSet.NO_TITLE;\n  }\n\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members.filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\n\nvar noop$1 = function noop() {};\n\nfunction ChatHeader(props) {\n  var currentGroupChannel = props.currentGroupChannel,\n      currentUser = props.currentUser,\n      title = props.title,\n      subTitle = props.subTitle,\n      isMuted = props.isMuted,\n      theme = props.theme,\n      showSearchIcon = props.showSearchIcon,\n      onSearchClick = props.onSearchClick,\n      onActionClick = props.onActionClick;\n  var userId = currentUser.userId;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-chat-header\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-chat-header__left\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    theme: theme,\n    channel: currentGroupChannel,\n    userId: userId,\n    height: 32,\n    width: 32\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-chat-header__left__title\",\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, title || getChannelTitle(currentGroupChannel, userId, stringSet)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-chat-header__left__subtitle\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_2\n  }, subTitle)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-chat-header__right\"\n  }, (typeof isMuted === 'string' && isMuted === 'true' || typeof isMuted === 'boolean' && isMuted) && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-chat-header__right__mute\",\n    type: IconTypes.NOTIFICATIONS_OFF_FILLED,\n    width: \"24px\",\n    height: \"24px\"\n  }), showSearchIcon && /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-chat-header__right__search\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onSearchClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.SEARCH,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-chat-header__right__info\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onActionClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.INFO,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }))));\n}\n\nChatHeader.propTypes = {\n  currentGroupChannel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string\n  }),\n  title: PropTypes.string,\n  subTitle: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isMuted: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  theme: PropTypes.string,\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onActionClick: PropTypes.func\n};\nChatHeader.defaultProps = {\n  currentGroupChannel: {},\n  currentUser: {},\n  title: '',\n  subTitle: '',\n  isMuted: false,\n  theme: 'light',\n  showSearchIcon: false,\n  onSearchClick: noop$1,\n  onActionClick: noop$1\n};\n\nvar noop = function noop() {};\n\nvar ConversationPanel = function ConversationPanel(props) {\n  var channelUrl = props.channelUrl,\n      _props$stores = props.stores,\n      sdkStore = _props$stores.sdkStore,\n      userStore = _props$stores.userStore,\n      _props$config = props.config,\n      userId = _props$config.userId,\n      logger = _props$config.logger,\n      pubSub = _props$config.pubSub,\n      isOnline = _props$config.isOnline,\n      theme = _props$config.theme,\n      imageCompression = _props$config.imageCompression,\n      reconnect = props.dispatchers.reconnect,\n      _props$queries = props.queries,\n      queries = _props$queries === void 0 ? {} : _props$queries,\n      startingPoint = props.startingPoint,\n      highlightedMessage = props.highlightedMessage,\n      useReaction = props.useReaction,\n      replyType = props.replyType,\n      showSearchIcon = props.showSearchIcon,\n      onSearchClick = props.onSearchClick,\n      renderChatItem = props.renderChatItem,\n      renderChatHeader = props.renderChatHeader,\n      renderCustomMessage = props.renderCustomMessage,\n      renderUserProfile = props.renderUserProfile,\n      disableUserProfile = props.disableUserProfile,\n      renderMessageInput = props.renderMessageInput,\n      useMessageGrouping = props.useMessageGrouping,\n      onChatHeaderActionClick = props.onChatHeaderActionClick,\n      onBeforeSendUserMessage = props.onBeforeSendUserMessage,\n      onBeforeSendFileMessage = props.onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage = props.onBeforeUpdateUserMessage;\n  var sdk = sdkStore.sdk;\n  var config = props.config;\n  var sdkError = sdkStore.error;\n  var sdkInit = sdkStore.initialized;\n  var user = userStore.user;\n\n  if (queries.messageListQuery) {\n    // eslint-disable-next-line no-console\n    console.warn('messageListQuery has been deprecated, please use messageListParams instead');\n  }\n\n  useEffect(function () {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n\n  var _useState = useState(startingPoint),\n      _useState2 = _slicedToArray(_useState, 2),\n      intialTimeStamp = _useState2[0],\n      setIntialTimeStamp = _useState2[1];\n\n  useEffect(function () {\n    setIntialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      animatedMessageId = _useState4[0],\n      setAnimatedMessageId = _useState4[1];\n\n  var _useState5 = useState(highlightedMessage),\n      _useState6 = _slicedToArray(_useState5, 2),\n      highLightedMessageId = _useState6[0],\n      setHighLightedMessageId = _useState6[1];\n\n  useEffect(function () {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  var userFilledMessageListQuery = queries.messageListParams;\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      quoteMessage = _useState8[0],\n      setQuoteMessage = _useState8[1];\n\n  var _useReducer = useReducer(reducer, messagesInitialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      messagesStore = _useReducer2[0],\n      messagesDispatcher = _useReducer2[1];\n\n  var scrollRef = useRef(null);\n  var allMessages = messagesStore.allMessages,\n      loading = messagesStore.loading,\n      initialized = messagesStore.initialized,\n      unreadCount = messagesStore.unreadCount,\n      unreadSince = messagesStore.unreadSince,\n      isInvalid = messagesStore.isInvalid,\n      _messagesStore$curren = messagesStore.currentGroupChannel,\n      currentGroupChannel = _messagesStore$curren === void 0 ? {} : _messagesStore$curren,\n      hasMore = messagesStore.hasMore,\n      lastMessageTimeStamp = messagesStore.lastMessageTimeStamp,\n      hasMoreToBottom = messagesStore.hasMoreToBottom,\n      latestFetchedMessageTimeStamp = messagesStore.latestFetchedMessageTimeStamp,\n      emojiContainer = messagesStore.emojiContainer,\n      readStatus = messagesStore.readStatus;\n  var isFrozen = currentGroupChannel.isFrozen,\n      isBroadcast = currentGroupChannel.isBroadcast,\n      isSuper = currentGroupChannel.isSuper;\n  var _sdk$appInfo = sdk.appInfo,\n      appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n  var usingReaction = appInfo.isUsingReaction && !isBroadcast && !isSuper && useReaction // TODO: Make useReaction independent from appInfo.isUsingReaction\n  ;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var showScrollBot = hasMoreToBottom; // TODO: emojiAllMap, emoijAllList, nicknamesMap => should be moved to messagesStore\n\n  var emojiAllMap = useMemo(function () {\n    return usingReaction ? getAllEmojisMapFromEmojiContainer(emojiContainer) : new Map();\n  }, [emojiContainer]);\n  var emojiAllList = useMemo(function () {\n    return usingReaction ? getAllEmojisFromEmojiContainer$1(emojiContainer) : [];\n  }, [emojiContainer]);\n  var nicknamesMap = useMemo(function () {\n    return usingReaction ? getNicknamesMapFromMembers(currentGroupChannel.members) : new Map();\n  }, [currentGroupChannel.members]); // Scrollup is default scroll for channel\n\n  var onScrollCallback = useScrollCallback({\n    currentGroupChannel: currentGroupChannel,\n    lastMessageTimeStamp: lastMessageTimeStamp,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    replyType: replyType\n  }, {\n    hasMore: hasMore,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk\n  });\n  var scrollToMessage = useScrollToMessage({\n    setIntialTimeStamp: setIntialTimeStamp,\n    setAnimatedMessageId: setAnimatedMessageId,\n    allMessages: allMessages\n  }, {\n    logger: logger\n  }); // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n\n  var onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel: currentGroupChannel,\n    latestFetchedMessageTimeStamp: latestFetchedMessageTimeStamp,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    hasMoreToBottom: hasMoreToBottom,\n    replyType: replyType\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk\n  });\n  var toggleReaction = useToggleReactionCallback({\n    currentGroupChannel: currentGroupChannel\n  }, {\n    logger: logger\n  });\n  var memoizedEmojiListItems = useMemoizedEmojiListItems({\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction\n  }, {\n    useReaction: usingReaction,\n    logger: logger,\n    userId: userId,\n    emojiAllList: emojiAllList\n  }); // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk,\n    logger: logger\n  });\n  useEffect(function () {\n    setQuoteMessage(null);\n  }, [channelUrl]); // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n\n  useHandleChannelEvents({\n    currentGroupChannel: currentGroupChannel,\n    sdkInit: sdkInit,\n    hasMoreToBottom: hasMoreToBottom\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk,\n    logger: logger,\n    scrollRef: scrollRef,\n    setQuoteMessage: setQuoteMessage\n  }); // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on intialTimeStamp change too\n\n  useInitialMessagesFetch({\n    currentGroupChannel: currentGroupChannel,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    intialTimeStamp: intialTimeStamp,\n    replyType: replyType\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  }); // handles API calls from withSendbird\n\n  useEffect(function () {\n    var subScriber = pubSubHandler(channelUrl, pubSub, messagesDispatcher);\n    return function () {\n      pubSubHandleRemover(subScriber);\n    };\n  }, [channelUrl, sdkInit]); // handling connection breaks\n\n  useHandleReconnect({\n    isOnline: isOnline,\n    replyType: replyType\n  }, {\n    logger: logger,\n    sdk: sdk,\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher,\n    userFilledMessageListQuery: userFilledMessageListQuery\n  }); // callbacks for Message CURD actions\n\n  var deleteMessage = useDeleteMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher\n  }, {\n    logger: logger\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher,\n    onBeforeUpdateUserMessage: onBeforeUpdateUserMessage\n  }, {\n    logger: logger,\n    sdk: sdk,\n    pubSub: pubSub\n  });\n  var resendMessage = useResendMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher\n  }, {\n    logger: logger\n  });\n\n  var _useSendMessageCallba = useSendMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    pubSub: pubSub,\n    messagesDispatcher: messagesDispatcher\n  }),\n      _useSendMessageCallba2 = _slicedToArray(_useSendMessageCallba, 2),\n      messageInputRef = _useSendMessageCallba2[0],\n      onSendMessage = _useSendMessageCallba2[1];\n\n  var _useSendFileMessageCa = useSendFileMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    onBeforeSendFileMessage: onBeforeSendFileMessage,\n    imageCompression: imageCompression\n  }, {\n    sdk: sdk,\n    logger: logger,\n    pubSub: pubSub,\n    messagesDispatcher: messagesDispatcher\n  }),\n      _useSendFileMessageCa2 = _slicedToArray(_useSendFileMessageCa, 1),\n      onSendFileMessage = _useSendFileMessageCa2[0];\n\n  if (!channelUrl) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.NO_CHANNELS\n    }));\n  }\n\n  if (isInvalid) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    }));\n  }\n\n  if (sdkError) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG,\n      retryToConnect: function retryToConnect() {\n        logger.info('Channel: reconnecting');\n        reconnect();\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-conversation\",\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, renderChatHeader ? renderChatHeader({\n    channel: currentGroupChannel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(ChatHeader, {\n    theme: theme,\n    currentGroupChannel: currentGroupChannel,\n    currentUser: user,\n    showSearchIcon: showSearchIcon,\n    onSearchClick: onSearchClick,\n    onActionClick: onChatHeaderActionClick,\n    subTitle: currentGroupChannel.members && currentGroupChannel.members.length !== 2,\n    isMuted: false\n  }), isFrozen && /*#__PURE__*/React__default.createElement(FrozenNotification, null), unreadCount > 0 && /*#__PURE__*/React__default.createElement(Notification, {\n    count: unreadCount,\n    onClick: function onClick() {\n      if (intialTimeStamp) {\n        setIntialTimeStamp(null);\n        setAnimatedMessageId(null);\n        setHighLightedMessageId(null);\n      } else {\n        scrollIntoLast(); // there is no scroll\n\n        if (scrollRef.current.scrollTop === 0) {\n          currentGroupChannel.markAsRead();\n          messagesDispatcher({\n            type: MARK_AS_READ\n          });\n        }\n      }\n    },\n    time: unreadSince\n  }), loading ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.LOADING\n  })) : /*#__PURE__*/React__default.createElement(ConversationScroll, {\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    animatedMessageId: animatedMessageId,\n    highLightedMessageId: highLightedMessageId,\n    userId: userId,\n    hasMore: hasMore,\n    disabled: !isOnline,\n    onScroll: onScrollCallback,\n    onScrollDown: onScrollDownCallback,\n    scrollRef: scrollRef,\n    readStatus: readStatus,\n    useReaction: usingReaction,\n    replyType: replyType,\n    allMessages: allMessages,\n    scrollToMessage: scrollToMessage,\n    emojiAllMap: emojiAllMap,\n    membersMap: nicknamesMap,\n    editDisabled: isDisabledBecauseFrozen(currentGroupChannel),\n    deleteMessage: deleteMessage,\n    updateMessage: updateMessage,\n    resendMessage: resendMessage,\n    toggleReaction: toggleReaction,\n    emojiContainer: emojiContainer,\n    renderChatItem: renderChatItem,\n    quoteMessage: quoteMessage,\n    setQuoteMessage: setQuoteMessage,\n    showScrollBot: showScrollBot,\n    onClickScrollBot: function onClickScrollBot() {\n      setIntialTimeStamp(null);\n      setAnimatedMessageId(null);\n      setHighLightedMessageId(null);\n    },\n    renderCustomMessage: renderCustomMessage,\n    useMessageGrouping: useMessageGrouping,\n    messagesDispatcher: messagesDispatcher,\n    currentGroupChannel: currentGroupChannel,\n    memoizedEmojiListItems: memoizedEmojiListItems\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__footer\"\n  }, /*#__PURE__*/React__default.createElement(MessageInputWrapper$1, {\n    channel: currentGroupChannel,\n    user: user,\n    ref: messageInputRef,\n    isOnline: isOnline,\n    initialized: initialized,\n    onSendMessage: onSendMessage,\n    onFileUpload: onSendFileMessage,\n    quoteMessage: quoteMessage,\n    setQuoteMessage: setQuoteMessage,\n    renderMessageInput: renderMessageInput\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__footer__typing-indicator\"\n  }, /*#__PURE__*/React__default.createElement(TypingIndicator, {\n    className: \"sendbird-conversation__footer__typing-indicator__text\",\n    channelUrl: channelUrl,\n    sb: sdk,\n    logger: logger\n  }), !isOnline && /*#__PURE__*/React__default.createElement(ConnectionStatus, {\n    sdkInit: sdkInit,\n    sb: sdk,\n    logger: logger\n  }))));\n};\n\nConversationPanel.propTypes = {\n  channelUrl: PropTypes.string,\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n      sdk: PropTypes.shape({\n        getErrorFirstCallback: PropTypes.func,\n        removeChannelHandler: PropTypes.func,\n        GroupChannel: PropTypes.any,\n        ChannelHandler: PropTypes.any,\n        addChannelHandler: PropTypes.func,\n        UserMessageParams: PropTypes.any,\n        FileMessageParams: PropTypes.any,\n        getAllEmoji: PropTypes.func,\n        appInfo: PropTypes.shape({})\n      }),\n      error: PropTypes.bool\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({})\n    })\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    reconnect: PropTypes.func\n  }).isRequired,\n  config: PropTypes.shape({\n    disableUserProfile: PropTypes.bool,\n    renderUserProfile: PropTypes.func,\n    userId: PropTypes.string.isRequired,\n    isOnline: PropTypes.bool.isRequired,\n    theme: PropTypes.string,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func\n    }),\n    imageCompression: PropTypes.shape({\n      compressionRate: PropTypes.number,\n      resizingWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      resizingHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    })\n  }).isRequired,\n  queries: PropTypes.shape({\n    messageListParams: PropTypes.shape({\n      includeMetaArray: PropTypes.bool,\n      includeParentMessageText: PropTypes.bool,\n      includeReaction: PropTypes.bool,\n      includeReplies: PropTypes.bool,\n      includeThreadInfo: PropTypes.bool,\n      limit: PropTypes.number,\n      reverse: PropTypes.bool,\n      senderUserIdsFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  startingPoint: PropTypes.number,\n  highlightedMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onBeforeSendUserMessage: PropTypes.func,\n  // onBeforeSendUserMessage(text)\n  onBeforeSendFileMessage: PropTypes.func,\n  // onBeforeSendFileMessage(File)\n  onBeforeUpdateUserMessage: PropTypes.func,\n  renderChatItem: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  renderCustomMessage: PropTypes.func,\n  renderMessageInput: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  renderChatHeader: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onChatHeaderActionClick: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  useMessageGrouping: PropTypes.bool\n};\nConversationPanel.defaultProps = {\n  channelUrl: null,\n  queries: {},\n  onBeforeSendUserMessage: null,\n  onBeforeSendFileMessage: null,\n  onBeforeUpdateUserMessage: null,\n  startingPoint: null,\n  highlightedMessage: null,\n  renderChatItem: null,\n  renderCustomMessage: null,\n  renderMessageInput: null,\n  renderChatHeader: null,\n  useReaction: true,\n  replyType: 'NONE',\n  showSearchIcon: false,\n  onSearchClick: noop,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  useMessageGrouping: true,\n  onChatHeaderActionClick: noop\n};\nvar getEmojiCategoriesFromEmojiContainer = getEmojiCategoriesFromEmojiContainer$1,\n    getAllEmojisFromEmojiContainer = getAllEmojisFromEmojiContainer$1,\n    getEmojisFromEmojiContainer = getEmojisFromEmojiContainer$1;\nvar Conversation = withSendbirdContext(ConversationPanel);\nexport { ConversationPanel, Conversation as default, getAllEmojisFromEmojiContainer, getEmojiCategoriesFromEmojiContainer, getEmojisFromEmojiContainer };","map":{"version":3,"sources":["../src/smart-components/Conversation/dux/actionTypes.js","../src/smart-components/Conversation/utils.js","../src/smart-components/Conversation/dux/initialState.js","../src/smart-components/Conversation/dux/reducers.js","../src/smart-components/Conversation/hooks/useHandleChannelEvents.js","../src/smart-components/Conversation/hooks/useGetChannel.js","../src/smart-components/Conversation/hooks/useInitialMessagesFetch.js","../src/smart-components/Conversation/hooks/useHandleReconnect.ts","../src/smart-components/Conversation/hooks/useScrollCallback.js","../src/smart-components/Conversation/hooks/useScrollDownCallback.js","../src/smart-components/Conversation/hooks/useDeleteMessageCallback.js","../src/smart-components/Conversation/hooks/useUpdateMessageCallback.js","../src/smart-components/Conversation/hooks/useResendMessageCallback.js","../src/smart-components/Conversation/hooks/useSendMessageCallback.js","../src/smart-components/Conversation/hooks/useSendFileMessageCallback.js","../src/ui/ReactionButton/index.jsx","../src/smart-components/Conversation/hooks/useMemoizedEmojiListItems.jsx","../src/smart-components/Conversation/hooks/useToggleReactionCallback.js","../src/smart-components/Conversation/hooks/useScrollToMessage.ts","../src/ui/MessageStatus/index.jsx","../src/ui/MessageItemMenu/index.tsx","../src/ui/MessageItemReactionMenu/index.tsx","../src/ui/Tooltip/index.jsx","../src/ui/TooltipWrapper/index.jsx","../src/ui/ReactionBadge/index.jsx","../src/ui/EmojiReactions/index.tsx","../src/ui/AdminMessage/index.jsx","../src/ui/TextMessageItemBody/index.tsx","../src/ui/FileMessageItemBody/index.tsx","../src/ui/ThumbnailMessageItemBody/index.tsx","../src/ui/OGMessageItemBody/index.tsx","../src/ui/UnknownMessageItemBody/index.tsx","../src/ui/QuoteMessage/index.tsx","../src/ui/MessageContent/index.tsx","../src/smart-components/Conversation/components/RemoveMessage.jsx","../src/smart-components/Conversation/components/MessageHOC.jsx","../src/smart-components/Conversation/components/ConversationScroll.jsx","../src/smart-components/Conversation/components/Notification.jsx","../src/smart-components/Conversation/components/FrozenNotification.tsx","../src/smart-components/Conversation/components/TypingIndicator.jsx","../src/ui/QuoteMessageInput/QuoteMessageThumbnail.tsx","../src/ui/QuoteMessageInput/index.tsx","../src/smart-components/Conversation/components/MessageInputWrapper.tsx","../src/ui/ConnectionStatus/index.jsx","../src/ui/ChatHeader/utils.js","../src/ui/ChatHeader/index.jsx","../src/smart-components/Conversation/index.jsx"],"names":["RESET_MESSAGES","RESET_STATE","CLEAR_SENT_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_NEXT_MESSAGES_SUCESS","GET_NEXT_MESSAGES_FAILURE","SEND_MESSAGEGE_START","SEND_MESSAGEGE_SUCESS","SEND_MESSAGEGE_FAILURE","RESEND_MESSAGEGE_START","ON_MESSAGE_RECEIVED","UPDATE_UNREAD_COUNT","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","getOutgoingMessageStates","UNDEFINED","SUCCEEDED","PENDING","getSendingMessageStatus","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","setTimeout","pubSubHandleRemover","subscriber","s","pubSubHandler","pubSub","channel","message","msg","channelUrl","dispatcher","type","payload","fromSelector","messageId","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getEmojiCategoriesFromEmojiContainer","emojiContainer","getAllEmojisFromEmojiContainer","emojiCategories","allEmojis","categoryIndex","emojis","emojiIndex","getEmojisFromEmojiContainer","emojiCategoryId","emojiCategory","getAllEmojisMapFromEmojiContainer","allEmojisMap","key","url","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getMessageCreatedAt","format","isSameGroup","comparingMessage","compareMessagesForGrouping","sendingStatus","isAcceptable","hasOwnProperty","passUnsuccessfullMessages","newMessage","lastIndexOfSucceededMessage","allMessages","messages","pxToNumber","parsed","Number","initialized","loading","currentGroupChannel","hasMore","lastMessageTimeStamp","hasMoreToBottom","latestFetchedMessageTimeStamp","unreadCount","unreadSince","isInvalid","messageListParams","FAILED","action","m","receivedMessages","stateChannel","state","stateChannelUrl","actionChannelUrl","duplicatedMessageIds","updatedAllMessages","duplicatedMessage","compareIds","filteredNewMessages","hasHasMoreToBottom","hasLatestFetchedMessageTimeStamp","newMessages","a","b","currentGroupChannelUrl","scrollToEnd","filterMessageListParams","event","threadInfo","targetMessageId","sdkInit","messagesDispatcher","sdk","logger","scrollRef","setQuoteMessage","useEffect","messageReceiverId","uuidv4","ChannelHandler","current","reactionEvent","e","messageActionTypes","emojiContainer_","PREV_RESULT_SIZE","NEXT_RESULT_SIZE","getLatestMessageTimeStamp","latestMessage","userFilledMessageListQuery","intialTimeStamp","replyType","Object","nextMessageListParams","nextMessages","utils","isOnline","wasOffline","useReaction","messageListParams_1","lastMessageTime","useCallback","appInfo","hasMoreMessages","lastMessageTs","cb","RESULT_SIZE","messagesLength","requestState","reqId","onBeforeUpdateUserMessage","createParamsDefault","params","createCustomPrams","swapParams","err","messageType","file","failedMessage","console","onBeforeSendUserMessage","messageInputRef","useRef","sendMessage","quoteMessage","text","txt","pendingMsg","error","onBeforeSendFileMessage","imageCompression","compressionRate","resizingWidth","resizingHeight","createCustomParams","compressibleFileType","compressibleRatio","compressibleDiamensions","canCompressImage","image","URL","canvas","imageWdith","imageHeight","targetWidth","targetHeight","context","compressedFile","pendingMessage","ReactionButton","className","width","height","selected","onClick","children","props","Array","PropTypes","isRequired","toggleReaction","emojiAllList","useMemo","parentRef","parentContainRef","closeDropdown","spaceFromTrigger","reactedReaction","reaction","emoji","isReacted","IconTypes","QUESTION","setIntialTimeStamp","setAnimatedMessageId","isPresent","MessageStatusTypes","status","showMessageStatusIcon","iconType","iconColor","IconColors","isSentStatus","LabelTypography","LabelColors","ONBACKGROUND_2","MessageStatus","createdAt","sender","friendName","profileUrl","string","isGroupChannel","isSuper","isBroadcast","isPublic","bool","MessageItemMenu","_a","_c","_d","showEdit","showRemove","resendMessage","setSupposedHover","useContext","triggerRef","containerRef","showMenuItemCopy","isUserMessage","showMenuItemReply","isFailedMessage","isPendingMessage","showMenuItemEdit","isSentMessage","showMenuItemResend","showMenuItemDelete","getClassName","toggleDropdown","close","isByMe","copyToClipboard","stringSet","MessageItemReactionMenu","_b","filter","some","style","ONCONTENT_1","Tooltip","SPACE_FROM_TRIGGER","hoverTooltip","showHoverTooltip","setShowHoverTooltip","useState","childrenRef","bottom","left","TooltipWrapper","ReactionBadge","count","isAdd","getClassNameTail","ONBACKGROUND_1","func","EmojiReactions2","memberNicknamesMap","_e","emojisMap","getEmojiMapAll","addReactionRef","reactedByMe","isReactedBy","React","getEmojiTooltipString","AdminMessage","isAdminMessage","TextMessageItemBody","mouseHover","word","isEditedMessage","FileMessageItemBody","IMAGE","VIDEO","AUDIO","GIF","OTHERS","FILE_DOCUMENT","getUIKitFileType","window","truncateString","ThumbnailMessageItemBody","showFileViewer","thumbnailUrl","thumbnails","imageRendered","setImageRendered","isVideoMessage","isGifMessage","OGMessageItemBody","_k","_l","openOGUrl","isUrl","UnknownMessageItemBody","QuoteMessage","_p","_q","parentMessageSender","parentMessageSenderNickname","parentMessageUrl","parentMessageType","currentMessageSenderNickname","isThumbnailLoaded","setThumbnailLoaded","uikitFileTypes","getUIKitFileTypes","splitFileName","parentMessage","ONBACKGROUND_3","isThumbnailMessage","isVideo","isGif","isFileMessage","isSupportedFileView","PHOTO","PLAY","FILE_AUDIO","MessageContent","_f","_g","_h","_j","scrollToMessage","messageTypes","getUIKitMessageTypes","disableUserProfile","renderUserProfile","avatarRef","setMouseHover","supposedHover","isByMeClassName","chainTopClassName","chainTop","useReactionClassName","supposedHoverClassName","useReplying","useReplyingClassName","paddingTop","paddingBottom","user","getOutgoingMessageState","getSenderName","isTextMessage","isOGMessage","getUIKitMessageType","RemoveMessage","onCloseModal","onDeleteMessage","ButtonTypes","MODAL__DELETE_MESSAGE__TITLE","replyCount","number","disabled","editDisabled","hasSeparator","deleteMessage","updateMessage","chainBottom","membersMap","animatedMessageId","highLightedMessageId","renderCustomMessage","setShowEdit","setShowRemove","setShowFileViewer","isAnimated","setIsAnimated","isHighlighted","setIsHighlighted","editMessageInputRef","useMessageScrollRef","useLayoutEffect","block","inline","RenderedMessage","marginBottom","MessageHoc","isDateseparator","ogMetaData","parentMessageId","ConversationScroll","Component","onScroll","onScrollDown","element","scrollTop","clientHeight","scrollHeight","nodes","first","last","emojiAllMap","renderChatItem","useMessageGrouping","memoizedEmojiListItems","showScrollBot","onClickScrollBot","PlaceHolderTypes","NO_MESSAGES","previousMessage","idx","nextMessage","previousMessageCreatedAt","currentCreatedAt","isSameDay","onUpdateMessage","onResendMessage","onScrollToMessage","onReplyMessage","menuDisabled","PRIMARY","markAsRead","time","timeArray","CAPTION_2","CONTENT","Notification","FrozenNotification","TypingIndicatorText","sb","handlerId","setHandlerId","typingMembers","setTypingMembers","newHandlerId","handler","TypingIndicator","removeChannelHandler","addChannelHandler","info","componentClassname","QuoteMessageThumbnail","isImageMessage","isAudioMessage","QuoteMessageInput","replyingMessage","onClose","fileMessage","MessageInputWrapper","onSendMessage","onFileUpload","renderMessageInput","getChannelTitle","currentUserId","LabelStringSet","noop","currentUser","title","subTitle","isMuted","theme","showSearchIcon","onSearchClick","onActionClick","ChatHeader","coverUrl","ConversationPanel","sdkStore","userStore","reconnect","queries","startingPoint","highlightedMessage","renderChatHeader","onChatHeaderActionClick","config","sdkError","setHighLightedMessageId","messagesStore","useReducer","readStatus","usingReaction","userDefinedDisableUserProfile","userDefinedRenderProfile","onScrollCallback","useScrollCallback","useScrollToMessage","onScrollDownCallback","useScrollDownCallback","useToggleReactionCallback","useMemoizedEmojiListItems","useGetChannel","useHandleChannelEvents","useInitialMessagesFetch","subScriber","useHandleReconnect","useDeleteMessageCallback","useUpdateMessageCallback","useResendMessageCallback","useSendMessageCallback","onSendFileMessage","useSendFileMessageCallback","NO_CHANNELS","WRONG","LOADING","stores","getErrorFirstCallback","GroupChannel","UserMessageParams","FileMessageParams","getAllEmoji","dispatchers","warning","subscribe","publish","includeMetaArray","includeParentMessageText","includeReaction","includeReplies","includeThreadInfo","limit","reverse","senderUserIdsFilter","withSendbirdContext"],"mappings":"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","sourcesContent":["export const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const RESET_STATE = 'RESET_STATE';\nexport const CLEAR_SENT_MESSAGES = 'CLEAR_SENT_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAILURE = 'GET_PREV_MESSAGES_FAILURE';\nexport const GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS';\nexport const GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE';\n\nexport const SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nexport const SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nexport const SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\n\nexport const RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\n\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const UPDATE_UNREAD_COUNT = 'UPDATE_UNREAD_COUNT';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\n\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\n\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\n","import format from 'date-fns/format';\nimport * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nimport {\n  getSendingMessageStatus,\n  getOutgoingMessageStates,\n} from '../../utils';\n\nconst MessageStatusType = getOutgoingMessageStates();\nconst UNDEFINED = 'undefined';\nconst { SUCCEEDED, FAILED, PENDING } = getSendingMessageStatus();\n\nexport const scrollIntoLast = (intialTry = 0) => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-conversation__scroll-container');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (channelUrl, pubSub, dispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel, message } = msg;\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_START,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message, fromSelector } = msg;\n    if (fromSelector && channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_UPDATED,\n        payload: { channel, message },\n      });\n    }\n  }));\n  subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n    const { channel, messageId } = msg;\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_DELETED,\n        payload: messageId,\n      });\n    }\n  }));\n\n  return subscriber;\n};\n\nexport const getParsedStatus = (message, currentGroupChannel) => {\n  if (message.requestState === FAILED) {\n    return MessageStatusType.FAILED;\n  }\n\n  if (message.requestState === PENDING) {\n    return MessageStatusType.PENDING;\n  }\n\n  if (message.requestState === SUCCEEDED) {\n    if (!currentGroupChannel) {\n      return MessageStatusType.SENT;\n    }\n\n    const unreadCount = currentGroupChannel.getReadReceipt(message);\n    if (unreadCount === 0) {\n      return MessageStatusType.READ;\n    }\n\n    const isDelivered = currentGroupChannel.getDeliveryReceipt(message) === 0;\n    if (isDelivered) {\n      return MessageStatusType.DELIVERED;\n    }\n\n    return MessageStatusType.SENT;\n  }\n\n  return null;\n};\n\nexport const isOperator = (groupChannel = {}) => {\n  const { myRole } = groupChannel;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel = {}) => {\n  const { isFrozen } = groupChannel;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel = {}) => {\n  const { myMutedState } = groupChannel;\n  return myMutedState === 'muted';\n};\n\nexport const getEmojiCategoriesFromEmojiContainer = (emojiContainer = {}) => (\n  emojiContainer.emojiCategories ? emojiContainer.emojiCategories : []\n);\n\nexport const getAllEmojisFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojis = [];\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n  return allEmojis;\n};\n\nexport const getEmojisFromEmojiContainer = (emojiContainer = {}, emojiCategoryId = '') => (\n  emojiContainer.emojiCategories\n    ? emojiContainer.emojiCategories\n      .filter((emojiCategory) => emojiCategory.id === emojiCategoryId)[0].emojis\n    : []\n);\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members = []) => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getMessageCreatedAt = (message) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (message, comparingMessage) => {\n  if (\n    !message\n    || !comparingMessage\n    || !message.sender\n    || !comparingMessage.sender\n    || !message.createdAt\n    || !comparingMessage.createdAt\n    || !message.sender.userId\n    || !comparingMessage.sender.userId\n  ) {\n    return false;\n  }\n  return (\n    message.sendingStatus === comparingMessage.sendingStatus\n    && message.sender.userId === comparingMessage.sender.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage,\n  currMessage,\n  nextMessage,\n) => {\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage) && isAcceptable,\n    isSameGroup(currMessage, nextMessage) && isAcceptable,\n  ];\n};\n\nexport const hasOwnProperty = (property) => (payload) => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n    return true;\n  }\n  return false;\n};\n\nexport const passUnsuccessfullMessages = (allMessages, newMessage) => {\n  const { sendingStatus = UNDEFINED } = newMessage;\n  if (sendingStatus === SUCCEEDED || sendingStatus === PENDING) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => (\n        message.sendingStatus\n        || ((message.isAdminMessage && message.isAdminMessage()) ? SUCCEEDED : UNDEFINED)\n      ))\n      .lastIndexOf(SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [\n    ...allMessages,\n    newMessage,\n  ];\n};\n\nexport const pxToNumber = (px) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport default getParsedStatus;\n","export default {\n  initialized: false,\n  loading: false,\n  allMessages: [],\n  currentGroupChannel: { members: [] },\n  // for scrollup\n  hasMore: false,\n  lastMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n  hasMoreToBottom: false,\n  latestFetchedMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadCount: 0,\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null,\n};\n","import format from 'date-fns/format';\n\nimport * as actionTypes from './actionTypes';\nimport initialState from './initialState';\n\nimport compareIds from '../../../utils/compareIds';\nimport { passUnsuccessfullMessages, hasOwnProperty } from '../utils';\nimport { filterMessageListParams, getSendingMessageStatus } from '../../../utils';\n\nconst {\n  SUCCEEDED,\n  FAILED,\n  PENDING,\n} = getSendingMessageStatus();\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.RESET_STATE:\n      return initialState;\n    case actionTypes.RESET_MESSAGES:\n      return {\n        ...state,\n        // when user switches channel, if the previous channel `hasMore`\n        // the onScroll gets called twice, setting hasMore false prevents this\n        hasMore: false,\n        allMessages: [],\n      };\n    case actionTypes.GET_PREV_MESSAGES_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actionTypes.CLEAR_SENT_MESSAGES:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages.filter((m) => (\n            m.sendingStatus !== SUCCEEDED\n          )),\n        ],\n      };\n    case actionTypes.GET_PREV_MESSAGES_SUCESS: {\n      const receivedMessages = action.payload.messages || [];\n      const { currentGroupChannel = {} } = action.payload;\n\n      const stateChannel = state.currentGroupChannel || {};\n      const stateChannelUrl = stateChannel.url;\n      const actionChannelUrl = currentGroupChannel.url;\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      // remove duplicate messages\n      const duplicatedMessageIds = [];\n      const updatedAllMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = receivedMessages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? receivedMessages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : receivedMessages;\n\n      const hasHasMoreToBottom = hasOwnProperty('hasMoreToBottom')(action.payload);\n      const hasLatestFetchedMessageTimeStamp = hasOwnProperty('latestFetchedMessageTimeStamp')(action.payload);\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: action.payload.hasMore,\n        lastMessageTimeStamp: action.payload.lastMessageTimeStamp,\n        // if present change else, keep\n        ...(hasHasMoreToBottom && {\n          hasMoreToBottom: action.payload.hasMoreToBottom,\n        }),\n        ...(hasLatestFetchedMessageTimeStamp && {\n          latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp,\n        }),\n        allMessages: [\n          ...filteredNewMessages,\n          ...updatedAllMessages,\n        ],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_SUCESS: {\n      const receivedMessages = action.payload.messages || [];\n      const { currentGroupChannel = {} } = action.payload;\n\n      const stateChannel = state.currentGroupChannel || {};\n      const stateChannelUrl = stateChannel.url;\n      const actionChannelUrl = currentGroupChannel.url;\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      // remove duplicate messages\n      const duplicatedMessageIds = [];\n      const updatedAllMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = receivedMessages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? receivedMessages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : receivedMessages;\n\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: action.payload.hasMore,\n        lastMessageTimeStamp: action.payload.lastMessageTimeStamp,\n        hasMoreToBottom: action.payload.hasMoreToBottom,\n        latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp,\n        allMessages: [\n          ...updatedAllMessages,\n          ...filteredNewMessages,\n        ],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_FAILURE: {\n      return { ...state };\n    }\n    case actionTypes.SEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...action.payload },\n        ],\n      };\n    case actionTypes.SEND_MESSAGEGE_SUCESS: {\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, action.payload.reqId) ? action.payload : m\n      ));\n      [...newMessages].sort((a, b) => (\n        (\n          a.sendingStatus\n          && b.sendingStatus\n          && a.sendingStatus === SUCCEEDED\n          && (\n            b.sendingStatus === PENDING\n            || b.sendingStatus === FAILED\n          )\n        ) ? -1 : 1\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_FAILURE: {\n      // eslint-disable-next-line no-param-reassign\n      action.payload.failed = true;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    }\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      return {\n        ...state,\n        currentGroupChannel: action.payload,\n        isInvalid: false,\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.UPDATE_UNREAD_COUNT: {\n      const { channel } = action.payload;\n      const { currentGroupChannel = {}, unreadCount } = state;\n      const currentGroupChannelUrl = currentGroupChannel.url;\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      return {\n        ...state,\n        unreadSince: unreadCount + 1,\n      };\n    }\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message, scrollToEnd } = action.payload;\n      let unreadCount = 0;\n      const { currentGroupChannel = {}, unreadSince } = state;\n      const currentGroupChannelUrl = currentGroupChannel.url;\n\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      // Excluded overlapping messages\n      if (state.allMessages.some((msg) => msg.messageId === message.messageId)) {\n        return state;\n      }\n      // Filter by userFilledQuery\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        return state;\n      }\n\n      unreadCount = state.unreadCount + 1;\n      // reset unreadCount if have to scrollToEnd\n      if (scrollToEnd) {\n        unreadCount = 0;\n      }\n\n      if (message.isAdminMessage && message.isAdminMessage()) {\n        return {\n          ...state,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message),\n        };\n      }\n      return {\n        ...state,\n        unreadCount,\n        unreadSince: (unreadCount === 1)\n          ? format(new Date(), 'p MMM dd')\n          : unreadSince,\n        allMessages: passUnsuccessfullMessages(state.allMessages, message),\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      const currentGroupChannelUrl = (state.currentGroupChannel && state.currentGroupChannel.url) || '';\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        // Delete the message if it doesn't match to the params anymore\n        return {\n          ...state,\n          allMessages: state.allMessages.filter((m) => (\n            !compareIds(m.messageId, message?.messageId)\n          )),\n        };\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.messageId, action.payload.message.messageId)\n            ? action.payload.message\n            : m\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_THREAD_INFO_UPDATED: {\n      const { channel, event } = action.payload;\n      const { channelUrl, threadInfo, targetMessageId } = event;\n      const currentGroupChannelUrl = (state.currentGroupChannel && state.currentGroupChannel.url) || '';\n      if (\n        !compareIds(channel.url, currentGroupChannelUrl)\n        || !compareIds(channel.url, channelUrl)\n      ) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, targetMessageId)) {\n            // eslint-disable-next-line no-param-reassign\n            m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.RESEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    case actionTypes.MARK_AS_READ:\n      return {\n        ...state,\n        unreadCount: 0,\n        unreadSince: null,\n      };\n    case actionTypes.ON_MESSAGE_DELETED:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.messageId, action.payload)\n        )),\n      };\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      return {\n        ...state,\n        emojiContainer: action.payload,\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, action.payload.messageId)) {\n            if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n              m.applyReactionEvent(action.payload);\n            }\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.MESSAGE_LIST_PARAMS_CHANGED: {\n      return {\n        ...state,\n        messageListParams: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\n\nimport * as messageActions from '../dux/actionTypes';\nimport { uuidv4 } from '../../../utils/uuid';\nimport compareIds from '../../../utils/compareIds';\nimport { scrollIntoLast } from '../utils';\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\nfunction useHandleChannelEvents({ currentGroupChannel, sdkInit, hasMoreToBottom }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n  scrollRef,\n  setQuoteMessage,\n}) {\n  const channelUrl = currentGroupChannel && currentGroupChannel.url;\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (channelUrl && sdk && sdk.ChannelHandler) {\n      const ChannelHandler = new sdk.ChannelHandler();\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = (channel, message) => {\n        // donot update if hasMoreToBottom\n        if (compareIds(channel.url, currentGroupChannel.url) && !hasMoreToBottom) {\n          let scrollToEnd = false;\n          try {\n            const { current } = scrollRef;\n            scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight;\n          } catch (error) {\n            //\n          }\n\n          logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_RECEIVED,\n            payload: { channel, message, scrollToEnd },\n          });\n\n          if (scrollToEnd) {\n            try {\n              setTimeout(() => {\n                currentGroupChannel.markAsRead();\n                scrollIntoLast();\n              });\n            } catch (error) {\n              logger.warning('Channel | onMessageReceived | scroll to end failed');\n            }\n          }\n        }\n        if (compareIds(channel.url, currentGroupChannel.url) && hasMoreToBottom) {\n          messagesDispatcher({\n            type: messageActions.UPDATE_UNREAD_COUNT,\n            payload: { channel },\n          });\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = (channel, message) => {\n        logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      };\n\n      ChannelHandler.onThreadInfoUpdated = (channel, event) => {\n        logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', event);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_THREAD_INFO_UPDATED,\n          payload: { channel, event },\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = (_, messageId) => {\n        logger.info('Channel | useHandleChannelEvents: onMessageDeleted', messageId);\n        setQuoteMessage(null);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      };\n\n      ChannelHandler.onReactionUpdated = (_, reactionEvent) => {\n        logger.info('Channel | useHandleChannelEvents: onReactionUpdated', reactionEvent);\n        messagesDispatcher({\n          type: messageActions.ON_REACTION_UPDATED,\n          payload: reactionEvent,\n        });\n      };\n\n      ChannelHandler.onChannelChanged = (groupChannel) => {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelChanged', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onChannelFrozen = (groupChannel) => {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelFrozen', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onChannelUnfrozen = (groupChannel) => {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserMuted = (groupChannel) => {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onUserMuted', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserUnmuted = (groupChannel) => {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onUserUnmuted', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserBanned = (groupChannel) => {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onUserBanned', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onOperatorUpdated = (groupChannel) => {\n        if (compareIds(groupChannel.url, currentGroupChannel.url)) {\n          logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      // Add this channel event handler to the SendBird object.\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useSetChannel({ channelUrl, sdkInit }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n}) {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.GroupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.GroupChannel.getChannel(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Channel | useSetChannel fetched channel', groupChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n\n          logger.info('Channel: Mark as read', groupChannel);\n          // this order is important - this mark as read should update the event handler up above\n          groupChannel.markAsRead();\n        })\n        .catch((e) => {\n          logger.warning('Channel | useSetChannel fetch channel failed', { channelUrl, e });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n          });\n        });\n      sdk.getAllEmoji((emojiContainer_, err) => {\n        if (err) {\n          logger.error('Channel: Getting emojis failed', err);\n          return;\n        }\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: messageActionTypes.SET_EMOJI_CONTAINER,\n          payload: emojiContainer_,\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\nconst PREV_RESULT_SIZE = 30;\nconst NEXT_RESULT_SIZE = 10;\n\nconst getLatestMessageTimeStamp = (messages = []) => {\n  const latestMessage = messages[messages.length - 1];\n  return (latestMessage && latestMessage.createdAt) || null;\n};\n\nfunction useInitialMessagesFetch({\n  currentGroupChannel,\n  userFilledMessageListQuery,\n  intialTimeStamp,\n  replyType,\n}, {\n  sdk,\n  logger,\n  messagesDispatcher,\n}) {\n  const channelUrl = currentGroupChannel && currentGroupChannel.url;\n  useEffect(() => {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n    });\n\n    if (sdk && sdk.MessageListParams\n      && currentGroupChannel && currentGroupChannel.getMessagesByTimestamp) {\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReaction = true;\n      if (replyType && replyType === 'QUOTE_REPLY') {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = 'only_reply_to_channel';\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach((key) => {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if ((replyType && replyType === 'QUOTE_REPLY') || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: messageActionTypes.MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams,\n        });\n      }\n\n      logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n      });\n\n      if (intialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n        currentGroupChannel.getMessagesByTimestamp(\n          intialTimeStamp,\n          messageListParams,\n        )\n          .then((messages) => {\n            const hasMore = (messages && messages.length > 0);\n            const lastMessageTimeStamp = hasMore\n              ? messages[0].createdAt\n              : null;\n            const latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages);\n            // to make sure there are no more messages below\n            const nextMessageListParams = new sdk.MessageListParams();\n            nextMessageListParams.nextResultSize = NEXT_RESULT_SIZE;\n            nextMessageListParams.isInclusive = true;\n            nextMessageListParams.includeReplies = false;\n            nextMessageListParams.includeReaction = true;\n            if (replyType && replyType === 'QUOTE_REPLY') {\n              nextMessageListParams.includeThreadInfo = true;\n              nextMessageListParams.includeParentMessageInfo = true;\n              nextMessageListParams.replyType = 'only_reply_to_channel';\n            }\n            if (userFilledMessageListQuery) {\n              Object.keys(userFilledMessageListQuery).forEach((key) => {\n                nextMessageListParams[key] = userFilledMessageListQuery[key];\n              });\n            }\n            currentGroupChannel.getMessagesByTimestamp(\n              latestFetchedMessageTimeStamp || new Date().getTime(),\n              nextMessageListParams,\n            ).then((nextMessages) => {\n              messagesDispatcher({\n                type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n                payload: {\n                  messages,\n                  hasMore,\n                  lastMessageTimeStamp,\n                  currentGroupChannel,\n                  latestFetchedMessageTimeStamp,\n                  hasMoreToBottom: nextMessages && nextMessages.length > 0,\n                },\n              });\n            });\n          })\n          .catch((error) => {\n            logger.error('Channel: Fetching messages failed', error);\n            messagesDispatcher({\n              type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: [],\n                hasMore: false,\n                lastMessageTimeStamp: 0,\n                currentGroupChannel,\n              },\n            });\n          })\n          .finally(() => {\n            if (!intialTimeStamp) {\n              setTimeout(() => utils.scrollIntoLast());\n            }\n            currentGroupChannel.markAsRead();\n          });\n      } else {\n        currentGroupChannel.getMessagesByTimestamp(\n          new Date().getTime(),\n          messageListParams,\n        )\n          .then((messages) => {\n            const hasMore = (messages && messages.length > 0);\n            const lastMessageTimeStamp = hasMore\n              ? messages[0].createdAt\n              : null;\n            const latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages);\n            messagesDispatcher({\n              type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages,\n                hasMore,\n                lastMessageTimeStamp,\n                currentGroupChannel,\n                latestFetchedMessageTimeStamp,\n                hasMoreToBottom: false,\n              },\n            });\n          })\n          .catch((error) => {\n            logger.error('Channel: Fetching messages failed', error);\n            messagesDispatcher({\n              type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: [],\n                hasMore: false,\n                lastMessageTimeStamp: 0,\n                currentGroupChannel,\n              },\n            });\n          })\n          .finally(() => {\n            if (!intialTimeStamp) {\n              setTimeout(() => utils.scrollIntoLast());\n            }\n            currentGroupChannel.markAsRead();\n          });\n      }\n    }\n  }, [channelUrl, userFilledMessageListQuery, intialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nexport default useInitialMessagesFetch;\n","import { useEffect } from 'react';\n\nimport * as utils from '../utils';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { Logger, Sdk } from '../../..';\nimport { GroupChannel } from 'sendbird';\n\ninterface DynamicParams {\n  isOnline: boolean;\n  replyType?: string;\n}\n\ninterface StaticParams {\n  logger: Logger;\n  sdk: Sdk;\n  currentGroupChannel: GroupChannel;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  userFilledMessageListQuery?: Record<string, any>;\n}\n\nfunction useHandleReconnect(\n  { isOnline, replyType }: DynamicParams,\n  {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const wasOffline = !isOnline;\n    return () => {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel?.url) {\n        logger.info('Refreshing conversation state');\n        const useReaction = sdk?.appInfo?.isUsingReaction || false;\n\n        const messageListParams = new sdk.MessageListParams();\n        messageListParams.prevResultSize = 30;\n        messageListParams.isInclusive = true;\n        messageListParams.includeReplies = false;\n        messageListParams.includeReaction = useReaction;\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = 'only_reply_to_channel';\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach((key) => {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_START,\n          payload: null,\n        });\n\n        sdk.GroupChannel.getChannel(currentGroupChannel.url)\n          .then((groupChannel) => {\n            const lastMessageTime = new Date().getTime();\n\n            groupChannel.getMessagesByTimestamp(\n              lastMessageTime,\n              messageListParams,\n            )\n              .then((messages) => {\n                messagesDispatcher({\n                  type: messageActionTypes.CLEAR_SENT_MESSAGES,\n                  payload: null,\n                });\n\n                const hasMore = messages?.length > 0;\n                const lastMessageTimeStamp = hasMore\n                  ? messages[0].createdAt\n                  : null;\n                messagesDispatcher({\n                  type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n                  payload: {\n                    messages,\n                    hasMore,\n                    lastMessageTimeStamp,\n                    currentGroupChannel,\n                  },\n                });\n                setTimeout(() => utils.scrollIntoLast());\n              })\n              .catch((error) => {\n                logger.error('Channel: Fetching messages failed', error);\n              })\n              .finally(() => {\n                currentGroupChannel.markAsRead?.();\n              });\n          });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nexport default useHandleReconnect;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useScrollCallback({\n  currentGroupChannel,\n  lastMessageTimeStamp,\n  userFilledMessageListQuery,\n  replyType,\n}, {\n  hasMore,\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMore) { return; }\n    const { appInfo = {} } = sdk;\n    const useReaction = appInfo.isUsingReaction || false;\n\n    const messageListParams = new sdk.MessageListParams();\n    messageListParams.prevResultSize = 30;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      lastMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        const hasMoreMessages = (messages && messages.length > 0);\n        const lastMessageTs = hasMoreMessages\n          ? messages[0].createdAt\n          : null;\n\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            messages,\n            hasMore: hasMoreMessages,\n            lastMessageTimeStamp: lastMessageTs,\n            currentGroupChannel,\n          },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            messages: [],\n            hasMore: false,\n            lastMessageTimeStamp: 0,\n            currentGroupChannel,\n          },\n        });\n        cb([null, error]);\n      })\n      .finally(() => {\n        currentGroupChannel.markAsRead();\n      });\n  }, [currentGroupChannel, lastMessageTimeStamp, replyType]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nconst RESULT_SIZE = 30;\n\nfunction useScrollDownCallback({\n  currentGroupChannel,\n  latestFetchedMessageTimeStamp,\n  userFilledMessageListQuery,\n  hasMoreToBottom,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMoreToBottom) { return; }\n    const { appInfo = {} } = sdk;\n    const useReaction = appInfo.isUsingReaction || false;\n\n    const messageListParams = new sdk.MessageListParams();\n    messageListParams.nextResultSize = RESULT_SIZE;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      latestFetchedMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        const messagesLength = (messages && messages.length) || 0;\n        const hasMoreMessages = (messagesLength > 0)\n          && (messageListParams.nextResultSize === messagesLength);\n        const lastMessageTs = hasMoreMessages\n          ? messages[messages.length - 1].createdAt\n          : null;\n        messagesDispatcher({\n          type: messageActionTypes.GET_NEXT_MESSAGES_SUCESS,\n          payload: {\n            messages,\n            hasMoreToBottom: hasMoreMessages,\n            latestFetchedMessageTimeStamp: lastMessageTs,\n            currentGroupChannel,\n          },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching later messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_NEXT_MESSAGES_FAILURE,\n          payload: {\n            messages: [],\n            hasMoreToBottom: false,\n            latestFetchedMessageTimeStamp: 0,\n            currentGroupChannel,\n          },\n        });\n        cb([null, error]);\n      })\n      .finally(() => {\n        currentGroupChannel.markAsRead();\n      });\n  }, [currentGroupChannel, latestFetchedMessageTimeStamp, hasMoreToBottom, replyType]);\n}\n\nexport default useScrollDownCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger }) {\n  return useCallback((message, cb) => {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    const { requestState } = message;\n    logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n\n    // Message is only on local\n    if (requestState === 'failed' || requestState === 'pending') {\n      logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (cb) { cb(); }\n      return;\n    }\n\n    // Message is on server\n    currentGroupChannel.deleteMessage(message, (err) => {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n      if (cb) { cb(err); }\n      if (!err) {\n        logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: message.messageId,\n        });\n      } else {\n        logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n      }\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as topics from '../../../lib/pubSub/topics';\n\nfunction useUpdateMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n  onBeforeUpdateUserMessage,\n}, {\n  logger,\n  pubSub,\n  sdk,\n}) {\n  return useCallback((messageId, text, cb) => {\n    const createParamsDefault = (txt) => {\n      const params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    const createCustomPrams = onBeforeUpdateUserMessage\n      && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    const params = onBeforeUpdateUserMessage\n      ? onBeforeUpdateUserMessage(text)\n      : createParamsDefault(text);\n\n    currentGroupChannel.updateUserMessage(messageId, params, (r, e) => {\n      logger.info('Channel: Updating message!', params);\n      const swapParams = sdk.getErrorFirstCallback();\n      let message = r;\n      let err = e;\n      if (swapParams) {\n        message = e;\n        err = r;\n      }\n      if (cb) {\n        cb(err, message);\n      }\n      if (!err) {\n        logger.info('Channel: Updating message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentGroupChannel,\n            message,\n          },\n        });\n        pubSub.publish(\n          topics.UPDATE_USER_MESSAGE,\n          {\n            message,\n            channel: currentGroupChannel,\n          },\n        );\n      } else {\n        logger.warning('Channel: Updating message failed!', err);\n      }\n    });\n  }, [currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useResendMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n}, {\n  logger,\n}) {\n  return useCallback((failedMessage) => {\n    logger.info('Channel: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function'\n      && failedMessage.isResendable()\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESEND_MESSAGEGE_START,\n        payload: failedMessage,\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel\n          .resendUserMessage(failedMessage)\n          .then((message) => {\n            logger.info('Channel: Resending message success!', { message });\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending message failed!', { e });\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel\n          .resendFileMessage(failedMessage, file)\n          .then((message) => {\n            logger.info('Channel: Resending file message success!', { message });\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending file message failed!', { e });\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useResendMessageCallback;\n","import { useRef, useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../lib/pubSub/topics';\n\nexport default function useSendMessageCallback({ currentGroupChannel, onBeforeSendUserMessage }, {\n  sdk,\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const messageInputRef = useRef(null);\n\n  const sendMessage = useCallback(\n    (quoteMessage = null) => {\n      const text = messageInputRef.current.value;\n      const createParamsDefault = (txt) => {\n        const message = (typeof txt === 'string') ? txt.trim() : txt;\n        const params = new sdk.UserMessageParams();\n        params.message = message;\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n\n      const createCustomPrams = onBeforeSendUserMessage\n        && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomPrams) {\n        logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      const params = onBeforeSendUserMessage\n        ? onBeforeSendUserMessage(text, quoteMessage)\n        : createParamsDefault(text);\n\n      logger.info('Channel: Sending message has started', params);\n      const pendingMsg = currentGroupChannel.sendUserMessage(params, (res, err) => {\n        const swapParams = sdk.getErrorFirstCallback();\n        let message = res;\n        let error = err;\n        if (swapParams) {\n          message = err;\n          error = res;\n        }\n        // sending params instead of pending message\n        // to make sure that we can resend the message once it fails\n        if (error) {\n          logger.warning('Channel: Sending message failed!', {\n            message,\n          });\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n          return;\n        }\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: message,\n        });\n      });\n      pubSub.publish(topics.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: pendingMsg,\n        channel: currentGroupChannel,\n      });\n      setTimeout(() => utils.scrollIntoLast());\n    },\n    [currentGroupChannel, onBeforeSendUserMessage],\n  );\n\n  return [messageInputRef, sendMessage];\n}\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../lib/pubSub/topics';\n\nexport default function useSendFileMessageCallback({\n  currentGroupChannel,\n  onBeforeSendFileMessage,\n  imageCompression = {},\n}, {\n  sdk,\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const sendMessage = useCallback((file, quoteMessage = null) => {\n    const {\n      compressionRate,\n      resizingWidth,\n      resizingHeight,\n    } = imageCompression;\n    const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n    const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n    const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n    // pxToNumber returns null if values are invalid\n    const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n      || utils.pxToNumber(resizingHeight);\n\n    const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    const createParamsDefault = (file_) => {\n      const params = new sdk.FileMessageParams();\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    if (canCompressImage) { // Using image compression\n      try {\n        const image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = () => {\n          URL.revokeObjectURL(image.src);\n          const canvas = document.createElement('canvas');\n          const imageWdith = image.naturalWidth || image.width;\n          const imageHeight = image.naturalHeight || image.height;\n\n          let targetWidth = utils.pxToNumber(resizingWidth) || imageWdith;\n          let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(\n            (newImageBlob) => {\n              const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n              if (createCustomParams) {\n                logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              const params = createCustomParams\n                ? onBeforeSendFileMessage(compressedFile, quoteMessage)\n                : createParamsDefault(compressedFile);\n              logger.info('Channel: Uploading file message start!', params);\n              const pendingMessage = currentGroupChannel.sendFileMessage(\n                params,\n                (response, err) => {\n                  const swapParams = sdk.getErrorFirstCallback();\n                  const [message, error] = swapParams ? [err, response] : [response, err];\n                  if (error) {\n                    // sending params instead of pending message\n                    // to make sure that we can resend the message once it fails\n                    logger.error('Channel: Sending file message failed!', { message, error });\n                    message.localUrl = URL.createObjectURL(compressedFile);\n                    message.file = compressedFile;\n                    messagesDispatcher({\n                      type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n                      payload: message,\n                    });\n                    return;\n                  }\n                  logger.info('Channel: Sending file message success!', message);\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n                    payload: message,\n                  });\n                },\n              );\n              pubSub.publish(topics.SEND_MESSAGE_START, {\n                /* pubSub is used instead of messagesDispatcher\n                  to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                message: {\n                  ...pendingMessage,\n                  url: URL.createObjectURL(compressedFile),\n                  // pending thumbnail message seems to be failed\n                  requestState: 'pending',\n                },\n                channel: currentGroupChannel,\n              });\n              setTimeout(() => utils.scrollIntoLast(), 1000);\n            },\n            file.type,\n            compressionRate,\n          );\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else { // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      const params = onBeforeSendFileMessage\n        ? onBeforeSendFileMessage(file)\n        : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n\n      const pendingMsg = currentGroupChannel.sendFileMessage(params, (response, err) => {\n        const swapParams = sdk.getErrorFirstCallback();\n        const [message, error] = swapParams ? [err, response] : [response, err];\n        if (error) {\n          // sending params instead of pending message\n          // to make sure that we can resend the message once it fails\n          logger.error('Channel: Sending file message failed!', { message, error });\n          message.localUrl = URL.createObjectURL(file);\n          message.file = file;\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n          return;\n        }\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: message,\n        });\n      });\n      pubSub.publish(topics.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: {\n          ...pendingMsg,\n          url: URL.createObjectURL(file),\n          // pending thumbnail message seems to be failed\n          requestState: 'pending',\n        },\n        channel: currentGroupChannel,\n      });\n      setTimeout(() => utils.scrollIntoLast(), 1000);\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst ReactionButton = React.forwardRef((props, ref) => {\n  const {\n    className,\n    width,\n    height,\n    selected,\n    onClick,\n    children,\n  } = props;\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        `sendbird-reaction-button${selected ? '--selected' : ''}`,\n      ].join(' ')}\n      ref={ref}\n      role=\"button\"\n      style={{\n        width: typeof width === 'string' ? `${width.slice(0, -2) - 2}px` : `${width - 2}px`,\n        height: typeof height === 'string' ? `${height.slice(0, -2) - 2}px` : `${height - 2}px`,\n      }}\n      onClick={(e) => onClick(e)}\n      onKeyDown={(e) => onClick(e)}\n      tabIndex={0}\n    >\n      <div className=\"sendbird-reaction-button__inner\">\n        {children}\n      </div>\n    </div>\n  );\n});\n\nReactionButton.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  width: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  height: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  selected: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.element.isRequired,\n};\n\nReactionButton.defaultProps = {\n  className: '',\n  width: '36px',\n  height: '36px',\n  selected: false,\n  onClick: () => { },\n};\n\nexport default ReactionButton;\n","import React, { useMemo } from 'react';\n\nimport { EmojiListItems } from '../../../ui/ContextMenu';\nimport ReactionButton from '../../../ui/ReactionButton';\nimport ImageRenderer from '../../../ui/ImageRenderer';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nexport default function useMemoizedEmojiListItems({\n  emojiContainer, toggleReaction,\n}, {\n  useReaction,\n  logger,\n  userId,\n  emojiAllList,\n}) {\n  /* eslint-disable react/prop-types */\n  return useMemo(() => ({\n    parentRef,\n    parentContainRef,\n    message,\n    closeDropdown,\n    spaceFromTrigger = {},\n  }) => {\n    if (!useReaction || !(parentRef || parentContainRef || message || closeDropdown)) {\n      logger.warning('Channel: Invalid Params in memoizedEmojiListItems');\n      return null;\n    }\n\n    return (\n      <EmojiListItems\n        parentRef={parentRef}\n        parentContainRef={parentContainRef}\n        closeDropdown={closeDropdown}\n        spaceFromTrigger={spaceFromTrigger}\n      >\n        {\n          emojiAllList.map((emoji) => {\n            const reactedReaction = message.reactions\n              .filter((reaction) => reaction.key === emoji.key)[0];\n            const isReacted = reactedReaction\n              ? !(reactedReaction.userIds.indexOf(userId) < 0)\n              : false;\n            return (\n              <ReactionButton\n                key={emoji.key}\n                width=\"36px\"\n                height=\"36px\"\n                selected={isReacted}\n                onClick={() => {\n                  closeDropdown();\n                  toggleReaction(message, emoji.key, isReacted);\n                }}\n              >\n                <ImageRenderer\n                  url={emoji.url}\n                  width=\"28px\"\n                  height=\"28px\"\n                  defaultComponent={\n                    <Icon width=\"28px\" height=\"28px\" type={IconTypes.QUESTION} />\n                  }\n                />\n              </ReactionButton>\n            );\n          })\n        }\n      </EmojiListItems>\n    );\n  }, [emojiContainer, toggleReaction]);\n}\n","import { useCallback } from 'react';\n\nexport default function useToggleReactionCallback({ currentGroupChannel }, { logger }) {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key)\n        .then((res) => {\n          logger.info('Delete reaction success', res);\n        })\n        .catch((err) => {\n          logger.warning('Delete reaction failed', err);\n        });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key)\n      .then((res) => {\n        logger.info('Add reaction success', res);\n      })\n      .catch((err) => {\n        logger.warning('Add reaction failed', err);\n      });\n  }, [currentGroupChannel]);\n}\n","import { useCallback } from 'react';\nimport { SendbirdTypes } from '../../../types';\nimport { Logger } from '../../../index';\n\ninterface DynamicParams {\n  setIntialTimeStamp(ts: number): null;\n  setAnimatedMessageId(id: number): null;\n  allMessages: SendbirdTypes['BaseMessageInstance'][];\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useScrollToMessage({\n  setIntialTimeStamp,\n  setAnimatedMessageId,\n  allMessages,\n}: DynamicParams,\n  { logger }: StaticParams,\n): (createdAt: number, messageId: number) => void {\n  return useCallback(\n    (createdAt: number, messageId: number) => {\n      const isPresent = allMessages.find((m) => (\n        m.messageId === messageId\n      ));\n      setAnimatedMessageId(null);\n      setTimeout(() => {\n        if (isPresent) {\n          logger.info('Channel: scroll to message - message is present');\n          setAnimatedMessageId(messageId);\n        } else {\n          logger.info('Channel: scroll to message - fetching older messages');\n          setIntialTimeStamp(null);\n          setIntialTimeStamp(createdAt);\n          setAnimatedMessageId(messageId);\n        }\n      });\n    }, [\n    setIntialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  ],\n  );\n}\n\nexport default useScrollToMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport Loader from '../Loader';\n\nimport {\n  getMessageCreatedAt,\n  getOutgoingMessageStates,\n  isSentStatus,\n} from '../../utils';\n\nexport const MessageStatusTypes = getOutgoingMessageStates();\nexport default function MessageStatus({\n  className,\n  message,\n  channel,\n  status,\n}) {\n  const showMessageStatusIcon = channel?.isGroupChannel()\n    && !channel?.isSuper\n    && !channel?.isPublic\n    && !channel?.isBroadcast;\n  const iconType = {\n    [MessageStatusTypes.SENT]: IconTypes.DONE,\n    [MessageStatusTypes.DELIVERED]: IconTypes.DONE_ALL,\n    [MessageStatusTypes.READ]: IconTypes.DONE_ALL,\n    [MessageStatusTypes.FAILED]: IconTypes.ERROR,\n  };\n  const iconColor = {\n    [MessageStatusTypes.SENT]: IconColors.SENT,\n    [MessageStatusTypes.DELIVERED]: IconColors.SENT,\n    [MessageStatusTypes.READ]: IconColors.READ,\n    [MessageStatusTypes.FAILED]: IconColors.ERROR,\n  };\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-status',\n      ].join(' ')}\n    >\n      {(showMessageStatusIcon) && (\n        <div>\n          {(status === MessageStatusTypes.PENDING) ? (\n            <Loader\n              className=\"sendbird-message-status__icon\"\n              width=\"16px\"\n              height=\"16px\"\n            >\n              <Icon\n                type={IconTypes.SPINNER}\n                fillColor={IconColors.PRIMARY}\n                width=\"16px\"\n                height=\"16px\"\n              />\n            </Loader>\n          ) : (\n            <Icon\n              className=\"sendbird-message-status__icon\"\n              type={iconType[status] || IconTypes.ERROR}\n              fillColor={iconColor[status]}\n              width=\"16px\"\n              height=\"16px\"\n            />\n          )}\n        </div>\n      )}\n      {isSentStatus(status) && (\n        <Label\n          className=\"sendbird-message-status__text\"\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {getMessageCreatedAt(message)}\n        </Label>\n      )}\n    </div>\n  );\n}\n\nMessageStatus.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  message: PropTypes.shape({\n    createdAt: PropTypes.number,\n    sender: PropTypes.shape({\n      friendName: PropTypes.string,\n      nickname: PropTypes.string,\n      userId: PropTypes.string,\n      profileUrl: PropTypes.string,\n    }),\n    sendingStatus: PropTypes.string,\n  }),\n  channel: PropTypes.shape({\n    isGroupChannel: PropTypes.func,\n    isSuper: PropTypes.bool,\n    isBroadcast: PropTypes.bool,\n    isPublic: PropTypes.bool,\n  }),\n  status: PropTypes.string,\n};\n\nMessageStatus.defaultProps = {\n  className: '',\n  message: null,\n  channel: null,\n  status: '',\n};\n","import React, { ReactElement, useContext, useRef } from 'react';\nimport { FileMessage, GroupChannel, OpenChannel, UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport {\n  getClassName,\n  copyToClipboard,\n  isUserMessage,\n  isSentMessage,\n  isFailedMessage,\n  isPendingMessage,\n} from '../../utils/index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { ReplyType } from '../../index';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage | FileMessage;\n  channel: GroupChannel | OpenChannel;\n  isByMe?: boolean;\n  disabled?: boolean;\n  replyType?: ReplyType;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  resendMessage?: (message: UserMessage | FileMessage) => void;\n  setQuoteMessage?: (message: UserMessage | FileMessage) => void;\n  setSupposedHover?: (bool: boolean) => void;\n}\n\nexport default function MessageItemMenu({\n  className,\n  message,\n  channel,\n  isByMe = false,\n  disabled = false,\n  replyType,\n  showEdit,\n  showRemove,\n  resendMessage,\n  setQuoteMessage,\n  setSupposedHover,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  const showMenuItemCopy: boolean = isUserMessage(message as UserMessage);\n  const showMenuItemReply: boolean = replyType === 'QUOTE_REPLY' && !isFailedMessage(channel, message) && !isPendingMessage(channel, message);\n  const showMenuItemEdit: boolean = (isUserMessage(message as UserMessage) && isSentMessage(channel, message) && isByMe);\n  const showMenuItemResend: boolean = (isFailedMessage(channel, message) && message?.isResendable?.() && isByMe);\n  const showMenuItemDelete: boolean = !isPendingMessage(channel, message) && isByMe;\n\n  if (!(showMenuItemCopy || showMenuItemReply || showMenuItemEdit || showMenuItemResend || showMenuItemDelete)) {\n    return null;\n  }\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-menu__trigger__icon\"\n              type={IconTypes.MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <MenuItems\n              className=\"sendbird-message-item-menu__list\"\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              openLeft={isByMe}\n            >\n              {showMenuItemCopy && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-copy\"\n                  onClick={() => {\n                    copyToClipboard((message as UserMessage)?.message);\n                    closeDropdown();\n                  }}\n                >\n                  {stringSet.MESSAGE_MENU__COPY}\n                </MenuItem>\n              )}\n              {showMenuItemReply && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-reply\"\n                  onClick={() => {\n                    setQuoteMessage(message);\n                    closeDropdown();\n                  }}\n                  disable={message?.parentMessageId > 0}\n                >\n                  {stringSet.MESSAGE_MENU__REPLY}\n                </MenuItem>\n              )}\n              {showMenuItemEdit && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-edit\"\n                  onClick={() => {\n                    if (!disabled) {\n                      showEdit(true);\n                      closeDropdown();\n                    }\n                  }}\n                >\n                  {stringSet.MESSAGE_MENU__EDIT}\n                </MenuItem>\n              )}\n              {showMenuItemResend && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-resend\"\n                  onClick={() => {\n                    if (!disabled) {\n                      resendMessage(message);\n                      closeDropdown();\n                    }\n                  }}\n                >\n                  {stringSet.MESSAGE_MENU__RESEND}\n                </MenuItem>\n              )}\n              {showMenuItemDelete && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-delete\"\n                  onClick={() => {\n                    if (!disabled) {\n                      showRemove(true);\n                      closeDropdown();\n                    }\n                  }}\n                  disable={message?.threadInfo?.replyCount > 0}\n                >\n                  {stringSet.MESSAGE_MENU__DELETE}\n                </MenuItem>\n              )}\n            </MenuItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import React, { ReactElement, useRef } from 'react';\nimport { FileMessage, UserMessage, Emoji, Reaction, EmojiContainer, GroupChannel, OpenChannel } from 'sendbird';\nimport './index.scss';\n\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport ReactionButton from '../ReactionButton';\nimport { getClassName, getEmojiListAll, isPendingMessage, isFailedMessage } from '../../utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage | FileMessage;\n  channel: GroupChannel | OpenChannel;\n  userId: string;\n  spaceFromTrigger?: Record<string, unknown>;\n  emojiContainer?: EmojiContainer;\n  toggleReaction?: (message: UserMessage | FileMessage, reactionKey: string, isReacted: boolean) => void;\n  setSupposedHover?: (bool: boolean) => void;\n}\n\nexport default function MessageItemReactionMenu({\n  className,\n  message,\n  channel,\n  userId,\n  spaceFromTrigger = {},\n  emojiContainer,\n  toggleReaction,\n  setSupposedHover,\n}: Props): ReactElement {\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  if(isPendingMessage(channel, message) || isFailedMessage(channel, message)) {\n    return null;\n  }\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-reaction-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-reaction-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-reaction-menu__trigger__icon\"\n              type={IconTypes.EMOJI_MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <EmojiListItems\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              spaceFromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = message?.reactions?.\n                  filter((reaction: Reaction) => reaction.key === emoji.key)[0]?.userIds?.\n                  some((reactorId: string) => reactorId === userId);\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={() => {\n                      closeDropdown();\n                      toggleReaction(message, emoji.key, isReacted);\n                    }}\n                  >\n                    <ImageRenderer\n                      url={emoji.url}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style) => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\nexport default function Tooltip({\n  className,\n  children,\n}) {\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-tooltip',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-tooltip__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONCONTENT_1}\n      >\n        {children}\n      </Label>\n    </div>\n  );\n}\n\nTooltip.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.string,\n  ]),\n};\n\nTooltip.defaultProps = {\n  className: '',\n  children: '',\n};\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst SPACE_FROM_TRIGGER = 8;\n\nexport default function TooltipWrapper({\n  className,\n  children,\n  hoverTooltip,\n  // clickTooltip can be added later\n}) {\n  const [showHoverTooltip, setShowHoverTooltip] = useState(false);\n  const childrenRef = useRef(null);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-tooltip-wrapper',\n      ].join(' ')}\n      onMouseOver={() => { setShowHoverTooltip(true); }}\n      onFocus={() => { setShowHoverTooltip(true); }}\n      onMouseOut={() => { setShowHoverTooltip(false); }}\n      onBlur={() => { setShowHoverTooltip(false); }}\n    >\n      <div\n        className=\"sendbird-tooltip-wrapper__children\"\n        ref={childrenRef}\n      >\n        {children}\n      </div>\n      {\n        showHoverTooltip && (\n          <div\n            className=\"sendbird-tooltip-wrapper__hover-tooltip\"\n            style={{ bottom: `calc(100% + ${SPACE_FROM_TRIGGER}px)` }}\n          >\n            <div className=\"sendbird-tooltip-wrapper__hover-tooltip__inner\">\n              <div\n                className=\"sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container\"\n                style={{ left: childrenRef.current && `calc(${childrenRef.current.offsetWidth / 2}px - 50%)` }}\n              >\n                {hoverTooltip}\n              </div>\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nTooltipWrapper.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  children: PropTypes.element.isRequired,\n  hoverTooltip: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]).isRequired,\n};\nTooltipWrapper.defaultProps = {\n  className: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label, { LabelTypography, LabelColors } from '../Label';\n\nimport './index.scss';\n\nconst ReactionBadge = React.forwardRef((props, ref) => {\n  const {\n    className,\n    children,\n    count,\n    selected,\n    isAdd,\n    onClick,\n  } = props;\n\n  const getClassNameTail = () => {\n    if (selected && !isAdd) {\n      return '--selected';\n    }\n    if (isAdd) {\n      return '--is-add';\n    }\n    return '';\n  };\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        `sendbird-reaction-badge${getClassNameTail()}`,\n      ].join(' ')}\n      role=\"button\"\n      ref={ref}\n      onClick={onClick}\n      onKeyDown={onClick}\n      tabIndex={0}\n    >\n      <div className=\"sendbird-reaction-badge__inner\">\n        <div className=\"sendbird-reaction-badge__inner__icon\">\n          {children}\n        </div>\n        <Label\n          className={(children && count) && 'sendbird-reaction-badge__inner__count'}\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {count}\n        </Label>\n      </div>\n    </div>\n  );\n});\n\nReactionBadge.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  children: PropTypes.element.isRequired,\n  count: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  selected: PropTypes.bool,\n  isAdd: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nReactionBadge.defaultProps = {\n  className: '',\n  count: '',\n  selected: false,\n  isAdd: false,\n  onClick: () => { },\n};\n\nexport default ReactionBadge;\n","import React, { ReactElement, useContext, useRef } from 'react';\nimport { Emoji, EmojiContainer, FileMessage, Reaction, UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Tooltip from '../Tooltip';\nimport TooltipWrapper from '../TooltipWrapper';\nimport ReactionBadge from '../ReactionBadge';\nimport ReactionButton from '../ReactionButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\n\nimport { getClassName, getEmojiListAll, getEmojiMapAll, getEmojiTooltipString, isReactedBy } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  message: UserMessage | FileMessage;\n  emojiContainer: EmojiContainer;\n  memberNicknamesMap: Map<string, string>;\n  spaceFromTrigger?: Record<string, unknown>;\n  isByMe?: boolean;\n  toggleReaction?: (message: UserMessage | FileMessage, key: string, byMe: boolean) => void;\n}\n\nexport default function EmojiReactions2({\n  className,\n  userId,\n  message,\n  emojiContainer,\n  memberNicknamesMap,\n  spaceFromTrigger = {},\n  isByMe = false,\n  toggleReaction,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const emojisMap = getEmojiMapAll(emojiContainer);\n  const addReactionRef = useRef(null);\n\n  return (\n    <div className={getClassName([\n      className, 'sendbird-emoji-reactions',\n      isByMe ? 'outgoing' : 'incoming',\n    ])}>\n      {(message?.reactions?.length > 0) && (\n        message.reactions.map((reaction: Reaction): ReactElement => {\n          const reactedByMe = isReactedBy(userId, reaction);\n          return (\n            <TooltipWrapper\n              className=\"sendbird-emoji-reactions__reaction-badge\"\n              key={reaction?.key}\n              hoverTooltip={(reaction?.userIds?.length > 0) && (\n                <Tooltip>\n                  {getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)}\n                </Tooltip>\n              )}\n            >\n              <ReactionBadge\n                count={reaction.userIds.length}\n                selected={reactedByMe}\n                onClick={() => toggleReaction(message, reaction.key, reactedByMe)}\n              >\n                <ImageRenderer\n                  circle\n                  url={emojisMap.get(reaction?.key)?.url || ''}\n                  width=\"20px\"\n                  height=\"20px\"\n                  defaultComponent={(\n                    <Icon width=\"20px\" height=\"20px\" type={IconTypes.QUESTION} />\n                  )}\n                />\n              </ReactionBadge>\n            </TooltipWrapper>\n          );\n        })\n      )}\n      {(message?.reactions?.length < emojisMap.size) && (\n        <ContextMenu\n          menuTrigger={(toggleDropdown: () => void): ReactElement => (\n            <ReactionBadge\n              className=\"sendbird-emoji-reactions__add-reaction-badge\"\n              ref={addReactionRef}\n              isAdd\n              onClick={toggleDropdown}\n            >\n              <Icon\n                type={IconTypes.EMOJI_MORE}\n                fillColor={IconColors.ON_BACKGROUND_3}\n                width=\"20px\"\n                height=\"20px\"\n              />\n            </ReactionBadge>\n          )}\n          menuItems={(closeDropdown: () => void): ReactElement => (\n            <EmojiListItems\n              parentRef={addReactionRef}\n              parentContainRef={addReactionRef}\n              closeDropdown={closeDropdown}\n              spacefromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = message?.reactions?.\n                  filter((reaction: Reaction): boolean => reaction.key === emoji.key)[0]?.userIds?.\n                  some((reactorId: string): boolean => reactorId === userId);\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={(): void => {\n                      closeDropdown();\n                      toggleReaction(message, emoji.key, isReacted);\n                    }}\n                  >\n                    <ImageRenderer\n                      url={emoji?.url || ''}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style: Record<string, unknown>): ReactElement => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          )}\n        />\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\nexport default function AdminMessage({\n  className,\n  message,\n}) {\n  if (!(message.isAdminMessage || message.messageType) || !message.isAdminMessage() || message.messageType !== 'admin') {\n    return null;\n  }\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-admin-message',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-admin-message__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {message.message}\n      </Label>\n    </div>\n  );\n}\n\nAdminMessage.propTypes = {\n  message: PropTypes.shape({\n    message: PropTypes.string,\n    messageType: PropTypes.string,\n    isAdminMessage: PropTypes.func,\n  }),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n};\n\nAdminMessage.defaultProps = {\n  message: {},\n  className: '',\n};\n","import React, { ReactElement, useContext } from 'react';\nimport { UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport {\n  getClassName,\n  isEditedMessage,\n} from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n}\n\nexport default function TextMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-text-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      message?.reactions?.length > 0 ? 'reactions' : '',\n    ])}>\n      {\n        message?.message.split(/\\r/).map((word) => (\n          (word === '')\n            ? <br key={word} />\n            : (\n              <Label\n                key={word}\n                className=\"sendbird-text-message-item-body__message\"\n                type={LabelTypography.BODY_1}\n                color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n              >\n                {word}\n              </Label>\n            )\n        ))\n      }\n      {\n        isEditedMessage(message) && (\n          <Label\n            className=\"sendbird-text-message-item-body__message edited\"\n            type={LabelTypography.BODY_1}\n            color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n          >\n            {` ${stringSet.MESSAGE_EDITED} `}\n          </Label>\n        )\n      }\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { FileMessage } from 'sendbird';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport TextButton from '../TextButton';\nimport { getClassName, getUIKitFileType, truncateString } from '../../utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: FileMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n}\n\nexport default function FileMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-file-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      message?.reactions?.length > 0 ? 'reactions' : '',\n    ])}>\n      <div className=\"sendbird-file-message-item-body__file-icon\">\n        <Icon\n          className={'sendbird-file-message-item-body__file-icon__icon'}\n          type={{\n            IMAGE: IconTypes.PHOTO,\n            VIDEO: IconTypes.PLAY,\n            AUDIO: IconTypes.FILE_AUDIO,\n            GIF: IconTypes.GIF,\n            OTHERS: IconTypes.FILE_DOCUMENT,\n          }[getUIKitFileType(message?.type)]}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n      <TextButton\n        className=\"sendbird-file-message-item-body__file-name\"\n        onClick={() => { window.open(message?.url) }}\n        color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      >\n        <Label\n          className=\"sendbird-file-message-item-body__file-name__text\"\n          type={LabelTypography.BODY_1}\n          color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n        >\n          {truncateString(message?.name || message?.url)}\n        </Label>\n      </TextButton>\n    </div>\n  );\n}\n","import React, { ReactElement, useState } from 'react';\nimport { FileMessage } from 'sendbird';\nimport './index.scss';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport { getClassName, isGifMessage, isVideoMessage } from '../../utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: FileMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  showFileViewer?: (bool: boolean) => void;\n}\n\nexport default function ThumbnailMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n  showFileViewer,\n}: Props): ReactElement {\n  const { thumbnails = [] } = message;\n  const thumbnailUrl: string = thumbnails.length > 0 ? thumbnails[0]?.url : '';\n  const [imageRendered, setImageRendered] = useState(false);\n\n  return (\n    <div\n      className={getClassName([\n        className,\n        'sendbird-thumbnail-message-item-body',\n        isByMe ? 'outgoing' : 'incoming',\n        mouseHover ? 'mouse-hover' : '',\n        message?.reactions?.length > 0 ? 'reactions' : '',\n      ])}\n      onClick={() => showFileViewer(true)}\n    >\n      <ImageRenderer\n        className=\"sendbird-thumbnail-message-item-body__thumbnail\"\n        url={thumbnailUrl || message?.url}\n        alt={message?.type}\n        width=\"360px\"\n        height=\"270px\"\n        onLoad={() => { setImageRendered(true) }}\n        placeHolder={(style) => (\n          <div\n            className=\"sendbird-thumbnail-message-item-body__placeholder\"\n            style={style}\n          >\n            <div className=\"sendbird-thumbnail-message-item-body__placeholder__icon\">\n              <Icon\n                type={isVideoMessage(message) ? IconTypes.PLAY : IconTypes.PHOTO}\n                fillColor={IconColors.ON_BACKGROUND_2}\n                width=\"34px\"\n                height=\"34px\"\n              />\n            </div>\n          </div>\n        )}\n      />\n      {\n        (isVideoMessage(message) && !thumbnailUrl) && !imageRendered && (\n          <video className=\"sendbird-thumbnail-message-item-body__video\">\n            <source src={message?.url} type={message?.type} />\n          </video>\n        )\n      }\n      <div className=\"sendbird-thumbnail-message-item-body__image-cover\" />\n      {\n        (isVideoMessage(message) || isGifMessage(message)) && (\n          <div className=\"sendbird-thumbnail-message-item-body__icon-wrapper\">\n            <div className=\"sendbird-thumbnail-message-item-body__icon-wrapper__icon\">\n              <Icon\n                type={isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF}\n                fillColor={IconColors.GRAY}\n                width=\"34px\"\n                height=\"34px\"\n              />\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n","import React, { ReactElement, useContext } from 'react';\nimport { UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport LinkLabel from '../LinkLabel';\nimport Icon, { IconTypes } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport {\n  getClassName,\n  isEditedMessage,\n  isUrl,\n} from '../../utils';\nimport uuidv4 from '../../utils/uuid';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n}\n\nexport default function OGMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const openOGUrl = (): void => {\n    if (message?.ogMetaData?.url) window.open(message?.ogMetaData?.url);\n  };\n\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-og-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      message?.reactions?.length > 0 ? 'reactions' : '',\n    ])}>\n      <div className=\"sendbird-og-message-item-body__text-bubble\">\n        {\n          message?.message.split(' ').map((word: string) => (\n            isUrl(word)\n              ? (\n                <LinkLabel\n                  className=\"sendbird-og-message-item-body__text-bubble__message\"\n                  key={uuidv4()}\n                  src={word}\n                  type={LabelTypography.BODY_1}\n                  color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n                >\n                  {word}\n                </LinkLabel>\n              )\n              : (\n                <Label\n                  className=\"sendbird-og-message-item-body__text-bubble__message\"\n                  key={uuidv4()}\n                  type={LabelTypography.BODY_1}\n                  color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n                >\n                  {word}\n                </Label>\n              )\n          ))\n        }\n        {\n          isEditedMessage(message) && (\n            <Label\n              className=\"sendbird-og-message-item-body__text-bubble__message\"\n              type={LabelTypography.BODY_1}\n              color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n            >\n              {` ${stringSet.MESSAGE_EDITED} `}\n            </Label>\n          )\n        }\n      </div>\n      <div\n        className=\"sendbird-og-message-item-body__og-thumbnail\"\n        onClick={openOGUrl}\n      >\n        <ImageRenderer\n          className=\"sendbird-og-message-item-body__og-thumbnail__image\"\n          url={message?.ogMetaData?.defaultImage?.url || ''}\n          alt={message?.ogMetaData?.defaultImage?.alt}\n          // TODO: Change fixing width and height lengths\n          width=\"320px\"\n          height=\"180px\"\n          defaultComponent={(\n            <div className=\"sendbird-og-message-item-body__og-thumbnail__place-holder\">\n              <Icon\n                className=\"sendbird-og-message-item-body__og-thumbnail__place-holder__icon\"\n                type={IconTypes.THUMBNAIL_NONE}\n                width=\"56px\"\n                height=\"56px\"\n              />\n            </div>\n          )}\n        />\n      </div>\n      <div\n        className=\"sendbird-og-message-item-body__description\"\n        onClick={openOGUrl}\n      >\n        {message?.ogMetaData?.title && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__title\"\n            type={LabelTypography.SUBTITLE_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {message.ogMetaData.title}\n          </Label>\n        )}\n        {message?.ogMetaData?.description && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__description\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {message.ogMetaData.description}\n          </Label>\n        )}\n        {message?.ogMetaData?.url && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__url\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {message.ogMetaData.url}\n          </Label>\n        )}\n      </div>\n      <div className=\"sendbird-og-message-item-body__cover\" />\n    </div>\n  );\n}\n","import React, { ReactElement, useContext } from 'react';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { CoreMessageType, getClassName } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  isByMe?: boolean;\n  message: CoreMessageType;\n  mouseHover?: boolean;\n}\n\nexport default function UnknownMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-unknown-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      message?.reactions?.length > 0 ? 'reactions' : '',\n    ])}>\n      <Label\n        className=\"sendbird-unknown-message-item-body__header\"\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      >\n        {stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE}\n      </Label>\n      <Label\n        className=\"sendbird-unknown-message-item-body__description\"\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n      >\n        {stringSet.UNKNOWN__CANNOT_READ_MESSAGE}\n      </Label>\n    </div>\n  );\n}\n","import React, { ReactElement, useContext, useState } from 'react';\nimport { FileMessage, UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport ImageRenderer from '../ImageRenderer';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport {\n  getClassName,\n  getUIKitFileType,\n  getUIKitFileTypes,\n  isFileMessage,\n  isGif,\n  isSupportedFileView,\n  isThumbnailMessage,\n  isUserMessage,\n  isVideo,\n  truncateString,\n} from '../../utils';\ninterface Props {\n  message?: UserMessage | FileMessage;\n  userId?: string;\n  isByMe?: boolean;\n  className?: string | Array<string>;\n  onClick?: () => void;\n}\n\nexport default function QuoteMessage({\n  message,\n  userId = '',\n  isByMe = false,\n  className,\n  onClick,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n\n  const { parentMessage } = message;\n  const parentMessageSender = (parentMessage as UserMessage | FileMessage)?.sender;\n  const parentMessageSenderNickname = (userId === parentMessageSender?.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender?.nickname;\n  const parentMessageUrl = (parentMessage as FileMessage)?.url || '';\n  const parentMessageType = (parentMessage as FileMessage)?.type;\n  const currentMessageSenderNickname = (userId === message?.sender?.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : message?.sender?.nickname;\n\n  const [isThumbnailLoaded, setThumbnailLoaded] = useState(false);\n  const uikitFileTypes = getUIKitFileTypes();\n  const splitFileName = (parentMessage as FileMessage)?.name ? (parentMessage as FileMessage).name.split('/') : parentMessageUrl.split('/');\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-quote-message', isByMe ? 'outgoing' : 'incoming'])}\n      key={parentMessage?.messageId}\n      onClick={() => { if (onClick) onClick() }}\n    >\n      <div className=\"sendbird-quote-message__replied-to\">\n        <Icon\n          className=\"sendbird-quote-message__replied-to__icon\"\n          type={IconTypes.REPLY}\n          fillColor={IconColors.ON_BACKGROUND_3}\n          width=\"12px\"\n          height=\"12px\"\n        />\n        <Label\n          className=\"sendbird-quote-message__replied-to__text\"\n          type={LabelTypography.CAPTION_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {`${currentMessageSenderNickname} ${stringSet.QUOTED_MESSAGE__REPLIED_TO} ${parentMessageSenderNickname}`}\n        </Label>\n      </div>\n      <div className=\"sendbird-quote-message__replied-message\">\n        {/* text message */}\n        {(isUserMessage(parentMessage as UserMessage) && (parentMessage as UserMessage)?.message?.length > 0) && (\n          <div className=\"sendbird-quote-message__replied-message__text-message\">\n            <Label\n              className=\"sendbird-quote-message__replied-message__text-message__word\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {(parentMessage as UserMessage)?.message}\n            </Label>\n          </div>\n        )}\n        {/* thumbnail message */}\n        {(isThumbnailMessage(parentMessage as FileMessage) && parentMessageUrl) && (\n          <div className=\"sendbird-quote-message__replied-message__thumbnail-message\">\n            <ImageRenderer\n              className=\"sendbird-quote-message__replied-message__thumbnail-message__image\"\n              url={parentMessageUrl}\n              alt={parentMessageType}\n              width=\"144px\"\n              height=\"108px\"\n              onLoad={() => setThumbnailLoaded(true)}\n              defaultComponent={(\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__placeholder\">\n                  <div className=\"sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon\">\n                    <Icon\n                      type={isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO}\n                      fillColor={IconColors.ON_BACKGROUND_2}\n                      width=\"22px\"\n                      height=\"22px\"\n                    />\n                  </div>\n                </div>\n              )}\n            />\n            {(isVideo(parentMessageType) && !((parentMessage as FileMessage)?.thumbnails?.length > 0)) && (\n              <>\n                <video className=\"sendbird-quote-message__replied-message__thumbnail-message__video\">\n                  <source src={parentMessageUrl} type={parentMessageType} />\n                </video>\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover\">\n                  <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\">\n                    <Icon\n                      type={IconTypes.PLAY}\n                      fillColor={IconColors.GRAY}\n                      width=\"14px\"\n                      height=\"14px\"\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            {(isThumbnailLoaded && isGif(parentMessageType)) && (\n              <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover\">\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\">\n                  <Icon\n                    type={IconTypes.GIF}\n                    fillColor={IconColors.GRAY}\n                    width=\"14px\"\n                    height=\"14px\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        {/* file message */}\n        {(isFileMessage(parentMessage as FileMessage) && !isSupportedFileView((parentMessage as FileMessage).type) && parentMessageUrl) && (\n          <div className=\"sendbird-quote-message__replied-message__file-message\">\n            <Icon\n              className=\"sendbird-quote-message__replied-message__file-message__type-icon\"\n              type={{\n                [uikitFileTypes.IMAGE]: IconTypes.PHOTO,\n                [uikitFileTypes.VIDEO]: IconTypes.PLAY,\n                [uikitFileTypes.AUDIO]: IconTypes.FILE_AUDIO,\n                [uikitFileTypes.GIF]: IconTypes.GIF,\n                [uikitFileTypes.OTHERS]: IconTypes.FILE_DOCUMENT,\n              }[getUIKitFileType(parentMessageType)]}\n              fillColor={IconColors.ON_BACKGROUND_3}\n              width=\"16px\"\n              height=\"16px\"\n            />\n            <Label\n              className=\"sendbird-quote-message__replied-message__file-message__file-name\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_3}\n            >\n              {truncateString(splitFileName[splitFileName.length - 1])}\n            </Label>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { ReactElement, useContext, useRef, useState } from 'react';\nimport { GroupChannel, AdminMessage, UserMessage, FileMessage, EmojiContainer } from 'sendbird';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport UserProfile from '../UserProfile';\nimport MessageStatus from '../MessageStatus';\nimport MessageItemMenu from '../MessageItemMenu';\nimport MessageItemReactionMenu from '../MessageItemReactionMenu';\nimport ContextMenu, { MenuItems } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport EmojiReactions from '../EmojiReactions';\n\nimport ClientAdminMessage from '../AdminMessage';\nimport TextMessageItemBody from '../TextMessageItemBody';\nimport FileMessageItemBody from '../FileMessageItemBody';\nimport ThumbnailMessageItemBody from '../ThumbnailMessageItemBody';\nimport OGMessageItemBody from '../OGMessageItemBody';\nimport UnknownMessageItemBody from '../UnknownMessageItemBody';\nimport QuoteMessage from '../QuoteMessage';\n\nimport {\n  getClassName,\n  getUIKitMessageTypes,\n  getUIKitMessageType,\n  isTextMessage,\n  isOGMessage,\n  isThumbnailMessage,\n  getOutgoingMessageState,\n  getSenderName,\n  getMessageCreatedAt,\n} from '../../utils';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport { ReplyType } from '../../index.js';\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  channel: GroupChannel;\n  message: AdminMessage | UserMessage | FileMessage;\n  disabled?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  useReaction?: boolean;\n  replyType?: ReplyType;\n  nicknamesMap?: Map<string, string>;\n  emojiContainer?: EmojiContainer;\n  scrollToMessage?: (createdAt: number, messageId: number) => void;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  showFileViewer?: (bool: boolean) => void;\n  resendMessage?: (message: UserMessage | FileMessage) => void;\n  toggleReaction?: (message: UserMessage | FileMessage, reactionKey: string, isReacted: boolean) => void;\n  setQuoteMessage?: (message: UserMessage | FileMessage) => void;\n}\nexport default function MessageContent({\n  className,\n  userId,\n  channel,\n  message,\n  disabled = false,\n  chainTop = false,\n  chainBottom = false,\n  useReaction = false,\n  replyType,\n  nicknamesMap,\n  emojiContainer,\n  scrollToMessage,\n  showEdit,\n  showRemove,\n  showFileViewer,\n  resendMessage,\n  toggleReaction,\n  setQuoteMessage,\n}: Props): ReactElement {\n  const messageTypes = getUIKitMessageTypes();\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const avatarRef = useRef(null);\n  const [mouseHover, setMouseHover] = useState(false);\n  const [supposedHover, setSupposedHover] = useState(false);\n\n  const isByMe = (userId === (message as UserMessage | FileMessage)?.sender?.userId)\n    || ((message as UserMessage | FileMessage).sendingStatus === 'pending')\n    || ((message as UserMessage | FileMessage).sendingStatus === 'failed');\n  const isByMeClassName = isByMe ? 'outgoing' : 'incoming';\n  const chainTopClassName = chainTop ? 'chain-top' : '';\n  const useReactionClassName = useReaction ? 'use-reactions' : '';\n  const supposedHoverClassName = supposedHover ? 'supposed-hover' : '';\n  const useReplying = !!((replyType === 'QUOTE_REPLY') && message?.parentMessageId && message?.parentMessage);\n  const useReplyingClassName = useReplying ? 'use-quote' : '';\n\n  if (message?.isAdminMessage?.() || message?.messageType === 'admin') {\n    return (<ClientAdminMessage message={message} />);\n  }\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-content', isByMeClassName])}\n      onMouseOver={() => setMouseHover(true)}\n      onMouseLeave={() => setMouseHover(false)}\n    >\n      {/* left */}\n      <div className={getClassName(['sendbird-message-content__left', useReactionClassName, isByMeClassName, useReplyingClassName])}>\n        {(!isByMe && !chainBottom) && (\n          /** user profile */\n          <ContextMenu\n            menuTrigger={(toggleDropdown: () => void): ReactElement => (\n              <Avatar\n                className=\"sendbird-message-content__left__avatar\"\n                src={message?.sender?.profileUrl || ''}\n                ref={avatarRef}\n                width=\"28px\"\n                height=\"28px\"\n                onClick={(): void => { if (!disableUserProfile) toggleDropdown() }}\n              />\n            )}\n            menuItems={(closeDropdown: () => void): ReactElement => (\n              <MenuItems\n                /**\n                * parentRef: For catching location(x, y) of MenuItems\n                * parentContainRef: For toggling more options(menus & reactions)\n                */\n                parentRef={avatarRef}\n                parentContainRef={avatarRef}\n                closeDropdown={closeDropdown}\n                style={{ paddingTop: 0, paddingBottom: 0 }}\n              >\n                {renderUserProfile\n                  ? renderUserProfile({ user: message?.sender, close: closeDropdown })\n                  : (<UserProfile user={message.sender} onSuccess={closeDropdown} />)\n                }\n              </MenuItems>\n            )}\n          />\n        )}\n        {(isByMe && !chainBottom) && (\n          <div className={getClassName(['sendbird-message-content__left__created-at', supposedHoverClassName])}>\n            <MessageStatus\n              message={message}\n              channel={channel}\n              status={getOutgoingMessageState(channel, message)}\n            />\n          </div>\n        )}\n        {/* outgoing menu */}\n        {isByMe && (\n          <div className={getClassName(['sendbird-message-content-menu', useReactionClassName, supposedHoverClassName, isByMeClassName])}>\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as UserMessage | FileMessage}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showEdit={showEdit}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n            />\n            {useReaction && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as UserMessage | FileMessage}\n                channel={channel}\n                userId={userId}\n                spaceFromTrigger={{}}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n          </div>\n        )}\n      </div>\n      {/* middle */}\n      <div className=\"sendbird-message-content__middle\">\n        {(!isByMe && !chainTop && !useReplying) && (\n          <Label\n            className=\"sendbird-message-content__middle__sender-name\"\n            type={LabelTypography.CAPTION_2}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {getSenderName(message)}\n          </Label>\n        )}\n        {/* quote message */}\n        {(useReplying) ? (\n          <div className={getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])}>\n            <QuoteMessage\n              message={message}\n              userId={userId}\n              isByMe={isByMe}\n              onClick={() => {\n                if (message?.parentMessage?.createdAt && message?.parentMessageId) {\n                  scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n          </div>\n        ) : null}\n        {/* container: message item body + emoji reactions */}\n        <div className={getClassName(['sendbird-message-content__middle__body-container'])} >\n          {/* message item body components */}\n          {isTextMessage(message as UserMessage) && (\n            <TextMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {(isOGMessage(message as UserMessage)) && (\n            <OGMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {(getUIKitMessageType((message as FileMessage)) === messageTypes.FILE) && (\n            <FileMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {(isThumbnailMessage(message as FileMessage)) && (\n            <ThumbnailMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              showFileViewer={showFileViewer}\n            />\n          )}\n          {(getUIKitMessageType((message as FileMessage)) === messageTypes.UNKNOWN) && (\n            <UnknownMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {/* reactions */}\n          {(useReaction && message?.reactions?.length > 0) && (\n            <div className={getClassName([\n              'sendbird-message-content-reactions',\n              (!isByMe || isThumbnailMessage(message as FileMessage) || isOGMessage(message as UserMessage)) ? '' : 'primary',\n              mouseHover ? 'mouse-hover' : '',\n            ])}>\n              <EmojiReactions\n                userId={userId}\n                message={message}\n                isByMe={isByMe}\n                emojiContainer={emojiContainer}\n                memberNicknamesMap={nicknamesMap}\n                toggleReaction={toggleReaction}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {/* right */}\n      <div className={getClassName(['sendbird-message-content__right', chainTopClassName, useReactionClassName, useReplyingClassName])}>\n        {(!isByMe && !chainBottom) && (\n          <Label\n            className={getClassName(['sendbird-message-content__right__created-at', supposedHoverClassName])}\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {getMessageCreatedAt(message)}\n          </Label>\n        )}\n        {/* incoming menu */}\n        {!isByMe && (\n          <div className={getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])}>\n            {useReaction && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as UserMessage | FileMessage}\n                channel={channel}\n                userId={userId}\n                spaceFromTrigger={{}}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as UserMessage | FileMessage}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showEdit={showEdit}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Modal from '../../../ui/Modal';\nimport { ButtonTypes } from '../../../ui/Button';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nconst RemoveMessage = (props) => {\n  const {\n    onCloseModal,\n    onDeleteMessage,\n    message,\n  } = props;\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <Modal\n      type={ButtonTypes.DANGER}\n      disabled={message?.threadInfo?.replyCount > 0}\n      onCancel={onCloseModal}\n      onSubmit={onDeleteMessage}\n      submitText=\"Delete\"\n      titleText={stringSet.MODAL__DELETE_MESSAGE__TITLE}\n    />\n  );\n};\n\nRemoveMessage.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  onDeleteMessage: PropTypes.func.isRequired,\n  message: PropTypes.shape({\n    threadInfo: PropTypes.shape({\n      replyCount: PropTypes.number,\n    }),\n  }).isRequired,\n};\n\nexport default RemoveMessage;\n","import React, {\n  useState,\n  useRef,\n  useMemo,\n  useLayoutEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport format from 'date-fns/format';\n\nimport MessageContent from '../../../ui/MessageContent';\nimport DateSeparator from '../../../ui/DateSeparator';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport MessageInput from '../../../ui/MessageInput';\nimport FileViewer from '../../../ui/FileViewer';\nimport RemoveMessageModal from './RemoveMessage';\nimport { getClassName } from '../../../utils';\n\nexport default function MessageHoc({\n  message,\n  userId,\n  disabled,\n  editDisabled,\n  hasSeparator,\n  deleteMessage,\n  updateMessage,\n  scrollToMessage,\n  resendMessage,\n  useReaction,\n  replyType,\n  chainTop,\n  chainBottom,\n  membersMap,\n  emojiContainer,\n  animatedMessageId,\n  highLightedMessageId,\n  toggleReaction,\n  quoteMessage,\n  setQuoteMessage,\n  renderCustomMessage,\n  currentGroupChannel,\n}) {\n  const { sender = {} } = message;\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [isHighlighted, setIsHighlighted] = useState(false);\n  const editMessageInputRef = useRef(null);\n  const useMessageScrollRef = useRef(null);\n\n  useLayoutEffect(() => {\n    if (highLightedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center',\n        });\n        setIsAnimated(false);\n        setTimeout(() => {\n          setIsHighlighted(true);\n        }, 500);\n      }\n    } else {\n      setIsHighlighted(false);\n    }\n  }, [highLightedMessageId, useMessageScrollRef.current, message.messageId]);\n  useLayoutEffect(() => {\n    if (animatedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center',\n        });\n        setIsHighlighted(false);\n        setTimeout(() => {\n          setIsAnimated(true);\n        }, 500);\n      }\n    } else {\n      setIsAnimated(false);\n    }\n  }, [animatedMessageId, useMessageScrollRef.current, message.messageId]);\n  const RenderedMessage = useMemo(() => {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, currentGroupChannel, chainTop, chainBottom);\n      // TODO: Let's change this to object type on next major version up\n      // and add params 'hasSeparator' and 'menuDisabled', scrollToMessage\n    }\n    return null;\n  }, [message, message.message, renderCustomMessage]);\n\n  const isByMe = (userId === sender.userId)\n    || (message.requestState === 'pending')\n    || (message.requestState === 'failed');\n\n  if (RenderedMessage) {\n    return (\n      <div\n        ref={useMessageScrollRef}\n        className={getClassName([\n          'sendbird-msg-hoc sendbird-msg--scroll-ref',\n          isAnimated ? 'sendbird-msg-hoc__animated' : '',\n          isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n        ])}\n      >\n        {/* date-separator */}\n        {\n          hasSeparator && (\n            <DateSeparator>\n              <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n                {format(message.createdAt, 'MMMM dd, yyyy')}\n              </Label>\n            </DateSeparator>\n          )\n        }\n        <RenderedMessage message={message} />\n      </div>\n    );\n  }\n\n  if (showEdit) {\n    return (\n      <MessageInput\n        isEdit\n        disabled={editDisabled}\n        ref={editMessageInputRef}\n        name={message.messageId}\n        onSendMessage={updateMessage}\n        onCancelEdit={() => { setShowEdit(false); }}\n        value={message.message}\n      />\n    );\n  }\n\n  return (\n    <div\n      ref={useMessageScrollRef}\n      className={getClassName([\n        'sendbird-msg-hoc sendbird-msg--scroll-ref',\n        isAnimated ? 'sendbird-msg-hoc__animated' : '',\n        isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n      ])}\n      style={{ marginBottom: '2px' }}\n    >\n      {/* date-separator */}\n      {\n        hasSeparator && (\n          <DateSeparator>\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              {format(message.createdAt, 'MMMM dd, yyyy')}\n            </Label>\n          </DateSeparator>\n        )\n      }\n      {/* Message */}\n      <MessageContent\n        className=\"sendbird-message-hoc__message-content\"\n        userId={userId}\n        scrollToMessage={scrollToMessage}\n        channel={currentGroupChannel}\n        message={message}\n        disabled={disabled}\n        chainTop={chainTop}\n        chainBottom={chainBottom}\n        useReaction={useReaction}\n        replyType={replyType}\n        nicknamesMap={membersMap}\n        emojiContainer={emojiContainer}\n        showEdit={setShowEdit}\n        showRemove={setShowRemove}\n        showFileViewer={setShowFileViewer}\n        resendMessage={resendMessage}\n        toggleReaction={toggleReaction}\n        quoteMessage={quoteMessage}\n        setQuoteMessage={setQuoteMessage}\n      />\n      {/* Modal */}\n      {\n        showRemove && (\n          <RemoveMessageModal\n            message={message}\n            onCloseModal={() => setShowRemove(false)}\n            onDeleteMessage={() => {\n              deleteMessage(message);\n              if (message?.messageId === quoteMessage?.messageId) {\n                setQuoteMessage(null);\n              }\n            }}\n          />\n        )\n      }\n      {\n        showFileViewer && (\n          <FileViewer\n            onClose={() => setShowFileViewer(false)}\n            message={message}\n            onDelete={() => {\n              deleteMessage(message, () => {\n                setShowFileViewer(false);\n              });\n            }}\n            isByMe={isByMe}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nMessageHoc.propTypes = {\n  userId: PropTypes.string,\n  message: PropTypes.shape({\n    isFileMessage: PropTypes.func,\n    isAdminMessage: PropTypes.func,\n    isUserMessage: PropTypes.func,\n    isDateseparator: PropTypes.func,\n    // should be a number, but there's a bug in SDK shich returns string\n    messageId: PropTypes.number,\n    type: PropTypes.string,\n    createdAt: PropTypes.number,\n    message: PropTypes.string,\n    requestState: PropTypes.string,\n    messageType: PropTypes.string,\n    sender: PropTypes.shape({ userId: PropTypes.string }),\n    ogMetaData: PropTypes.shape({}),\n    parentMessageId: PropTypes.number,\n  }),\n  animatedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  highLightedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  renderCustomMessage: PropTypes.func,\n  currentGroupChannel: PropTypes.shape({}),\n  hasSeparator: PropTypes.bool,\n  disabled: PropTypes.bool,\n  editDisabled: PropTypes.bool,\n  deleteMessage: PropTypes.func.isRequired,\n  scrollToMessage: PropTypes.func,\n  updateMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  useReaction: PropTypes.bool.isRequired,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']).isRequired,\n  chainTop: PropTypes.bool.isRequired,\n  chainBottom: PropTypes.bool.isRequired,\n  membersMap: PropTypes.instanceOf(Map).isRequired,\n  emojiContainer: PropTypes.shape({\n    emojiCategories: PropTypes.arrayOf(PropTypes.shape({\n      emojis: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        url: PropTypes.string,\n      })),\n    })),\n  }),\n  toggleReaction: PropTypes.func,\n  quoteMessage: PropTypes.shape({\n    messageId: PropTypes.string,\n  }),\n  setQuoteMessage: PropTypes.func.isRequired,\n};\n\nMessageHoc.defaultProps = {\n  userId: '',\n  editDisabled: false,\n  renderCustomMessage: null,\n  currentGroupChannel: {},\n  message: {},\n  hasSeparator: false,\n  disabled: false,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  toggleReaction: () => { },\n  scrollToMessage: () => { },\n  emojiContainer: {},\n  quoteMessage: null,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isSameDay from 'date-fns/isSameDay';\n\nimport './conversation-scroll.scss';\nimport * as messageActionTypes from '../dux/actionTypes';\n\nimport MessageHOC from './MessageHOC';\nimport { compareMessagesForGrouping } from '../utils';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../ui/PlaceHolder';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nexport default class ConversationScroll extends Component {\n  onScroll = (e) => {\n    const {\n      scrollRef,\n      hasMore,\n      messagesDispatcher,\n      onScroll,\n      onScrollDown,\n      currentGroupChannel,\n    } = this.props;\n\n    const element = e.target;\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight,\n    } = element;\n    if (scrollTop === 0) {\n      if (!hasMore) {\n        return;\n      }\n      const nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      const first = nodes && nodes[0];\n      onScroll(([messages]) => {\n        if (messages) {\n          // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n          try {\n            first.scrollIntoView();\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    if (clientHeight + scrollTop === scrollHeight) {\n      const nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      const last = nodes && nodes[nodes.length - 1];\n      onScrollDown(([messages]) => {\n        if (messages) {\n          // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n          try {\n            last.scrollIntoView();\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    // do this later\n    setTimeout(() => {\n      // mark as read if scroll is at end\n      if (clientHeight + scrollTop === scrollHeight) {\n        messagesDispatcher({\n          type: messageActionTypes.MARK_AS_READ,\n        });\n        currentGroupChannel.markAsRead();\n      }\n    }, 500);\n  }\n\n  render() {\n    const {\n      userId,\n      disabled,\n      scrollRef,\n      membersMap,\n      allMessages,\n      scrollToMessage,\n      useReaction,\n      replyType,\n      emojiAllMap,\n      editDisabled,\n      deleteMessage,\n      updateMessage,\n      resendMessage,\n      renderCustomMessage,\n      renderChatItem,\n      animatedMessageId,\n      highLightedMessageId,\n      emojiContainer,\n      toggleReaction,\n      useMessageGrouping,\n      currentGroupChannel,\n      memoizedEmojiListItems,\n      showScrollBot,\n      onClickScrollBot,\n      quoteMessage,\n      setQuoteMessage,\n    } = this.props;\n\n    if (allMessages.length < 1) {\n      return (\n        <PlaceHolder\n          className=\"sendbird-conversation__no-messages\"\n          type={PlaceHolderTypes.NO_MESSAGES}\n        />\n      );\n    }\n\n    return (\n      <div className=\"sendbird-conversation__messages\">\n        <div\n          ref={scrollRef}\n          className=\"sendbird-conversation__scroll-container\"\n          onScroll={this.onScroll}\n        >\n          <div className=\"sendbird-conversation__padding\" />\n          {/*\n            To do: Implement windowing\n            Implement windowing if you are dealing with large number of messages/channels\n            https://github.com/bvaughn/react-window -> recommendation\n            We hesitate to bring one more dependency to our library,\n            we are planning to implement it inside the library\n          */}\n          <div className=\"sendbird-conversation__messages-padding\">\n            {\n              allMessages.map(\n                (m, idx) => {\n                  const previousMessage = allMessages[idx - 1];\n                  const nextMessage = allMessages[idx + 1];\n                  const [chainTop, chainBottom] = useMessageGrouping\n                    ? compareMessagesForGrouping(previousMessage, m, nextMessage)\n                    : [false, false];\n                  const previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n                  const currentCreatedAt = m.createdAt;\n                  // https://stackoverflow.com/a/41855608\n                  const hasSeparator = !(previousMessageCreatedAt && (\n                    isSameDay(currentCreatedAt, previousMessageCreatedAt)\n                  ));\n                  if (renderChatItem) {\n                    return (\n                      <div\n                        key={m.messageId || m.reqId}\n                        className=\"sendbird-msg--scroll-ref\"\n                      >\n                        {\n                          renderChatItem({\n                            message: m,\n                            animatedMessageId,\n                            highLightedMessageId,\n                            channel: currentGroupChannel,\n                            onDeleteMessage: deleteMessage,\n                            onUpdateMessage: updateMessage,\n                            onResendMessage: resendMessage,\n                            onScrollToMessage: scrollToMessage,\n                            onReplyMessage: setQuoteMessage,\n                            emojiContainer,\n                            chainTop,\n                            chainBottom,\n                            hasSeparator,\n                            menuDisabled: disabled,\n                          })\n                        }\n                      </div>\n                    );\n                  }\n\n                  return (\n                    <MessageHOC\n                      animatedMessageId={animatedMessageId}\n                      highLightedMessageId={highLightedMessageId}\n                      renderCustomMessage={renderCustomMessage}\n                      key={m.messageId || m.reqId}\n                      userId={userId}\n                      // show status for pending/failed messages\n                      message={m}\n                      quoteMessage={quoteMessage}\n                      scrollToMessage={scrollToMessage}\n                      currentGroupChannel={currentGroupChannel}\n                      disabled={disabled}\n                      membersMap={membersMap}\n                      chainTop={chainTop}\n                      useReaction={useReaction}\n                      replyType={replyType}\n                      emojiAllMap={emojiAllMap}\n                      emojiContainer={emojiContainer}\n                      editDisabled={editDisabled}\n                      hasSeparator={hasSeparator}\n                      chainBottom={chainBottom}\n                      updateMessage={updateMessage}\n                      deleteMessage={deleteMessage}\n                      resendMessage={resendMessage}\n                      toggleReaction={toggleReaction}\n                      setQuoteMessage={setQuoteMessage}\n                      memoizedEmojiListItems={memoizedEmojiListItems}\n                    />\n                  );\n                },\n              )\n            }\n          </div>\n        </div>\n        {\n          showScrollBot && (\n            <div\n              className=\"sendbird-conversation__scroll-bottom-button\"\n              onClick={onClickScrollBot}\n              onKeyDown={onClickScrollBot}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <Icon\n                width=\"24px\"\n                height=\"24px\"\n                type={IconTypes.CHEVRON_DOWN}\n                fillColor={IconColors.PRIMARY}\n              />\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nConversationScroll.propTypes = {\n  // https://stackoverflow.com/a/52646941\n  scrollRef: PropTypes.shape({\n    current: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.shape({}),\n    ]),\n  }).isRequired,\n  hasMore: PropTypes.bool,\n  messagesDispatcher: PropTypes.func.isRequired,\n  onScroll: PropTypes.func,\n  onScrollDown: PropTypes.func,\n  editDisabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  userId: PropTypes.string,\n  allMessages: PropTypes.arrayOf(PropTypes.shape({\n    createdAt: PropTypes.number,\n  })).isRequired,\n  deleteMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  updateMessage: PropTypes.func.isRequired,\n  currentGroupChannel: PropTypes.shape({\n    markAsRead: PropTypes.func,\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n  animatedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  highLightedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  renderChatItem: PropTypes.element,\n  renderCustomMessage: PropTypes.func,\n  scrollToMessage: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  showScrollBot: PropTypes.bool,\n  onClickScrollBot: PropTypes.func,\n  emojiContainer: PropTypes.shape({}),\n  emojiAllMap: PropTypes.instanceOf(Map),\n  membersMap: PropTypes.instanceOf(Map),\n  useMessageGrouping: PropTypes.bool,\n  toggleReaction: PropTypes.func,\n  memoizedEmojiListItems: PropTypes.func,\n  quoteMessage: PropTypes.shape({}),\n  setQuoteMessage: PropTypes.func.isRequired,\n};\n\nConversationScroll.defaultProps = {\n  hasMore: false,\n  editDisabled: false,\n  disabled: false,\n  userId: '',\n  renderCustomMessage: null,\n  renderChatItem: null,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  onScroll: null,\n  onScrollDown: null,\n  useReaction: true,\n  replyType: 'NONE',\n  emojiContainer: {},\n  showScrollBot: false,\n  onClickScrollBot: () => {},\n  scrollToMessage: () => {},\n  emojiAllMap: new Map(),\n  membersMap: new Map(),\n  useMessageGrouping: true,\n  toggleReaction: () => { },\n  memoizedEmojiListItems: () => '',\n  quoteMessage: null,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './notification.scss';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nexport default function Notification({\n  count,\n  time,\n  onClick,\n}) {\n  const { stringSet } = useContext(LocalizationContext);\n  const timeArray = time.split(' ');\n  timeArray.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);\n  return (\n    // eslint-disable-next-line\n    <div className=\"sendbird-notification\" onClick={onClick}>\n      <Label className=\"sendbird-notification__text\" color={LabelColors.ONCONTENT_1} type={LabelTypography.CAPTION_2}>\n        {`${count} `}\n        {stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE}\n        {` ${timeArray.join(' ')}`}\n      </Label>\n      <Icon\n        width=\"24px\"\n        height=\"24px\"\n        type={IconTypes.CHEVRON_DOWN}\n        fillColor={IconColors.CONTENT}\n      />\n    </div>\n  );\n}\n\nNotification.propTypes = {\n  count: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  time: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nNotification.defaultProps = {\n  count: 0,\n  time: '',\n};\n","import React, { useContext } from 'react';\n\nimport './notification.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelTypography } from '../../../ui/Label';\n\nconst FrozenNotification = (): JSX.Element => {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-notification sendbird-notification--frozen\">\n      <Label\n        className=\"sendbird-notification__text\"\n        type={LabelTypography.CAPTION_2}\n      >\n        {stringSet.CHANNEL_FROZEN}\n      </Label>\n    </div>\n  );\n}\n\nexport default FrozenNotification;\n","import React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport { uuidv4 } from '../../../utils/uuid';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\n\nconst TypingIndicatorText = ({ members }) => {\n  const { stringSet } = useContext(LocalizationContext);\n  if (!members || members.length === 0) {\n    return '';\n  }\n\n  if (members && members.length === 1) {\n    return `${members[0].nickname} ${stringSet.TYPING_INDICATOR__IS_TYPING}`;\n  }\n\n  if (members && members.length === 2) {\n    return `${members[0].nickname} ${stringSet.TYPING_INDICATOR__AND} ${members[1].nickname} ${stringSet.TYPING_INDICATOR__ARE_TYPING}`;\n  }\n\n  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;\n};\n\nfunction TypingIndicator(props) {\n  const {\n    className,\n    channelUrl,\n    sb,\n    logger,\n  } = props;\n  const [handlerId, setHandlerId] = useState(uuidv4());\n  const [typingMembers, setTypingMembers] = useState([]);\n\n  useEffect(() => {\n    if (sb && sb.ChannelHandler) {\n      sb.removeChannelHandler(handlerId);\n      const newHandlerId = uuidv4();\n      const handler = new sb.ChannelHandler();\n      // there is a possible warning in here - setState called after unmount\n      handler.onTypingStatusUpdated = (groupChannel) => {\n        logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);\n        const members = groupChannel.getTypingMembers();\n        if (groupChannel.url === channelUrl) {\n          setTypingMembers(members);\n        }\n      };\n      sb.addChannelHandler(newHandlerId, handler);\n      setHandlerId(newHandlerId);\n    }\n\n    return () => {\n      setTypingMembers([]);\n      if (sb && sb.removeChannelHandler) {\n        sb.removeChannelHandler(handlerId);\n      }\n    };\n  }, [channelUrl]);\n\n  return (\n    <Label\n      className={className}\n      type={LabelTypography.CAPTION_2}\n      color={LabelColors.ONBACKGROUND_2}\n    >\n      <TypingIndicatorText members={typingMembers} />\n    </Label>\n  );\n}\n\nTypingIndicator.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  channelUrl: PropTypes.string.isRequired,\n  sb: PropTypes.shape({\n    ChannelHandler: PropTypes.func,\n    removeChannelHandler: PropTypes.func,\n    addChannelHandler: PropTypes.func,\n  }).isRequired,\n  logger: PropTypes.shape({\n    info: PropTypes.func,\n  }).isRequired,\n};\nTypingIndicator.defaultProps = {\n  className: '',\n};\n\nexport default TypingIndicator;\n","import React, { ReactElement } from 'react';\nimport { FileMessage } from 'sendbird';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport { isAudioMessage, isFileMessage, isImageMessage, isThumbnailMessage } from '../../utils';\n\ninterface Props {\n  message: FileMessage;\n}\n\nconst componentClassname = 'sendbird-quote_message_input__avatar';\n\nexport default function QuoteMessageThumbnail({ message }: Props): ReactElement {\n  if (!isFileMessage(message)) {\n    return null;\n  }\n\n  const thumbnailUrl: string = (message.thumbnails && message.thumbnails.length > 0 && message.thumbnails[0].url)\n    || (isImageMessage(message) && message.url);\n  if (isThumbnailMessage(message) && thumbnailUrl) {\n    return (\n      <ImageRenderer\n        className={componentClassname}\n        url={thumbnailUrl}\n        alt={message.type}\n        width=\"44px\"\n        height=\"44px\"\n        fixedSize\n      />\n    );\n  } else if (isAudioMessage(message)) {\n    return (\n      <div className={componentClassname}>\n        <Icon\n          type={IconTypes.FILE_AUDIO}\n          fillColor={IconColors.ON_BACKGROUND_2}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div className={componentClassname}>\n        <Icon\n          type={IconTypes.FILE_DOCUMENT}\n          fillColor={IconColors.ON_BACKGROUND_2}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n    );\n  }\n}\n","import React, { ReactElement, useContext } from 'react';\nimport { FileMessage, UserMessage } from 'sendbird';\nimport {\n  CoreMessageType,\n  getClassName,\n  isFileMessage,\n  isGifMessage,\n  isImageMessage,\n  isThumbnailMessage,\n  isUserMessage,\n  isVideoMessage,\n} from '../../utils';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport QuoteMessageThumbnail from './QuoteMessageThumbnail';\nimport './index.scss';\n\ninterface Props {\n  className?: string | Array<string>;\n  replyingMessage: CoreMessageType;\n  onClose?: (message: CoreMessageType) => void;\n}\n\nexport default function QuoteMessageInput({\n  className,\n  replyingMessage,\n  onClose,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const fileMessage = replyingMessage as FileMessage;\n  const sender = (replyingMessage as UserMessage | FileMessage)?.sender;\n\n  return (\n    <div className={getClassName(['sendbird-quote_message_input', className])}>\n      <QuoteMessageThumbnail message={fileMessage} />\n      <div\n        className=\"sendbird-quote_message_input__body\"\n        style={{\n          width: `calc(100% - ${fileMessage.isFileMessage() ? '164px' : '120px'})`,\n          left: fileMessage.isFileMessage() ? '92px' : '40px',\n        }}\n      >\n        <Label\n          className=\"sendbird-quote_message_input__body__sender-name\"\n          type={LabelTypography.CAPTION_1}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {`${stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO} ${(sender && sender.nickname) ? sender.nickname : stringSet.NO_NAME}`}\n        </Label>\n        <Label\n          className=\"sendbird-quote_message_input__body__message-content\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE}\n          {isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO}\n          {isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF}\n          {isUserMessage(replyingMessage as UserMessage) && (replyingMessage as UserMessage).message}\n          {(isFileMessage(fileMessage) && !isThumbnailMessage(fileMessage)) && fileMessage.name}\n        </Label>\n      </div>\n      <Icon\n        className=\"sendbird-quote_message_input__close-button\"\n        type={IconTypes.CLOSE}\n        fillColor={IconColors.ON_BACKGROUND_2}\n        width=\"24px\"\n        height=\"24px\"\n        onClick={() => onClose(replyingMessage)}\n      />\n    </div>\n  );\n}\n","// Logic required to handle message input rendering\n\nimport React, { useContext } from 'react';\nimport Sendbird, { FileMessage, UserMessage } from 'sendbird';\n\nimport './message-input-wrapper.scss';\nimport { RenderGroupChannelMessageInputProps } from '../../../index';\nimport * as utils from '../utils.js';\n\nimport MessageInput from '../../../ui/MessageInput';\nimport QuoteMessageInput from '../../../ui/QuoteMessageInput';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  channel: Sendbird.GroupChannel;\n  user: Sendbird.User;\n  isOnline: boolean;\n  initialized: boolean;\n  quoteMessage?: UserMessage | FileMessage;\n  onSendMessage: (quoteMessage?: UserMessage | FileMessage) => void;\n  onFileUpload: (file: File, quoteMessage?: UserMessage | FileMessage) => void;\n  setQuoteMessage: (message: UserMessage | FileMessage) => void;\n  renderMessageInput: (renderProps: RenderGroupChannelMessageInputProps) => JSX.Element;\n}\n\nconst MessageInputWrapper = ({\n  channel,\n  user,\n  isOnline,\n  initialized,\n  quoteMessage,\n  onSendMessage,\n  onFileUpload,\n  setQuoteMessage,\n  renderMessageInput,\n}: Props, ref: React.RefObject<HTMLInputElement>): JSX.Element => {\n  const { stringSet } = useContext(LocalizationContext);\n  const disabled = !initialized\n    || utils.isDisabledBecauseFrozen(channel)\n    || utils.isDisabledBecauseMuted(channel)\n    || !isOnline;\n\n  const isOperator = utils.isOperator(channel);\n  const { isBroadcast } = channel;\n\n  // custom message\n  if (renderMessageInput) {\n    return renderMessageInput({ channel, user, disabled, quoteMessage });\n  }\n\n  // broadcast channel + not operator\n  if (isBroadcast && !isOperator) {\n    return null;\n  }\n\n  // other conditions\n  return (\n    <div className=\"sendbird-message-input-wrapper\">\n      {quoteMessage && (\n        <div className=\"sendbird-message-input-wrapper__quote-message-input\">\n          <QuoteMessageInput\n            replyingMessage={quoteMessage}\n            onClose={() => setQuoteMessage(null)}\n          />\n        </div>\n      )}\n      <MessageInput\n        className=\"sendbird-message-input-wrapper__message-input\"\n        channelUrl={channel?.url}\n        placeholder={\n          (quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER)\n          || (utils.isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED)\n          || (utils.isDisabledBecauseMuted(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED)\n        }\n        ref={ref}\n        disabled={disabled}\n        onStartTyping={() => {\n          channel.startTyping();\n        }}\n        onSendMessage={() => {\n          onSendMessage(quoteMessage);\n          setQuoteMessage(null);\n        }}\n        onFileUpload={(file) => {\n          onFileUpload(file, quoteMessage);\n          setQuoteMessage(null);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default React.forwardRef(MessageInputWrapper);\n","import React, { useContext } from 'react';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport './index.scss';\n\nfunction ConnectionStatus() {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-connection-status\">\n      <Label\n        type={LabelTypography.BODY_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {stringSet.TRYING_TO_CONNECT}\n      </Label>\n      <Icon\n        type={IconTypes.DISCONNECTED}\n        fillColor={IconColors.SENT}\n        width=\"14px\"\n        height=\"14px\"\n      />\n    </div>\n  );\n}\n\nexport default ConnectionStatus;\n","import formatDistanceToNowStrict from 'date-fns/formatDistanceToNowStrict';\nimport { LabelStringSet } from '../Label';\n\nexport const prettyDate = (date) => formatDistanceToNowStrict(date, { addSuffix: true });\n\nexport const getChannelTitle = (channel = {}, currentUserId, stringSet = LabelStringSet) => {\n  if (!channel || (!channel.name && !channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || stringSet.NO_NAME))\n    .join(', ');\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport * as utils from './utils';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ChannelAvatar from '../ChannelAvatar/index';\n\nconst noop = () => { };\nexport default function ChatHeader(props) {\n  const {\n    currentGroupChannel,\n    currentUser,\n    title,\n    subTitle,\n    isMuted,\n    theme,\n    showSearchIcon,\n    onSearchClick,\n    onActionClick,\n  } = props;\n  const { userId } = currentUser;\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-chat-header\">\n      <div className=\"sendbird-chat-header__left\">\n        <ChannelAvatar\n          theme={theme}\n          channel={currentGroupChannel}\n          userId={userId}\n          height={32}\n          width={32}\n        />\n        <Label\n          className=\"sendbird-chat-header__left__title\"\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {title || utils.getChannelTitle(currentGroupChannel, userId, stringSet)}\n        </Label>\n        <Label\n          className=\"sendbird-chat-header__left__subtitle\"\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {subTitle}\n        </Label>\n      </div>\n      <div className=\"sendbird-chat-header__right\">\n        {\n          ((typeof isMuted === 'string' && isMuted === 'true') || (typeof isMuted === 'boolean' && isMuted))\n            && (\n              <Icon\n                className=\"sendbird-chat-header__right__mute\"\n                type={IconTypes.NOTIFICATIONS_OFF_FILLED}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            )\n        }\n        {\n          showSearchIcon && (\n            <IconButton\n              className=\"sendbird-chat-header__right__search\"\n              width=\"32px\"\n              height=\"32px\"\n              onClick={onSearchClick}\n            >\n              <Icon\n                type={IconTypes.SEARCH}\n                fillColor={IconColors.PRIMARY}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </IconButton>\n          )\n        }\n        <IconButton\n          className=\"sendbird-chat-header__right__info\"\n          width=\"32px\"\n          height=\"32px\"\n          onClick={onActionClick}\n        >\n          <Icon\n            type={IconTypes.INFO}\n            fillColor={IconColors.PRIMARY}\n            width=\"24px\"\n            height=\"24px\"\n          />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nChatHeader.propTypes = {\n  currentGroupChannel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string,\n  }),\n  title: PropTypes.string,\n  subTitle: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string,\n  ]),\n  isMuted: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]),\n  theme: PropTypes.string,\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onActionClick: PropTypes.func,\n};\n\nChatHeader.defaultProps = {\n  currentGroupChannel: {},\n  currentUser: {},\n  title: '',\n  subTitle: '',\n  isMuted: false,\n  theme: 'light',\n  showSearchIcon: false,\n  onSearchClick: noop,\n  onActionClick: noop,\n};\n","import React, {\n  useEffect,\n  useRef,\n  useReducer,\n  useMemo,\n  useState,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport * as utils from './utils';\n\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport * as messageActionTypes from './dux/actionTypes';\nimport messagesInitialState from './dux/initialState';\nimport messagesReducer from './dux/reducers';\n\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useGetChannel from './hooks/useGetChannel';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useHandleReconnect from './hooks/useHandleReconnect';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useScrollDownCallback from './hooks/useScrollDownCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useSendFileMessageCallback from './hooks/useSendFileMessageCallback';\nimport useMemoizedEmojiListItems from './hooks/useMemoizedEmojiListItems';\nimport useToggleReactionCallback from './hooks/useToggleReactionCallback';\nimport useScrollToMessage from './hooks/useScrollToMessage';\n\nimport ConversationScroll from './components/ConversationScroll';\nimport Notification from './components/Notification';\nimport FrozenNotification from './components/FrozenNotification';\nimport TypingIndicator from './components/TypingIndicator';\nimport MessageInputWrapper from './components/MessageInputWrapper';\nimport ConnectionStatus from '../../ui/ConnectionStatus';\nimport ChatHeader from '../../ui/ChatHeader';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\n\nconst noop = () => { };\n\nexport const ConversationPanel = (props) => {\n  const {\n    channelUrl,\n    stores: { sdkStore, userStore },\n    config: {\n      userId,\n      logger,\n      pubSub,\n      isOnline,\n      theme,\n      imageCompression,\n    },\n    dispatchers: {\n      reconnect,\n    },\n    queries = {},\n    startingPoint,\n    highlightedMessage,\n    useReaction,\n    replyType,\n    showSearchIcon,\n    onSearchClick,\n    renderChatItem,\n    renderChatHeader,\n    renderCustomMessage,\n    renderUserProfile,\n    disableUserProfile,\n    renderMessageInput,\n    useMessageGrouping,\n    onChatHeaderActionClick,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage,\n  } = props;\n  const { sdk } = sdkStore;\n  const { config } = props;\n  const sdkError = sdkStore.error;\n  const sdkInit = sdkStore.initialized;\n  const { user } = userStore;\n  if (queries.messageListQuery) {\n    // eslint-disable-next-line no-console\n    console.warn('messageListQuery has been deprecated, please use messageListParams instead');\n  }\n\n  useEffect(() => {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n\n  const [intialTimeStamp, setIntialTimeStamp] = useState(startingPoint);\n  useEffect(() => {\n    setIntialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  const [animatedMessageId, setAnimatedMessageId] = useState('');\n  const [highLightedMessageId, setHighLightedMessageId] = useState(highlightedMessage);\n  useEffect(() => {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  const userFilledMessageListQuery = queries.messageListParams;\n  const [quoteMessage, setQuoteMessage] = useState(null);\n\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const scrollRef = useRef(null);\n\n  const {\n    allMessages,\n    loading,\n    initialized,\n    unreadCount,\n    unreadSince,\n    isInvalid,\n    currentGroupChannel = {},\n    hasMore,\n    lastMessageTimeStamp,\n    hasMoreToBottom,\n    latestFetchedMessageTimeStamp,\n    emojiContainer,\n    readStatus,\n  } = messagesStore;\n  const { isFrozen, isBroadcast, isSuper } = currentGroupChannel;\n  const { appInfo = {} } = sdk;\n  const usingReaction = (\n    appInfo.isUsingReaction && !isBroadcast && !isSuper && useReaction\n    // TODO: Make useReaction independent from appInfo.isUsingReaction\n  );\n\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  const showScrollBot = hasMoreToBottom;\n\n  // TODO: emojiAllMap, emoijAllList, nicknamesMap => should be moved to messagesStore\n  const emojiAllMap = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisMapFromEmojiContainer(emojiContainer)\n      : new Map()\n  ), [emojiContainer]);\n  const emojiAllList = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisFromEmojiContainer(emojiContainer)\n      : []\n  ), [emojiContainer]);\n  const nicknamesMap = useMemo(() => (\n    usingReaction\n      ? utils.getNicknamesMapFromMembers(currentGroupChannel.members)\n      : new Map()\n  ), [currentGroupChannel.members]);\n\n  // Scrollup is default scroll for channel\n  const onScrollCallback = useScrollCallback({\n    currentGroupChannel, lastMessageTimeStamp, userFilledMessageListQuery, replyType,\n  }, {\n    hasMore,\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const scrollToMessage = useScrollToMessage({\n    setIntialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  }, { logger });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n  const onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel,\n    latestFetchedMessageTimeStamp,\n    userFilledMessageListQuery,\n    hasMoreToBottom,\n    replyType,\n  }, {\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const toggleReaction = useToggleReactionCallback({ currentGroupChannel }, { logger });\n\n  const memoizedEmojiListItems = useMemoizedEmojiListItems({\n    emojiContainer, toggleReaction,\n  }, {\n    useReaction: usingReaction,\n    logger,\n    userId,\n    emojiAllList,\n  });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useGetChannel(\n    { channelUrl, sdkInit },\n    { messagesDispatcher, sdk, logger },\n  );\n\n  useEffect(() => {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents(\n    { currentGroupChannel, sdkInit, hasMoreToBottom },\n    {\n      messagesDispatcher,\n      sdk,\n      logger,\n      scrollRef,\n      setQuoteMessage,\n    },\n  );\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on intialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel,\n    userFilledMessageListQuery,\n    intialTimeStamp,\n    replyType,\n  }, {\n    sdk,\n    logger,\n    messagesDispatcher,\n  });\n\n  // handles API calls from withSendbird\n  useEffect(() => {\n    const subScriber = utils.pubSubHandler(channelUrl, pubSub, messagesDispatcher);\n    return () => {\n      utils.pubSubHandleRemover(subScriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({ isOnline, replyType }, {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  });\n\n  // callbacks for Message CURD actions\n  const deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher },\n    { logger });\n  const updateMessage = useUpdateMessageCallback(\n    { currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage },\n    { logger, sdk, pubSub },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentGroupChannel, messagesDispatcher },\n    { logger },\n  );\n  const [messageInputRef, onSendMessage] = useSendMessageCallback(\n    { currentGroupChannel, onBeforeSendUserMessage },\n    {\n      sdk,\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n  const [onSendFileMessage] = useSendFileMessageCallback(\n    { currentGroupChannel, onBeforeSendFileMessage, imageCompression },\n    {\n      sdk,\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n\n  if (!channelUrl) {\n    return (<div className=\"sendbird-conversation\"><PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} /></div>);\n  }\n  if (isInvalid) {\n    return (<div className=\"sendbird-conversation\"><PlaceHolder type={PlaceHolderTypes.WRONG} /></div>);\n  }\n  if (sdkError) {\n    return (\n      <div className=\"sendbird-conversation\">\n        <PlaceHolder\n          type={PlaceHolderTypes.WRONG}\n          retryToConnect={() => {\n            logger.info('Channel: reconnecting');\n            reconnect();\n          }}\n        />\n      </div>\n    );\n  }\n  return (\n    <UserProfileProvider\n      className=\"sendbird-conversation\"\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      {\n        renderChatHeader\n          ? renderChatHeader({ channel: currentGroupChannel, user })\n          : (\n            <ChatHeader\n              theme={theme}\n              currentGroupChannel={currentGroupChannel}\n              currentUser={user}\n              showSearchIcon={showSearchIcon}\n              onSearchClick={onSearchClick}\n              onActionClick={onChatHeaderActionClick}\n              subTitle={currentGroupChannel.members && currentGroupChannel.members.length !== 2}\n              isMuted={false}\n            />\n          )\n      }\n      {\n        isFrozen && (\n          <FrozenNotification />\n        )\n      }\n      {\n        unreadCount > 0 && (\n          <Notification\n            count={unreadCount}\n            onClick={() => {\n              if (intialTimeStamp) {\n                setIntialTimeStamp(null);\n                setAnimatedMessageId(null);\n                setHighLightedMessageId(null);\n              } else {\n                utils.scrollIntoLast();\n                // there is no scroll\n                if (scrollRef.current.scrollTop === 0) {\n                  currentGroupChannel.markAsRead();\n                  messagesDispatcher({\n                    type: messageActionTypes.MARK_AS_READ,\n                  });\n                }\n              }\n            }}\n            time={unreadSince}\n          />\n        )\n      }\n      {\n        loading\n          ? (\n            <div className=\"sendbird-conversation\">\n              <PlaceHolder type={PlaceHolderTypes.LOADING} />\n            </div>\n          ) : (\n            <ConversationScroll\n              swapParams={\n                sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback()\n              }\n              animatedMessageId={animatedMessageId}\n              highLightedMessageId={highLightedMessageId}\n              userId={userId}\n              hasMore={hasMore}\n              disabled={!isOnline}\n              onScroll={onScrollCallback}\n              onScrollDown={onScrollDownCallback}\n              scrollRef={scrollRef}\n              readStatus={readStatus}\n              useReaction={usingReaction}\n              replyType={replyType}\n              allMessages={allMessages}\n              scrollToMessage={scrollToMessage}\n              emojiAllMap={emojiAllMap}\n              membersMap={nicknamesMap}\n              editDisabled={utils.isDisabledBecauseFrozen(currentGroupChannel)}\n              deleteMessage={deleteMessage}\n              updateMessage={updateMessage}\n              resendMessage={resendMessage}\n              toggleReaction={toggleReaction}\n              emojiContainer={emojiContainer}\n              renderChatItem={renderChatItem}\n              quoteMessage={quoteMessage}\n              setQuoteMessage={setQuoteMessage}\n              showScrollBot={showScrollBot}\n              onClickScrollBot={() => {\n                setIntialTimeStamp(null);\n                setAnimatedMessageId(null);\n                setHighLightedMessageId(null);\n              }}\n              renderCustomMessage={renderCustomMessage}\n              useMessageGrouping={useMessageGrouping}\n              messagesDispatcher={messagesDispatcher}\n              currentGroupChannel={currentGroupChannel}\n              memoizedEmojiListItems={memoizedEmojiListItems}\n            />\n          )\n      }\n      <div className=\"sendbird-conversation__footer\">\n        <MessageInputWrapper\n          channel={currentGroupChannel}\n          user={user}\n          ref={messageInputRef}\n          isOnline={isOnline}\n          initialized={initialized}\n          onSendMessage={onSendMessage}\n          onFileUpload={onSendFileMessage}\n          quoteMessage={quoteMessage}\n          setQuoteMessage={setQuoteMessage}\n          renderMessageInput={renderMessageInput}\n        />\n        <div className=\"sendbird-conversation__footer__typing-indicator\">\n          <TypingIndicator className=\"sendbird-conversation__footer__typing-indicator__text\" channelUrl={channelUrl} sb={sdk} logger={logger} />\n          {\n            !isOnline && (\n              <ConnectionStatus sdkInit={sdkInit} sb={sdk} logger={logger} />\n            )\n          }\n        </div>\n      </div>\n    </UserProfileProvider>\n  );\n};\n\nConversationPanel.propTypes = {\n  channelUrl: PropTypes.string,\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n      sdk: PropTypes.shape({\n        getErrorFirstCallback: PropTypes.func,\n        removeChannelHandler: PropTypes.func,\n        GroupChannel: PropTypes.any,\n        ChannelHandler: PropTypes.any,\n        addChannelHandler: PropTypes.func,\n        UserMessageParams: PropTypes.any,\n        FileMessageParams: PropTypes.any,\n        getAllEmoji: PropTypes.func,\n        appInfo: PropTypes.shape({}),\n      }),\n      error: PropTypes.bool,\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({}),\n    }),\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    reconnect: PropTypes.func,\n  }).isRequired,\n  config: PropTypes.shape({\n    disableUserProfile: PropTypes.bool,\n    renderUserProfile: PropTypes.func,\n    userId: PropTypes.string.isRequired,\n    isOnline: PropTypes.bool.isRequired,\n    theme: PropTypes.string,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func,\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func,\n    }),\n    imageCompression: PropTypes.shape({\n      compressionRate: PropTypes.number,\n      resizingWidth: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n      ]),\n      resizingHeight: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n      ]),\n    }),\n  }).isRequired,\n  queries: PropTypes.shape({\n    messageListParams: PropTypes.shape({\n      includeMetaArray: PropTypes.bool,\n      includeParentMessageText: PropTypes.bool,\n      includeReaction: PropTypes.bool,\n      includeReplies: PropTypes.bool,\n      includeThreadInfo: PropTypes.bool,\n      limit: PropTypes.number,\n      reverse: PropTypes.bool,\n      senderUserIdsFilter: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  startingPoint: PropTypes.number,\n  highlightedMessage: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  onBeforeSendUserMessage: PropTypes.func, // onBeforeSendUserMessage(text)\n  onBeforeSendFileMessage: PropTypes.func, // onBeforeSendFileMessage(File)\n  onBeforeUpdateUserMessage: PropTypes.func,\n  renderChatItem: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  renderCustomMessage: PropTypes.func,\n  renderMessageInput: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  renderChatHeader: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onChatHeaderActionClick: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  useMessageGrouping: PropTypes.bool,\n};\n\nConversationPanel.defaultProps = {\n  channelUrl: null,\n  queries: {},\n  onBeforeSendUserMessage: null,\n  onBeforeSendFileMessage: null,\n  onBeforeUpdateUserMessage: null,\n  startingPoint: null,\n  highlightedMessage: null,\n  renderChatItem: null,\n  renderCustomMessage: null,\n  renderMessageInput: null,\n  renderChatHeader: null,\n  useReaction: true,\n  replyType: 'NONE',\n  showSearchIcon: false,\n  onSearchClick: noop,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  useMessageGrouping: true,\n  onChatHeaderActionClick: noop,\n};\n\nexport const {\n  getEmojiCategoriesFromEmojiContainer,\n  getAllEmojisFromEmojiContainer,\n  getEmojisFromEmojiContainer,\n} = utils;\n\nexport default withSendbirdContext(ConversationPanel);\n"]},"metadata":{},"sourceType":"module"}