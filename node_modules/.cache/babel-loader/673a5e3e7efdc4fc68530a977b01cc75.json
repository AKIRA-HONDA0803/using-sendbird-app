{"ast":null,"code":"import { c as LocalizationContext, e as _toConsumableArray, b as _slicedToArray, a as _objectSpread2, f as _defineProperty } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { L as Label, a as LabelTypography, b as LabelColors } from './index-fe1a6d27.js';\nimport { M as Modal, T as Type } from './index-cb0d7936.js';\nimport { U as UserListItem } from './index-1fe82074.js';\n\nfunction Badge(_ref) {\n  var count = _ref.count,\n      maxLevel = _ref.maxLevel,\n      className = _ref.className;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var maximumNumber = parseInt('9'.repeat(maxLevel > 6 ? 6 : maxLevel), 10);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-badge']).join(' ')\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-badge__text\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONCONTENT_1\n  }, count > maximumNumber ? \"\".concat(maximumNumber).concat(stringSet.BADGE__OVER) : count)));\n}\n\nBadge.propTypes = {\n  count: PropTypes.number.isRequired,\n  maxLevel: PropTypes.number,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n};\nBadge.defaultProps = {\n  maxLevel: 2,\n  className: []\n};\n\nvar filterUser = function filterUser(idsToFilter) {\n  return function (currentId) {\n    return idsToFilter.includes(currentId);\n  };\n};\n\nvar InviteMembers = function InviteMembers(props) {\n  var userQueryCreator = props.userQueryCreator,\n      closeModal = props.closeModal,\n      _onSubmit = props.onSubmit,\n      submitText = props.submitText,\n      titleText = props.titleText,\n      idsToFilter = props.idsToFilter,\n      swapParams = props.swapParams;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedUsers = _useState4[0],\n      setSelectedUsers = _useState4[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      usersDataSource = _useState6[0],\n      setUsersDataSource = _useState6[1];\n\n  var selectedCount = Object.keys(selectedUsers).length;\n  useEffect(function () {\n    var applicationUserListQuery = userQueryCreator();\n    setUsersDataSource(applicationUserListQuery);\n    applicationUserListQuery.next(function (res, err) {\n      // eslint-disable-next-line no-underscore-dangle\n      var users_ = res;\n      var error = err;\n\n      if (swapParams) {\n        users_ = err;\n        error = users_;\n      }\n\n      if (error) {\n        return;\n      }\n\n      setUsers(users_);\n    });\n  }, []);\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: titleText,\n    submitText: submitText,\n    type: Type.PRIMARY,\n    onCancel: closeModal,\n    onSubmit: function onSubmit() {\n      var selectedUserList = Object.keys(selectedUsers);\n\n      if (selectedUserList.length > 0) {\n        _onSubmit(selectedUserList);\n\n        closeModal();\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Label, {\n    color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3,\n    type: LabelTypography.CAPTION_1\n  }, \"\".concat(selectedCount, \" \").concat(stringSet.MODAL__INVITE_MEMBER__SELECTEC)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-create-channel--scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = usersDataSource.hasNext;\n      var fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        usersDataSource.next(function (usersBatch, error) {\n          if (error) {\n            return;\n          }\n\n          setUsers([].concat(_toConsumableArray(users), _toConsumableArray(usersBatch)));\n        });\n      }\n    }\n  }, users.map(function (user) {\n    return !filterUser(idsToFilter)(user.userId) && /*#__PURE__*/React__default.createElement(UserListItem, {\n      key: user.userId,\n      user: user,\n      checkBox: true,\n      checked: selectedUsers[user.userId],\n      onChange: function onChange(event) {\n        var modifiedSelectedUsers = _objectSpread2(_objectSpread2({}, selectedUsers), {}, _defineProperty({}, event.target.id, event.target.checked));\n\n        if (!event.target.checked) {\n          delete modifiedSelectedUsers[event.target.id];\n        }\n\n        setSelectedUsers(modifiedSelectedUsers);\n      }\n    });\n  }))));\n};\n\nInviteMembers.propTypes = {\n  idsToFilter: PropTypes.arrayOf(PropTypes.string),\n  swapParams: PropTypes.bool,\n  userQueryCreator: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  submitText: PropTypes.string,\n  titleText: PropTypes.string\n};\nInviteMembers.defaultProps = {\n  swapParams: false,\n  submitText: 'create',\n  titleText: 'Create new channel',\n  idsToFilter: []\n};\n\nvar createDefaultUserListQuery = function createDefaultUserListQuery(_ref) {\n  var sdk = _ref.sdk,\n      _ref$userFilledApplic = _ref.userFilledApplicationUserListQuery,\n      userFilledApplicationUserListQuery = _ref$userFilledApplic === void 0 ? {} : _ref$userFilledApplic;\n  var params = sdk.createApplicationUserListQuery();\n\n  if (userFilledApplicationUserListQuery) {\n    Object.keys(userFilledApplicationUserListQuery).forEach(function (key) {\n      params[key] = userFilledApplicationUserListQuery[key];\n    });\n  }\n\n  return params;\n};\n\nvar getApplicationAttributes = function getApplicationAttributes() {\n  var sdk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _sdk$appInfo = sdk.appInfo,\n      appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n  var _appInfo$applicationA = appInfo.applicationAttributes,\n      applicationAttributes = _appInfo$applicationA === void 0 ? [] : _appInfo$applicationA;\n  return applicationAttributes;\n};\n\nvar isBroadcastChannelEnabled = function isBroadcastChannelEnabled() {\n  var sdk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ALLOW_BROADCAST_CHANNEL = 'allow_broadcast_channel';\n  var applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_BROADCAST_CHANNEL);\n  }\n\n  return false;\n};\n\nvar isSuperGroupChannelEnabled = function isSuperGroupChannelEnabled() {\n  var sdk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ALLOW_SUPER_GROUP_CHANNEL = 'allow_super_group_channel';\n  var applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_SUPER_GROUP_CHANNEL);\n  }\n\n  return false;\n};\n\nvar setChannelType = function setChannelType(params, type) {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n\n  return params;\n};\n\nvar createChannel = function createChannel(sdk, selectedUsers, onBeforeCreateChannel, userId) {\n  var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'group';\n  return new Promise(function (resolve, reject) {\n    // have custom params\n    if (onBeforeCreateChannel) {\n      var _params = onBeforeCreateChannel(selectedUsers);\n\n      setChannelType(_params, type);\n      sdk.GroupChannel.createChannel(_params, function (response, error) {\n        var swapParams = sdk.getErrorFirstCallback();\n        var groupChannel = response;\n        var err = error;\n\n        if (swapParams) {\n          groupChannel = error;\n          err = response;\n        }\n\n        if (err) {\n          reject(err);\n        }\n\n        resolve(groupChannel);\n      });\n      return;\n    }\n\n    var params = new sdk.GroupChannelParams();\n    params.addUserIds(selectedUsers);\n    params.isDistinct = false;\n\n    if (userId) {\n      params.operatorUserIds = [userId];\n    }\n\n    setChannelType(params, type); // do not have custom params\n\n    sdk.GroupChannel.createChannel(params, function (response, error) {\n      var swapParams = sdk.getErrorFirstCallback();\n      var groupChannel = response;\n      var err = error;\n\n      if (swapParams) {\n        groupChannel = error;\n        err = response;\n      }\n\n      if (err) {\n        reject(err);\n      }\n\n      resolve(groupChannel);\n    });\n  });\n};\n\nvar LeaveChannel = function LeaveChannel(props) {\n  var onCloseModal = props.onCloseModal,\n      onLeaveChannel = props.onLeaveChannel;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: onCloseModal,\n    onSubmit: onLeaveChannel,\n    submitText: \"Leave\",\n    titleText: \"Leave this channel?\"\n  });\n};\n\nLeaveChannel.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  onLeaveChannel: PropTypes.func.isRequired\n};\nexport { Badge as B, InviteMembers as I, LeaveChannel as L, isSuperGroupChannelEnabled as a, createChannel as b, createDefaultUserListQuery as c, isBroadcastChannelEnabled as i };","map":null,"metadata":{},"sourceType":"module"}