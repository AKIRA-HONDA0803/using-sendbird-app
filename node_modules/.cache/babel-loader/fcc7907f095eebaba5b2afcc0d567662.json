{"ast":null,"code":"import { c as LocalizationContext, b as _slicedToArray } from './LocalizationContext-dfe8b78b.js';\nimport React__default, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Sendbird from './SendbirdProvider.js';\nimport ChannelList from './ChannelList.js';\nimport Conversation from './Channel.js';\nimport ChannelSettings from './ChannelSettings.js';\nimport MessageSearch from './MessageSearch.js';\nimport { L as Label, a as LabelTypography, b as LabelColors, I as Icon, c as IconTypes, d as IconColors, e as Loader } from './index-fe1a6d27.js';\nimport { I as IconButton } from './index-cb0d7936.js';\nimport 'sendbird';\nimport './actionTypes-3af77038.js';\nimport 'css-vars-ponyfill';\nimport './index-db1485c0.js';\nimport './utils-7b22e0fc.js';\nimport './LeaveChannel-42fd86b9.js';\nimport './index-1fe82074.js';\nimport './index-d3cbd48c.js';\nimport './index-0cc16758.js';\nimport './index-8312f99e.js';\nimport 'react-dom';\nimport './index-d85ca28f.js';\nvar COMPONENT_CLASS_NAME = 'sendbird-message-search-pannel';\n\nfunction MessageSearchPannel(props) {\n  var channelUrl = props.channelUrl,\n      onResultClick = props.onResultClick,\n      onCloseClick = props.onCloseClick;\n\n  var _a = useState(''),\n      searchString = _a[0],\n      setSearchString = _a[1];\n\n  var _b = useState(''),\n      inputString = _b[0],\n      setInputString = _b[1];\n\n  var _c = useState(false),\n      loading = _c[0],\n      setLoading = _c[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var timeout = null;\n  useEffect(function () {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(function () {\n      setSearchString(inputString);\n      setLoading(true);\n      timeout = null;\n    }, 500);\n  }, [inputString]);\n\n  var handleOnChangeInputString = function handleOnChangeInputString(e) {\n    setInputString(e.target.value);\n  };\n\n  var handleOnResultLoaded = function handleOnResultLoaded() {\n    setLoading(false);\n  };\n\n  var handleOnClickResetStringButton = function handleOnClickResetStringButton(e) {\n    e.stopPropagation();\n    setInputString('');\n    setSearchString('');\n  };\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME + \"__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: COMPONENT_CLASS_NAME + \"__header__title\",\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.SEARCH_IN_CHANNEL), /*#__PURE__*/React__default.createElement(IconButton, {\n    className: COMPONENT_CLASS_NAME + \"__header__close-button\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onCloseClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    fillColor: IconColors.ON_BACKGROUND_1,\n    width: \"22px\",\n    height: \"22px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME + \"__input\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME + \"__input__container\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: COMPONENT_CLASS_NAME + \"__input__container__search-icon\",\n    type: IconTypes.SEARCH,\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"24px\",\n    height: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(\"input\", {\n    className: COMPONENT_CLASS_NAME + \"__input__container__input-area\",\n    placeholder: stringSet.SEARCH,\n    value: inputString,\n    onChange: handleOnChangeInputString\n  }), inputString && loading && /*#__PURE__*/React__default.createElement(Loader, {\n    className: COMPONENT_CLASS_NAME + \"__input__container__spinner\",\n    width: \"20px\",\n    height: \"20px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"20px\",\n    height: \"20px\"\n  })), !loading && inputString && /*#__PURE__*/React__default.createElement(Icon, {\n    className: COMPONENT_CLASS_NAME + \"__input__container__reset-input-button\",\n    type: IconTypes.REMOVE,\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"20px\",\n    height: \"20px\",\n    onClick: handleOnClickResetStringButton\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME + \"__message-search\"\n  }, /*#__PURE__*/React__default.createElement(MessageSearch, {\n    channelUrl: channelUrl,\n    searchString: searchString,\n    onResultClick: onResultClick,\n    onResultLoaded: handleOnResultLoaded\n  })));\n}\n\nfunction App(props) {\n  var appId = props.appId,\n      userId = props.userId,\n      accessToken = props.accessToken,\n      theme = props.theme,\n      userListQuery = props.userListQuery,\n      nickname = props.nickname,\n      profileUrl = props.profileUrl,\n      _props$config = props.config,\n      config = _props$config === void 0 ? {} : _props$config,\n      useReaction = props.useReaction,\n      replyType = props.replyType,\n      useMessageGrouping = props.useMessageGrouping,\n      colorSet = props.colorSet,\n      stringSet = props.stringSet,\n      allowProfileEdit = props.allowProfileEdit,\n      disableUserProfile = props.disableUserProfile,\n      renderUserProfile = props.renderUserProfile,\n      showSearchIcon = props.showSearchIcon,\n      onProfileEditSuccess = props.onProfileEditSuccess,\n      imageCompression = props.imageCompression;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentChannelUrl = _useState2[0],\n      setCurrentChannelUrl = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showSettings = _useState4[0],\n      setShowSettings = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showSearch = _useState6[0],\n      setShowSearch = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      highlightedMessage = _useState8[0],\n      setHighlightedMessage = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      startingPoint = _useState10[0],\n      setStartingPoint = _useState10[1];\n\n  return /*#__PURE__*/React__default.createElement(Sendbird, {\n    stringSet: stringSet,\n    appId: appId,\n    userId: userId,\n    accessToken: accessToken,\n    theme: theme,\n    nickname: nickname,\n    profileUrl: profileUrl,\n    userListQuery: userListQuery,\n    config: config,\n    colorSet: colorSet,\n    disableUserProfile: disableUserProfile,\n    renderUserProfile: renderUserProfile,\n    imageCompression: imageCompression,\n    useReaction: useReaction\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-app__wrap\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-app__channellist-wrap\"\n  }, /*#__PURE__*/React__default.createElement(ChannelList, {\n    allowProfileEdit: allowProfileEdit,\n    onProfileEditSuccess: onProfileEditSuccess,\n    onChannelSelect: function onChannelSelect(channel) {\n      setStartingPoint(null);\n      setHighlightedMessage(null);\n\n      if (channel && channel.url) {\n        setCurrentChannelUrl(channel.url);\n      } else {\n        setCurrentChannelUrl('');\n      }\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\\n            \".concat(showSettings ? 'sendbird-app__conversation--settings-open' : '', \"\\n            \").concat(showSearch ? 'sendbird-app__conversation--search-open' : '', \"\\n            sendbird-app__conversation-wrap\\n          \")\n  }, /*#__PURE__*/React__default.createElement(Conversation, {\n    channelUrl: currentChannelUrl,\n    onChatHeaderActionClick: function onChatHeaderActionClick() {\n      setShowSearch(false);\n      setShowSettings(!showSettings);\n    },\n    onSearchClick: function onSearchClick() {\n      setShowSettings(false);\n      setShowSearch(!showSearch);\n    },\n    showSearchIcon: showSearchIcon,\n    startingPoint: startingPoint,\n    highlightedMessage: highlightedMessage,\n    useReaction: useReaction,\n    replyType: replyType,\n    useMessageGrouping: useMessageGrouping\n  })), showSettings && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-app__settingspanel-wrap\"\n  }, /*#__PURE__*/React__default.createElement(ChannelSettings, {\n    className: \"sendbird-channel-settings\",\n    channelUrl: currentChannelUrl,\n    onCloseClick: function onCloseClick() {\n      setShowSettings(false);\n    }\n  })), showSearch && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-app__searchpanel-wrap\"\n  }, /*#__PURE__*/React__default.createElement(MessageSearchPannel, {\n    channelUrl: currentChannelUrl,\n    onResultClick: function onResultClick(message) {\n      if (message.messageId === highlightedMessage) {\n        setHighlightedMessage(null);\n        setTimeout(function () {\n          setHighlightedMessage(message.messageId);\n        });\n      } else {\n        setStartingPoint(message.createdAt);\n        setHighlightedMessage(message.messageId);\n      }\n    },\n    onCloseClick: function onCloseClick() {\n      setShowSearch(false);\n    }\n  }))));\n}\n\nApp.propTypes = {\n  appId: PropTypes.string.isRequired,\n  userId: PropTypes.string.isRequired,\n  accessToken: PropTypes.string,\n  theme: PropTypes.string,\n  userListQuery: PropTypes.func,\n  nickname: PropTypes.string,\n  profileUrl: PropTypes.string,\n  allowProfileEdit: PropTypes.bool,\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  config: PropTypes.shape({\n    // None Error Warning Info 'All/Debug'\n    logLevel: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n  }),\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  showSearchIcon: PropTypes.bool,\n  useMessageGrouping: PropTypes.bool,\n  stringSet: PropTypes.objectOf(PropTypes.string),\n  colorSet: PropTypes.objectOf(PropTypes.string),\n  imageCompression: PropTypes.shape({\n    compressionRate: PropTypes.number,\n    resizingWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    resizingHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  })\n};\nApp.defaultProps = {\n  accessToken: '',\n  theme: 'light',\n  nickname: '',\n  profileUrl: '',\n  userListQuery: null,\n  allowProfileEdit: false,\n  onProfileEditSuccess: null,\n  disableUserProfile: false,\n  showSearchIcon: false,\n  renderUserProfile: null,\n  config: {},\n  useReaction: true,\n  replyType: 'NONE',\n  useMessageGrouping: true,\n  stringSet: null,\n  colorSet: null,\n  imageCompression: {}\n};\nexport { App as default };","map":null,"metadata":{},"sourceType":"module"}